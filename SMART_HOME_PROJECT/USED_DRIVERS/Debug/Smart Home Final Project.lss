
Smart Home Final Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000274a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016c  00800060  0000274a  000027de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000641  008001cc  008001cc  0000294a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000294a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000029a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005e8  00000000  00000000  000029e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005e73  00000000  00000000  00002fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001891  00000000  00000000  00008e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000031d5  00000000  00000000  0000a6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ec4  00000000  00000000  0000d8a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b3c  00000000  00000000  0000e76c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004741  00000000  00000000  000102a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000590  00000000  00000000  000149e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      1c:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__vector_7>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	fd 06       	cpc	r15, r29
      56:	02 07       	cpc	r16, r18
      58:	07 07       	cpc	r16, r23
      5a:	0c 07       	cpc	r16, r28
      5c:	11 07       	cpc	r17, r17
      5e:	16 07       	cpc	r17, r22
      60:	e2 06       	cpc	r14, r18
      62:	e2 06       	cpc	r14, r18
      64:	e2 06       	cpc	r14, r18
      66:	e2 06       	cpc	r14, r18
      68:	e2 06       	cpc	r14, r18
      6a:	e2 06       	cpc	r14, r18
      6c:	e2 06       	cpc	r14, r18
      6e:	e2 06       	cpc	r14, r18
      70:	e2 06       	cpc	r14, r18
      72:	e2 06       	cpc	r14, r18
      74:	e2 06       	cpc	r14, r18
      76:	e2 06       	cpc	r14, r18
      78:	1f 07       	cpc	r17, r31
      7a:	f7 06       	cpc	r15, r23
      7c:	e2 06       	cpc	r14, r18
      7e:	e2 06       	cpc	r14, r18
      80:	e2 06       	cpc	r14, r18
      82:	e2 06       	cpc	r14, r18
      84:	e2 06       	cpc	r14, r18
      86:	e2 06       	cpc	r14, r18
      88:	e2 06       	cpc	r14, r18
      8a:	e2 06       	cpc	r14, r18
      8c:	e2 06       	cpc	r14, r18
      8e:	e2 06       	cpc	r14, r18
      90:	1b 07       	cpc	r17, r27
      92:	e2 06       	cpc	r14, r18
      94:	e2 06       	cpc	r14, r18
      96:	fa 06       	cpc	r15, r26
      98:	e2 06       	cpc	r14, r18
      9a:	e2 06       	cpc	r14, r18
      9c:	f4 06       	cpc	r15, r20

0000009e <__ctors_end>:
      9e:	11 24       	eor	r1, r1
      a0:	1f be       	out	0x3f, r1	; 63
      a2:	cf e5       	ldi	r28, 0x5F	; 95
      a4:	d8 e0       	ldi	r29, 0x08	; 8
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
      aa:	11 e0       	ldi	r17, 0x01	; 1
      ac:	a0 e6       	ldi	r26, 0x60	; 96
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	ea e4       	ldi	r30, 0x4A	; 74
      b2:	f7 e2       	ldi	r31, 0x27	; 39
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
      b6:	05 90       	lpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	ac 3c       	cpi	r26, 0xCC	; 204
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_clear_bss>:
      c0:	28 e0       	ldi	r18, 0x08	; 8
      c2:	ac ec       	ldi	r26, 0xCC	; 204
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	ad 30       	cpi	r26, 0x0D	; 13
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 69 05 	call	0xad2	; 0xad2 <main>
      d4:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <ADC_vidInit>:
      dc:	9a b3       	in	r25, 0x1a	; 26
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	08 2e       	mov	r0, r24
      e4:	02 c0       	rjmp	.+4      	; 0xea <ADC_vidInit+0xe>
      e6:	22 0f       	add	r18, r18
      e8:	33 1f       	adc	r19, r19
      ea:	0a 94       	dec	r0
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <ADC_vidInit+0xa>
      ee:	20 95       	com	r18
      f0:	29 23       	and	r18, r25
      f2:	2a bb       	out	0x1a, r18	; 26
      f4:	97 b1       	in	r25, 0x07	; 7
      f6:	90 7e       	andi	r25, 0xE0	; 224
      f8:	97 b9       	out	0x07, r25	; 7
      fa:	97 b1       	in	r25, 0x07	; 7
      fc:	89 2b       	or	r24, r25
      fe:	87 b9       	out	0x07, r24	; 7
     100:	86 b1       	in	r24, 0x06	; 6
     102:	88 7f       	andi	r24, 0xF8	; 248
     104:	86 b9       	out	0x06, r24	; 6
     106:	86 b1       	in	r24, 0x06	; 6
     108:	86 60       	ori	r24, 0x06	; 6
     10a:	86 b9       	out	0x06, r24	; 6
     10c:	87 b1       	in	r24, 0x07	; 7
     10e:	80 68       	ori	r24, 0x80	; 128
     110:	87 b9       	out	0x07, r24	; 7
     112:	87 b1       	in	r24, 0x07	; 7
     114:	80 64       	ori	r24, 0x40	; 64
     116:	87 b9       	out	0x07, r24	; 7
     118:	87 b1       	in	r24, 0x07	; 7
     11a:	8f 7d       	andi	r24, 0xDF	; 223
     11c:	87 b9       	out	0x07, r24	; 7
     11e:	86 b1       	in	r24, 0x06	; 6
     120:	80 68       	ori	r24, 0x80	; 128
     122:	86 b9       	out	0x06, r24	; 6
     124:	08 95       	ret

00000126 <ADC_u16Read>:
     126:	86 b1       	in	r24, 0x06	; 6
     128:	80 64       	ori	r24, 0x40	; 64
     12a:	86 b9       	out	0x06, r24	; 6
     12c:	34 9b       	sbis	0x06, 4	; 6
     12e:	fe cf       	rjmp	.-4      	; 0x12c <ADC_u16Read+0x6>
     130:	86 b1       	in	r24, 0x06	; 6
     132:	80 61       	ori	r24, 0x10	; 16
     134:	86 b9       	out	0x06, r24	; 6
     136:	24 b1       	in	r18, 0x04	; 4
     138:	85 b1       	in	r24, 0x05	; 5
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	98 2f       	mov	r25, r24
     13e:	88 27       	eor	r24, r24
     140:	82 2b       	or	r24, r18
     142:	08 95       	ret

00000144 <DIO_vidSetPinMode>:
     144:	82 30       	cpi	r24, 0x02	; 2
     146:	19 f1       	breq	.+70     	; 0x18e <DIO_vidSetPinMode+0x4a>
     148:	18 f4       	brcc	.+6      	; 0x150 <DIO_vidSetPinMode+0xc>
     14a:	81 30       	cpi	r24, 0x01	; 1
     14c:	39 f0       	breq	.+14     	; 0x15c <DIO_vidSetPinMode+0x18>
     14e:	08 95       	ret
     150:	83 30       	cpi	r24, 0x03	; 3
     152:	b1 f1       	breq	.+108    	; 0x1c0 <DIO_vidSetPinMode+0x7c>
     154:	84 30       	cpi	r24, 0x04	; 4
     156:	09 f4       	brne	.+2      	; 0x15a <DIO_vidSetPinMode+0x16>
     158:	4c c0       	rjmp	.+152    	; 0x1f2 <DIO_vidSetPinMode+0xae>
     15a:	08 95       	ret
     15c:	41 30       	cpi	r20, 0x01	; 1
     15e:	59 f4       	brne	.+22     	; 0x176 <DIO_vidSetPinMode+0x32>
     160:	2a b3       	in	r18, 0x1a	; 26
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vidSetPinMode+0x28>
     168:	88 0f       	add	r24, r24
     16a:	99 1f       	adc	r25, r25
     16c:	6a 95       	dec	r22
     16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vidSetPinMode+0x24>
     170:	82 2b       	or	r24, r18
     172:	8a bb       	out	0x1a, r24	; 26
     174:	08 95       	ret
     176:	2a b3       	in	r18, 0x1a	; 26
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_vidSetPinMode+0x3e>
     17e:	88 0f       	add	r24, r24
     180:	99 1f       	adc	r25, r25
     182:	6a 95       	dec	r22
     184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_vidSetPinMode+0x3a>
     186:	80 95       	com	r24
     188:	82 23       	and	r24, r18
     18a:	8a bb       	out	0x1a, r24	; 26
     18c:	08 95       	ret
     18e:	41 30       	cpi	r20, 0x01	; 1
     190:	59 f4       	brne	.+22     	; 0x1a8 <DIO_vidSetPinMode+0x64>
     192:	27 b3       	in	r18, 0x17	; 23
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_vidSetPinMode+0x5a>
     19a:	88 0f       	add	r24, r24
     19c:	99 1f       	adc	r25, r25
     19e:	6a 95       	dec	r22
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_vidSetPinMode+0x56>
     1a2:	82 2b       	or	r24, r18
     1a4:	87 bb       	out	0x17, r24	; 23
     1a6:	08 95       	ret
     1a8:	27 b3       	in	r18, 0x17	; 23
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_vidSetPinMode+0x70>
     1b0:	88 0f       	add	r24, r24
     1b2:	99 1f       	adc	r25, r25
     1b4:	6a 95       	dec	r22
     1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_vidSetPinMode+0x6c>
     1b8:	80 95       	com	r24
     1ba:	82 23       	and	r24, r18
     1bc:	87 bb       	out	0x17, r24	; 23
     1be:	08 95       	ret
     1c0:	41 30       	cpi	r20, 0x01	; 1
     1c2:	59 f4       	brne	.+22     	; 0x1da <DIO_vidSetPinMode+0x96>
     1c4:	24 b3       	in	r18, 0x14	; 20
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_vidSetPinMode+0x8c>
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	6a 95       	dec	r22
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_vidSetPinMode+0x88>
     1d4:	82 2b       	or	r24, r18
     1d6:	84 bb       	out	0x14, r24	; 20
     1d8:	08 95       	ret
     1da:	24 b3       	in	r18, 0x14	; 20
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_vidSetPinMode+0xa2>
     1e2:	88 0f       	add	r24, r24
     1e4:	99 1f       	adc	r25, r25
     1e6:	6a 95       	dec	r22
     1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_vidSetPinMode+0x9e>
     1ea:	80 95       	com	r24
     1ec:	82 23       	and	r24, r18
     1ee:	84 bb       	out	0x14, r24	; 20
     1f0:	08 95       	ret
     1f2:	41 30       	cpi	r20, 0x01	; 1
     1f4:	59 f4       	brne	.+22     	; 0x20c <DIO_vidSetPinMode+0xc8>
     1f6:	21 b3       	in	r18, 0x11	; 17
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_vidSetPinMode+0xbe>
     1fe:	88 0f       	add	r24, r24
     200:	99 1f       	adc	r25, r25
     202:	6a 95       	dec	r22
     204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_vidSetPinMode+0xba>
     206:	82 2b       	or	r24, r18
     208:	81 bb       	out	0x11, r24	; 17
     20a:	08 95       	ret
     20c:	21 b3       	in	r18, 0x11	; 17
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_vidSetPinMode+0xd4>
     214:	88 0f       	add	r24, r24
     216:	99 1f       	adc	r25, r25
     218:	6a 95       	dec	r22
     21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_vidSetPinMode+0xd0>
     21c:	80 95       	com	r24
     21e:	82 23       	and	r24, r18
     220:	81 bb       	out	0x11, r24	; 17
     222:	08 95       	ret

00000224 <DIO_vidWritePin>:
     224:	82 30       	cpi	r24, 0x02	; 2
     226:	19 f1       	breq	.+70     	; 0x26e <DIO_vidWritePin+0x4a>
     228:	18 f4       	brcc	.+6      	; 0x230 <DIO_vidWritePin+0xc>
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	39 f0       	breq	.+14     	; 0x23c <DIO_vidWritePin+0x18>
     22e:	08 95       	ret
     230:	83 30       	cpi	r24, 0x03	; 3
     232:	b1 f1       	breq	.+108    	; 0x2a0 <DIO_vidWritePin+0x7c>
     234:	84 30       	cpi	r24, 0x04	; 4
     236:	09 f4       	brne	.+2      	; 0x23a <DIO_vidWritePin+0x16>
     238:	4c c0       	rjmp	.+152    	; 0x2d2 <DIO_vidWritePin+0xae>
     23a:	08 95       	ret
     23c:	41 30       	cpi	r20, 0x01	; 1
     23e:	59 f4       	brne	.+22     	; 0x256 <DIO_vidWritePin+0x32>
     240:	2b b3       	in	r18, 0x1b	; 27
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_vidWritePin+0x28>
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	6a 95       	dec	r22
     24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_vidWritePin+0x24>
     250:	82 2b       	or	r24, r18
     252:	8b bb       	out	0x1b, r24	; 27
     254:	08 95       	ret
     256:	2b b3       	in	r18, 0x1b	; 27
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_vidWritePin+0x3e>
     25e:	88 0f       	add	r24, r24
     260:	99 1f       	adc	r25, r25
     262:	6a 95       	dec	r22
     264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_vidWritePin+0x3a>
     266:	80 95       	com	r24
     268:	82 23       	and	r24, r18
     26a:	8b bb       	out	0x1b, r24	; 27
     26c:	08 95       	ret
     26e:	41 30       	cpi	r20, 0x01	; 1
     270:	59 f4       	brne	.+22     	; 0x288 <DIO_vidWritePin+0x64>
     272:	28 b3       	in	r18, 0x18	; 24
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_vidWritePin+0x5a>
     27a:	88 0f       	add	r24, r24
     27c:	99 1f       	adc	r25, r25
     27e:	6a 95       	dec	r22
     280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_vidWritePin+0x56>
     282:	82 2b       	or	r24, r18
     284:	88 bb       	out	0x18, r24	; 24
     286:	08 95       	ret
     288:	28 b3       	in	r18, 0x18	; 24
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_vidWritePin+0x70>
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	6a 95       	dec	r22
     296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_vidWritePin+0x6c>
     298:	80 95       	com	r24
     29a:	82 23       	and	r24, r18
     29c:	88 bb       	out	0x18, r24	; 24
     29e:	08 95       	ret
     2a0:	41 30       	cpi	r20, 0x01	; 1
     2a2:	59 f4       	brne	.+22     	; 0x2ba <DIO_vidWritePin+0x96>
     2a4:	25 b3       	in	r18, 0x15	; 21
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_vidWritePin+0x8c>
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	6a 95       	dec	r22
     2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_vidWritePin+0x88>
     2b4:	82 2b       	or	r24, r18
     2b6:	85 bb       	out	0x15, r24	; 21
     2b8:	08 95       	ret
     2ba:	25 b3       	in	r18, 0x15	; 21
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_vidWritePin+0xa2>
     2c2:	88 0f       	add	r24, r24
     2c4:	99 1f       	adc	r25, r25
     2c6:	6a 95       	dec	r22
     2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_vidWritePin+0x9e>
     2ca:	80 95       	com	r24
     2cc:	82 23       	and	r24, r18
     2ce:	85 bb       	out	0x15, r24	; 21
     2d0:	08 95       	ret
     2d2:	41 30       	cpi	r20, 0x01	; 1
     2d4:	59 f4       	brne	.+22     	; 0x2ec <DIO_vidWritePin+0xc8>
     2d6:	22 b3       	in	r18, 0x12	; 18
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_vidWritePin+0xbe>
     2de:	88 0f       	add	r24, r24
     2e0:	99 1f       	adc	r25, r25
     2e2:	6a 95       	dec	r22
     2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_vidWritePin+0xba>
     2e6:	82 2b       	or	r24, r18
     2e8:	82 bb       	out	0x12, r24	; 18
     2ea:	08 95       	ret
     2ec:	22 b3       	in	r18, 0x12	; 18
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_vidWritePin+0xd4>
     2f4:	88 0f       	add	r24, r24
     2f6:	99 1f       	adc	r25, r25
     2f8:	6a 95       	dec	r22
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_vidWritePin+0xd0>
     2fc:	80 95       	com	r24
     2fe:	82 23       	and	r24, r18
     300:	82 bb       	out	0x12, r24	; 18
     302:	08 95       	ret

00000304 <DIO_enuReadPin>:
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	99 f0       	breq	.+38     	; 0x32e <DIO_enuReadPin+0x2a>
     308:	18 f4       	brcc	.+6      	; 0x310 <DIO_enuReadPin+0xc>
     30a:	81 30       	cpi	r24, 0x01	; 1
     30c:	31 f0       	breq	.+12     	; 0x31a <DIO_enuReadPin+0x16>
     30e:	2c c0       	rjmp	.+88     	; 0x368 <DIO_enuReadPin+0x64>
     310:	83 30       	cpi	r24, 0x03	; 3
     312:	b9 f0       	breq	.+46     	; 0x342 <DIO_enuReadPin+0x3e>
     314:	84 30       	cpi	r24, 0x04	; 4
     316:	f9 f0       	breq	.+62     	; 0x356 <DIO_enuReadPin+0x52>
     318:	27 c0       	rjmp	.+78     	; 0x368 <DIO_enuReadPin+0x64>
     31a:	89 b3       	in	r24, 0x19	; 25
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_enuReadPin+0x20>
     320:	95 95       	asr	r25
     322:	87 95       	ror	r24
     324:	6a 95       	dec	r22
     326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_enuReadPin+0x1c>
     328:	98 2f       	mov	r25, r24
     32a:	91 70       	andi	r25, 0x01	; 1
     32c:	1d c0       	rjmp	.+58     	; 0x368 <DIO_enuReadPin+0x64>
     32e:	86 b3       	in	r24, 0x16	; 22
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_enuReadPin+0x34>
     334:	95 95       	asr	r25
     336:	87 95       	ror	r24
     338:	6a 95       	dec	r22
     33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_enuReadPin+0x30>
     33c:	98 2f       	mov	r25, r24
     33e:	91 70       	andi	r25, 0x01	; 1
     340:	13 c0       	rjmp	.+38     	; 0x368 <DIO_enuReadPin+0x64>
     342:	83 b3       	in	r24, 0x13	; 19
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_enuReadPin+0x48>
     348:	95 95       	asr	r25
     34a:	87 95       	ror	r24
     34c:	6a 95       	dec	r22
     34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_enuReadPin+0x44>
     350:	98 2f       	mov	r25, r24
     352:	91 70       	andi	r25, 0x01	; 1
     354:	09 c0       	rjmp	.+18     	; 0x368 <DIO_enuReadPin+0x64>
     356:	80 b3       	in	r24, 0x10	; 16
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_enuReadPin+0x5c>
     35c:	95 95       	asr	r25
     35e:	87 95       	ror	r24
     360:	6a 95       	dec	r22
     362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_enuReadPin+0x58>
     364:	98 2f       	mov	r25, r24
     366:	91 70       	andi	r25, 0x01	; 1
     368:	89 2f       	mov	r24, r25
     36a:	08 95       	ret

0000036c <DIO_vidSetPortMode>:
     36c:	82 30       	cpi	r24, 0x02	; 2
     36e:	a1 f0       	breq	.+40     	; 0x398 <DIO_vidSetPortMode+0x2c>
     370:	18 f4       	brcc	.+6      	; 0x378 <DIO_vidSetPortMode+0xc>
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	31 f0       	breq	.+12     	; 0x382 <DIO_vidSetPortMode+0x16>
     376:	08 95       	ret
     378:	83 30       	cpi	r24, 0x03	; 3
     37a:	c9 f0       	breq	.+50     	; 0x3ae <DIO_vidSetPortMode+0x42>
     37c:	84 30       	cpi	r24, 0x04	; 4
     37e:	11 f1       	breq	.+68     	; 0x3c4 <DIO_vidSetPortMode+0x58>
     380:	08 95       	ret
     382:	61 30       	cpi	r22, 0x01	; 1
     384:	19 f4       	brne	.+6      	; 0x38c <DIO_vidSetPortMode+0x20>
     386:	8f ef       	ldi	r24, 0xFF	; 255
     388:	8a bb       	out	0x1a, r24	; 26
     38a:	08 95       	ret
     38c:	61 11       	cpse	r22, r1
     38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_vidSetPortMode+0x28>
     390:	1a ba       	out	0x1a, r1	; 26
     392:	08 95       	ret
     394:	6a bb       	out	0x1a, r22	; 26
     396:	08 95       	ret
     398:	61 30       	cpi	r22, 0x01	; 1
     39a:	19 f4       	brne	.+6      	; 0x3a2 <DIO_vidSetPortMode+0x36>
     39c:	8f ef       	ldi	r24, 0xFF	; 255
     39e:	87 bb       	out	0x17, r24	; 23
     3a0:	08 95       	ret
     3a2:	61 11       	cpse	r22, r1
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_vidSetPortMode+0x3e>
     3a6:	17 ba       	out	0x17, r1	; 23
     3a8:	08 95       	ret
     3aa:	67 bb       	out	0x17, r22	; 23
     3ac:	08 95       	ret
     3ae:	61 30       	cpi	r22, 0x01	; 1
     3b0:	19 f4       	brne	.+6      	; 0x3b8 <DIO_vidSetPortMode+0x4c>
     3b2:	8f ef       	ldi	r24, 0xFF	; 255
     3b4:	84 bb       	out	0x14, r24	; 20
     3b6:	08 95       	ret
     3b8:	61 11       	cpse	r22, r1
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_vidSetPortMode+0x54>
     3bc:	14 ba       	out	0x14, r1	; 20
     3be:	08 95       	ret
     3c0:	64 bb       	out	0x14, r22	; 20
     3c2:	08 95       	ret
     3c4:	61 30       	cpi	r22, 0x01	; 1
     3c6:	19 f4       	brne	.+6      	; 0x3ce <DIO_vidSetPortMode+0x62>
     3c8:	8f ef       	ldi	r24, 0xFF	; 255
     3ca:	81 bb       	out	0x11, r24	; 17
     3cc:	08 95       	ret
     3ce:	61 11       	cpse	r22, r1
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_vidSetPortMode+0x6a>
     3d2:	11 ba       	out	0x11, r1	; 17
     3d4:	08 95       	ret
     3d6:	61 bb       	out	0x11, r22	; 17
     3d8:	08 95       	ret

000003da <DIO_vidWritePort>:
     3da:	82 30       	cpi	r24, 0x02	; 2
     3dc:	a1 f0       	breq	.+40     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     3de:	18 f4       	brcc	.+6      	; 0x3e6 <DIO_vidWritePort+0xc>
     3e0:	81 30       	cpi	r24, 0x01	; 1
     3e2:	31 f0       	breq	.+12     	; 0x3f0 <DIO_vidWritePort+0x16>
     3e4:	08 95       	ret
     3e6:	83 30       	cpi	r24, 0x03	; 3
     3e8:	c9 f0       	breq	.+50     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     3ea:	84 30       	cpi	r24, 0x04	; 4
     3ec:	11 f1       	breq	.+68     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     3ee:	08 95       	ret
     3f0:	61 30       	cpi	r22, 0x01	; 1
     3f2:	19 f4       	brne	.+6      	; 0x3fa <DIO_vidWritePort+0x20>
     3f4:	8f ef       	ldi	r24, 0xFF	; 255
     3f6:	8b bb       	out	0x1b, r24	; 27
     3f8:	08 95       	ret
     3fa:	61 11       	cpse	r22, r1
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     3fe:	1b ba       	out	0x1b, r1	; 27
     400:	08 95       	ret
     402:	6b bb       	out	0x1b, r22	; 27
     404:	08 95       	ret
     406:	61 30       	cpi	r22, 0x01	; 1
     408:	19 f4       	brne	.+6      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     40a:	8f ef       	ldi	r24, 0xFF	; 255
     40c:	88 bb       	out	0x18, r24	; 24
     40e:	08 95       	ret
     410:	61 11       	cpse	r22, r1
     412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     414:	18 ba       	out	0x18, r1	; 24
     416:	08 95       	ret
     418:	68 bb       	out	0x18, r22	; 24
     41a:	08 95       	ret
     41c:	61 30       	cpi	r22, 0x01	; 1
     41e:	19 f4       	brne	.+6      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     420:	8f ef       	ldi	r24, 0xFF	; 255
     422:	85 bb       	out	0x15, r24	; 21
     424:	08 95       	ret
     426:	61 11       	cpse	r22, r1
     428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     42a:	15 ba       	out	0x15, r1	; 21
     42c:	08 95       	ret
     42e:	65 bb       	out	0x15, r22	; 21
     430:	08 95       	ret
     432:	61 30       	cpi	r22, 0x01	; 1
     434:	19 f4       	brne	.+6      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     436:	8f ef       	ldi	r24, 0xFF	; 255
     438:	82 bb       	out	0x12, r24	; 18
     43a:	08 95       	ret
     43c:	61 11       	cpse	r22, r1
     43e:	02 c0       	rjmp	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     440:	12 ba       	out	0x12, r1	; 18
     442:	08 95       	ret
     444:	62 bb       	out	0x12, r22	; 18
     446:	08 95       	ret

00000448 <DIO_vidSetNibbleMode>:
     448:	82 30       	cpi	r24, 0x02	; 2
     44a:	c9 f0       	breq	.+50     	; 0x47e <DIO_vidSetNibbleMode+0x36>
     44c:	18 f4       	brcc	.+6      	; 0x454 <DIO_vidSetNibbleMode+0xc>
     44e:	81 30       	cpi	r24, 0x01	; 1
     450:	31 f0       	breq	.+12     	; 0x45e <DIO_vidSetNibbleMode+0x16>
     452:	08 95       	ret
     454:	83 30       	cpi	r24, 0x03	; 3
     456:	19 f1       	breq	.+70     	; 0x49e <DIO_vidSetNibbleMode+0x56>
     458:	84 30       	cpi	r24, 0x04	; 4
     45a:	89 f1       	breq	.+98     	; 0x4be <DIO_vidSetNibbleMode+0x76>
     45c:	08 95       	ret
     45e:	61 30       	cpi	r22, 0x01	; 1
     460:	39 f4       	brne	.+14     	; 0x470 <DIO_vidSetNibbleMode+0x28>
     462:	6a b3       	in	r22, 0x1a	; 26
     464:	40 7f       	andi	r20, 0xF0	; 240
     466:	6f 70       	andi	r22, 0x0F	; 15
     468:	64 2b       	or	r22, r20
     46a:	0e 94 b6 01 	call	0x36c	; 0x36c <DIO_vidSetPortMode>
     46e:	08 95       	ret
     470:	6a b3       	in	r22, 0x1a	; 26
     472:	4f 70       	andi	r20, 0x0F	; 15
     474:	60 7f       	andi	r22, 0xF0	; 240
     476:	64 2b       	or	r22, r20
     478:	0e 94 b6 01 	call	0x36c	; 0x36c <DIO_vidSetPortMode>
     47c:	08 95       	ret
     47e:	61 30       	cpi	r22, 0x01	; 1
     480:	39 f4       	brne	.+14     	; 0x490 <DIO_vidSetNibbleMode+0x48>
     482:	67 b3       	in	r22, 0x17	; 23
     484:	40 7f       	andi	r20, 0xF0	; 240
     486:	6f 70       	andi	r22, 0x0F	; 15
     488:	64 2b       	or	r22, r20
     48a:	0e 94 b6 01 	call	0x36c	; 0x36c <DIO_vidSetPortMode>
     48e:	08 95       	ret
     490:	67 b3       	in	r22, 0x17	; 23
     492:	4f 70       	andi	r20, 0x0F	; 15
     494:	60 7f       	andi	r22, 0xF0	; 240
     496:	64 2b       	or	r22, r20
     498:	0e 94 b6 01 	call	0x36c	; 0x36c <DIO_vidSetPortMode>
     49c:	08 95       	ret
     49e:	61 30       	cpi	r22, 0x01	; 1
     4a0:	39 f4       	brne	.+14     	; 0x4b0 <DIO_vidSetNibbleMode+0x68>
     4a2:	64 b3       	in	r22, 0x14	; 20
     4a4:	40 7f       	andi	r20, 0xF0	; 240
     4a6:	6f 70       	andi	r22, 0x0F	; 15
     4a8:	64 2b       	or	r22, r20
     4aa:	0e 94 b6 01 	call	0x36c	; 0x36c <DIO_vidSetPortMode>
     4ae:	08 95       	ret
     4b0:	64 b3       	in	r22, 0x14	; 20
     4b2:	4f 70       	andi	r20, 0x0F	; 15
     4b4:	60 7f       	andi	r22, 0xF0	; 240
     4b6:	64 2b       	or	r22, r20
     4b8:	0e 94 b6 01 	call	0x36c	; 0x36c <DIO_vidSetPortMode>
     4bc:	08 95       	ret
     4be:	61 30       	cpi	r22, 0x01	; 1
     4c0:	39 f4       	brne	.+14     	; 0x4d0 <DIO_vidSetNibbleMode+0x88>
     4c2:	61 b3       	in	r22, 0x11	; 17
     4c4:	40 7f       	andi	r20, 0xF0	; 240
     4c6:	6f 70       	andi	r22, 0x0F	; 15
     4c8:	64 2b       	or	r22, r20
     4ca:	0e 94 b6 01 	call	0x36c	; 0x36c <DIO_vidSetPortMode>
     4ce:	08 95       	ret
     4d0:	61 b3       	in	r22, 0x11	; 17
     4d2:	4f 70       	andi	r20, 0x0F	; 15
     4d4:	60 7f       	andi	r22, 0xF0	; 240
     4d6:	64 2b       	or	r22, r20
     4d8:	0e 94 b6 01 	call	0x36c	; 0x36c <DIO_vidSetPortMode>
     4dc:	08 95       	ret

000004de <DIO_vidWriteNibble>:
     4de:	82 30       	cpi	r24, 0x02	; 2
     4e0:	c9 f0       	breq	.+50     	; 0x514 <DIO_vidWriteNibble+0x36>
     4e2:	18 f4       	brcc	.+6      	; 0x4ea <DIO_vidWriteNibble+0xc>
     4e4:	81 30       	cpi	r24, 0x01	; 1
     4e6:	31 f0       	breq	.+12     	; 0x4f4 <DIO_vidWriteNibble+0x16>
     4e8:	08 95       	ret
     4ea:	83 30       	cpi	r24, 0x03	; 3
     4ec:	19 f1       	breq	.+70     	; 0x534 <DIO_vidWriteNibble+0x56>
     4ee:	84 30       	cpi	r24, 0x04	; 4
     4f0:	89 f1       	breq	.+98     	; 0x554 <DIO_vidWriteNibble+0x76>
     4f2:	08 95       	ret
     4f4:	61 30       	cpi	r22, 0x01	; 1
     4f6:	39 f4       	brne	.+14     	; 0x506 <DIO_vidWriteNibble+0x28>
     4f8:	6b b3       	in	r22, 0x1b	; 27
     4fa:	40 7f       	andi	r20, 0xF0	; 240
     4fc:	6f 70       	andi	r22, 0x0F	; 15
     4fe:	64 2b       	or	r22, r20
     500:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_vidWritePort>
     504:	08 95       	ret
     506:	6b b3       	in	r22, 0x1b	; 27
     508:	4f 70       	andi	r20, 0x0F	; 15
     50a:	60 7f       	andi	r22, 0xF0	; 240
     50c:	64 2b       	or	r22, r20
     50e:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_vidWritePort>
     512:	08 95       	ret
     514:	61 30       	cpi	r22, 0x01	; 1
     516:	39 f4       	brne	.+14     	; 0x526 <DIO_vidWriteNibble+0x48>
     518:	68 b3       	in	r22, 0x18	; 24
     51a:	40 7f       	andi	r20, 0xF0	; 240
     51c:	6f 70       	andi	r22, 0x0F	; 15
     51e:	64 2b       	or	r22, r20
     520:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_vidWritePort>
     524:	08 95       	ret
     526:	68 b3       	in	r22, 0x18	; 24
     528:	4f 70       	andi	r20, 0x0F	; 15
     52a:	60 7f       	andi	r22, 0xF0	; 240
     52c:	64 2b       	or	r22, r20
     52e:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_vidWritePort>
     532:	08 95       	ret
     534:	61 30       	cpi	r22, 0x01	; 1
     536:	39 f4       	brne	.+14     	; 0x546 <DIO_vidWriteNibble+0x68>
     538:	65 b3       	in	r22, 0x15	; 21
     53a:	40 7f       	andi	r20, 0xF0	; 240
     53c:	6f 70       	andi	r22, 0x0F	; 15
     53e:	64 2b       	or	r22, r20
     540:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_vidWritePort>
     544:	08 95       	ret
     546:	65 b3       	in	r22, 0x15	; 21
     548:	4f 70       	andi	r20, 0x0F	; 15
     54a:	60 7f       	andi	r22, 0xF0	; 240
     54c:	64 2b       	or	r22, r20
     54e:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_vidWritePort>
     552:	08 95       	ret
     554:	61 30       	cpi	r22, 0x01	; 1
     556:	39 f4       	brne	.+14     	; 0x566 <DIO_vidWriteNibble+0x88>
     558:	62 b3       	in	r22, 0x12	; 18
     55a:	40 7f       	andi	r20, 0xF0	; 240
     55c:	6f 70       	andi	r22, 0x0F	; 15
     55e:	64 2b       	or	r22, r20
     560:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_vidWritePort>
     564:	08 95       	ret
     566:	62 b3       	in	r22, 0x12	; 18
     568:	4f 70       	andi	r20, 0x0F	; 15
     56a:	60 7f       	andi	r22, 0xF0	; 240
     56c:	64 2b       	or	r22, r20
     56e:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_vidWritePort>
     572:	08 95       	ret

00000574 <EEPROM_vidWrite>:
     574:	93 70       	andi	r25, 0x03	; 3
     576:	8e bb       	out	0x1e, r24	; 30
     578:	1f ba       	out	0x1f, r1	; 31
     57a:	6d bb       	out	0x1d, r22	; 29
     57c:	8c b3       	in	r24, 0x1c	; 28
     57e:	84 60       	ori	r24, 0x04	; 4
     580:	8c bb       	out	0x1c, r24	; 28
     582:	8c b3       	in	r24, 0x1c	; 28
     584:	82 60       	ori	r24, 0x02	; 2
     586:	8c bb       	out	0x1c, r24	; 28
     588:	e1 99       	sbic	0x1c, 1	; 28
     58a:	fe cf       	rjmp	.-4      	; 0x588 <EEPROM_vidWrite+0x14>
     58c:	08 95       	ret

0000058e <EEPROM_u8Read>:
     58e:	93 70       	andi	r25, 0x03	; 3
     590:	8e bb       	out	0x1e, r24	; 30
     592:	1f ba       	out	0x1f, r1	; 31
     594:	8c b3       	in	r24, 0x1c	; 28
     596:	81 60       	ori	r24, 0x01	; 1
     598:	8c bb       	out	0x1c, r24	; 28
     59a:	8d b3       	in	r24, 0x1d	; 29
     59c:	08 95       	ret

0000059e <LCD_vidSendEnPulse>:
	num %=(10)*LCD_REAL_NUMBER_DIGITS_AFTER_DOT;
	if(num>0){
		LCD_vidSendString(".");
		LCD_vidSendNumber(num);
	}
}
     59e:	41 e0       	ldi	r20, 0x01	; 1
     5a0:	63 e0       	ldi	r22, 0x03	; 3
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	0e 94 12 01 	call	0x224	; 0x224 <DIO_vidWritePin>
     5a8:	8f e1       	ldi	r24, 0x1F	; 31
     5aa:	9e e4       	ldi	r25, 0x4E	; 78
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <LCD_vidSendEnPulse+0xe>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <LCD_vidSendEnPulse+0x14>
     5b2:	00 00       	nop
     5b4:	40 e0       	ldi	r20, 0x00	; 0
     5b6:	63 e0       	ldi	r22, 0x03	; 3
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	0e 94 12 01 	call	0x224	; 0x224 <DIO_vidWritePin>
     5be:	08 95       	ret

000005c0 <LCD_vidSendCmd>:
     5c0:	cf 93       	push	r28
     5c2:	c8 2f       	mov	r28, r24
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	0e 94 12 01 	call	0x224	; 0x224 <DIO_vidWritePin>
     5ce:	4c 2f       	mov	r20, r28
     5d0:	61 e0       	ldi	r22, 0x01	; 1
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	0e 94 6f 02 	call	0x4de	; 0x4de <DIO_vidWriteNibble>
     5d8:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_vidSendEnPulse>
     5dc:	4c 2f       	mov	r20, r28
     5de:	42 95       	swap	r20
     5e0:	40 7f       	andi	r20, 0xF0	; 240
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	0e 94 6f 02 	call	0x4de	; 0x4de <DIO_vidWriteNibble>
     5ea:	63 e0       	ldi	r22, 0x03	; 3
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_vidSendEnPulse>
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <LCD_vidInit>:
     5fa:	2f ef       	ldi	r18, 0xFF	; 255
     5fc:	81 ee       	ldi	r24, 0xE1	; 225
     5fe:	94 e0       	ldi	r25, 0x04	; 4
     600:	21 50       	subi	r18, 0x01	; 1
     602:	80 40       	sbci	r24, 0x00	; 0
     604:	90 40       	sbci	r25, 0x00	; 0
     606:	e1 f7       	brne	.-8      	; 0x600 <LCD_vidInit+0x6>
     608:	00 c0       	rjmp	.+0      	; 0x60a <LCD_vidInit+0x10>
     60a:	00 00       	nop
     60c:	41 e0       	ldi	r20, 0x01	; 1
     60e:	61 e0       	ldi	r22, 0x01	; 1
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	0e 94 24 02 	call	0x448	; 0x448 <DIO_vidSetNibbleMode>
     616:	41 e0       	ldi	r20, 0x01	; 1
     618:	61 e0       	ldi	r22, 0x01	; 1
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_vidSetPinMode>
     620:	41 e0       	ldi	r20, 0x01	; 1
     622:	62 e0       	ldi	r22, 0x02	; 2
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_vidSetPinMode>
     62a:	41 e0       	ldi	r20, 0x01	; 1
     62c:	63 e0       	ldi	r22, 0x03	; 3
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_vidSetPinMode>
     634:	82 e0       	ldi	r24, 0x02	; 2
     636:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LCD_vidSendCmd>
     63a:	2f e7       	ldi	r18, 0x7F	; 127
     63c:	88 e3       	ldi	r24, 0x38	; 56
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	21 50       	subi	r18, 0x01	; 1
     642:	80 40       	sbci	r24, 0x00	; 0
     644:	90 40       	sbci	r25, 0x00	; 0
     646:	e1 f7       	brne	.-8      	; 0x640 <LCD_vidInit+0x46>
     648:	00 c0       	rjmp	.+0      	; 0x64a <LCD_vidInit+0x50>
     64a:	00 00       	nop
     64c:	88 e2       	ldi	r24, 0x28	; 40
     64e:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LCD_vidSendCmd>
     652:	8f e9       	ldi	r24, 0x9F	; 159
     654:	9f e0       	ldi	r25, 0x0F	; 15
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	f1 f7       	brne	.-4      	; 0x656 <LCD_vidInit+0x5c>
     65a:	00 c0       	rjmp	.+0      	; 0x65c <LCD_vidInit+0x62>
     65c:	00 00       	nop
     65e:	8c e0       	ldi	r24, 0x0C	; 12
     660:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LCD_vidSendCmd>
     664:	8f e9       	ldi	r24, 0x9F	; 159
     666:	9f e0       	ldi	r25, 0x0F	; 15
     668:	01 97       	sbiw	r24, 0x01	; 1
     66a:	f1 f7       	brne	.-4      	; 0x668 <LCD_vidInit+0x6e>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <LCD_vidInit+0x74>
     66e:	00 00       	nop
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LCD_vidSendCmd>
     676:	8f e9       	ldi	r24, 0x9F	; 159
     678:	9f e0       	ldi	r25, 0x0F	; 15
     67a:	01 97       	sbiw	r24, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <LCD_vidInit+0x80>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <LCD_vidInit+0x86>
     680:	00 00       	nop
     682:	80 e1       	ldi	r24, 0x10	; 16
     684:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LCD_vidSendCmd>
     688:	8f e9       	ldi	r24, 0x9F	; 159
     68a:	9f e0       	ldi	r25, 0x0F	; 15
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <LCD_vidInit+0x92>
     690:	00 c0       	rjmp	.+0      	; 0x692 <LCD_vidInit+0x98>
     692:	00 00       	nop
     694:	08 95       	ret

00000696 <LCD_vidSendChar>:
     696:	cf 93       	push	r28
     698:	c8 2f       	mov	r28, r24
     69a:	41 e0       	ldi	r20, 0x01	; 1
     69c:	61 e0       	ldi	r22, 0x01	; 1
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	0e 94 12 01 	call	0x224	; 0x224 <DIO_vidWritePin>
     6a4:	4c 2f       	mov	r20, r28
     6a6:	61 e0       	ldi	r22, 0x01	; 1
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	0e 94 6f 02 	call	0x4de	; 0x4de <DIO_vidWriteNibble>
     6ae:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_vidSendEnPulse>
     6b2:	4c 2f       	mov	r20, r28
     6b4:	42 95       	swap	r20
     6b6:	40 7f       	andi	r20, 0xF0	; 240
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	0e 94 6f 02 	call	0x4de	; 0x4de <DIO_vidWriteNibble>
     6c0:	63 e0       	ldi	r22, 0x03	; 3
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_vidSendEnPulse>
     6cc:	cf 91       	pop	r28
     6ce:	08 95       	ret

000006d0 <LCD_vidSendString>:
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	ec 01       	movw	r28, r24
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <LCD_vidSendString+0xe>
     6d8:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_vidSendChar>
     6dc:	21 96       	adiw	r28, 0x01	; 1
     6de:	88 81       	ld	r24, Y
     6e0:	81 11       	cpse	r24, r1
     6e2:	fa cf       	rjmp	.-12     	; 0x6d8 <LCD_vidSendString+0x8>
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <LCD_vidSendNumber>:
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	64 97       	sbiw	r28, 0x14	; 20
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
     702:	9f 93       	push	r25
     704:	8f 93       	push	r24
     706:	7f 93       	push	r23
     708:	6f 93       	push	r22
     70a:	85 e6       	ldi	r24, 0x65	; 101
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	8e 01       	movw	r16, r28
     714:	0f 5f       	subi	r16, 0xFF	; 255
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	1f 93       	push	r17
     71a:	0f 93       	push	r16
     71c:	0e 94 b9 10 	call	0x2172	; 0x2172 <sprintf>
     720:	c8 01       	movw	r24, r16
     722:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCD_vidSendString>
     726:	0f b6       	in	r0, 0x3f	; 63
     728:	f8 94       	cli
     72a:	de bf       	out	0x3e, r29	; 62
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	cd bf       	out	0x3d, r28	; 61
     730:	64 96       	adiw	r28, 0x14	; 20
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	de bf       	out	0x3e, r29	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	08 95       	ret

00000746 <LCD_vidMoveCursor>:
*/


void LCD_vidMoveCursor(u8 u8Line, u8 u8Position)
{
	if(u8Line < 1 || u8Line > 2 || u8Position < 1 ||u8Position > 16)
     746:	9f ef       	ldi	r25, 0xFF	; 255
     748:	98 0f       	add	r25, r24
     74a:	92 30       	cpi	r25, 0x02	; 2
     74c:	20 f4       	brcc	.+8      	; 0x756 <LCD_vidMoveCursor+0x10>
     74e:	66 23       	and	r22, r22
     750:	11 f0       	breq	.+4      	; 0x756 <LCD_vidMoveCursor+0x10>
     752:	61 31       	cpi	r22, 0x11	; 17
     754:	20 f0       	brcs	.+8      	; 0x75e <LCD_vidMoveCursor+0x18>
	{
        LCD_vidSendCmd(0x80);
     756:	80 e8       	ldi	r24, 0x80	; 128
     758:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LCD_vidSendCmd>
     75c:	0d c0       	rjmp	.+26     	; 0x778 <LCD_vidMoveCursor+0x32>
	}
	else if(u8Line == 1)
     75e:	81 30       	cpi	r24, 0x01	; 1
     760:	29 f4       	brne	.+10     	; 0x76c <LCD_vidMoveCursor+0x26>
	{
        LCD_vidSendCmd(0x80 +(u8Position - 1));
     762:	8f e7       	ldi	r24, 0x7F	; 127
     764:	86 0f       	add	r24, r22
     766:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LCD_vidSendCmd>
     76a:	06 c0       	rjmp	.+12     	; 0x778 <LCD_vidMoveCursor+0x32>
	}
	else if(u8Line == 2)
     76c:	82 30       	cpi	r24, 0x02	; 2
     76e:	21 f4       	brne	.+8      	; 0x778 <LCD_vidMoveCursor+0x32>
	{
        LCD_vidSendCmd(0xC0 +(u8Position - 1));
     770:	8f eb       	ldi	r24, 0xBF	; 191
     772:	86 0f       	add	r24, r22
     774:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LCD_vidSendCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     778:	8f ec       	ldi	r24, 0xCF	; 207
     77a:	97 e0       	ldi	r25, 0x07	; 7
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	f1 f7       	brne	.-4      	; 0x77c <LCD_vidMoveCursor+0x36>
     780:	00 c0       	rjmp	.+0      	; 0x782 <LCD_vidMoveCursor+0x3c>
     782:	00 00       	nop
     784:	08 95       	ret

00000786 <LED_vidInit>:
     786:	41 e0       	ldi	r20, 0x01	; 1
     788:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_vidSetPinMode>
     78c:	08 95       	ret

0000078e <LED_vidLedOn>:
     78e:	41 e0       	ldi	r20, 0x01	; 1
     790:	0e 94 12 01 	call	0x224	; 0x224 <DIO_vidWritePin>
     794:	08 95       	ret

00000796 <LED_vidLedOff>:
     796:	40 e0       	ldi	r20, 0x00	; 0
     798:	0e 94 12 01 	call	0x224	; 0x224 <DIO_vidWritePin>
     79c:	08 95       	ret

0000079e <LED_vidLedToggle>:
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	c8 2f       	mov	r28, r24
     7a4:	d6 2f       	mov	r29, r22
     7a6:	0e 94 82 01 	call	0x304	; 0x304 <DIO_enuReadPin>
     7aa:	81 30       	cpi	r24, 0x01	; 1
     7ac:	29 f4       	brne	.+10     	; 0x7b8 <LED_vidLedToggle+0x1a>
     7ae:	6d 2f       	mov	r22, r29
     7b0:	8c 2f       	mov	r24, r28
     7b2:	0e 94 cb 03 	call	0x796	; 0x796 <LED_vidLedOff>
     7b6:	04 c0       	rjmp	.+8      	; 0x7c0 <LED_vidLedToggle+0x22>
     7b8:	6d 2f       	mov	r22, r29
     7ba:	8c 2f       	mov	r24, r28
     7bc:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_vidLedOn>
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	08 95       	ret

000007c6 <LM35_vidInit>:
     7c6:	0e 94 6e 00 	call	0xdc	; 0xdc <ADC_vidInit>
     7ca:	08 95       	ret

000007cc <LM35_u8LM35Read>:
     7cc:	0e 94 93 00 	call	0x126	; 0x126 <ADC_u16Read>
     7d0:	bc 01       	movw	r22, r24
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__floatunsisf>
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	40 e2       	ldi	r20, 0x20	; 32
     7e0:	55 e4       	ldi	r21, 0x45	; 69
     7e2:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__mulsf3>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e2       	ldi	r20, 0x20	; 32
     7ec:	56 e4       	ldi	r21, 0x46	; 70
     7ee:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__divsf3>
     7f2:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__fixunssfsi>
     7f6:	86 2f       	mov	r24, r22
     7f8:	08 95       	ret

000007fa <VIEW_DATA>:
	}
}

void VIEW_DATA(void *pvData) 
{
	LCD_vidSendString("Temp: ");
     7fa:	8a e6       	ldi	r24, 0x6A	; 106
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCD_vidSendString>
	LCD_vidSendNumber(u16Degree);
     802:	60 91 09 08 	lds	r22, 0x0809	; 0x800809 <u16Degree>
     806:	70 91 0a 08 	lds	r23, 0x080A	; 0x80080a <u16Degree+0x1>
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_vidSendNumber>
	LCD_vidSendChar((char)223);
     812:	8f ed       	ldi	r24, 0xDF	; 223
     814:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_vidSendChar>
	LCD_vidSendChar('C');
     818:	83 e4       	ldi	r24, 0x43	; 67
     81a:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_vidSendChar>
	LCD_vidMoveCursor(2,1);
     81e:	61 e0       	ldi	r22, 0x01	; 1
     820:	82 e0       	ldi	r24, 0x02	; 2
     822:	0e 94 a3 03 	call	0x746	; 0x746 <LCD_vidMoveCursor>
	LCD_vidSendString("AC: ");
     826:	81 e7       	ldi	r24, 0x71	; 113
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCD_vidSendString>
	LCD_vidSendNumber(u8Speed);
     82e:	60 91 0c 08 	lds	r22, 0x080C	; 0x80080c <u8Speed>
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_vidSendNumber>
	while (1)
	{

		LCD_vidMoveCursor(1,7);
     83c:	67 e0       	ldi	r22, 0x07	; 7
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	0e 94 a3 03 	call	0x746	; 0x746 <LCD_vidMoveCursor>
		LCD_vidSendNumber(u16Degree);
     844:	60 91 09 08 	lds	r22, 0x0809	; 0x800809 <u16Degree>
     848:	70 91 0a 08 	lds	r23, 0x080A	; 0x80080a <u16Degree+0x1>
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_vidSendNumber>
		LCD_vidSendChar((char)223);
     854:	8f ed       	ldi	r24, 0xDF	; 223
     856:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_vidSendChar>
		LCD_vidSendChar('C');
     85a:	83 e4       	ldi	r24, 0x43	; 67
     85c:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_vidSendChar>
		if (u16Degree<10)
     860:	80 91 09 08 	lds	r24, 0x0809	; 0x800809 <u16Degree>
     864:	90 91 0a 08 	lds	r25, 0x080A	; 0x80080a <u16Degree+0x1>
     868:	0a 97       	sbiw	r24, 0x0a	; 10
     86a:	38 f4       	brcc	.+14     	; 0x87a <__stack+0x1b>
		{
			LCD_vidMoveCursor(1,10);
     86c:	6a e0       	ldi	r22, 0x0A	; 10
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	0e 94 a3 03 	call	0x746	; 0x746 <LCD_vidMoveCursor>
			LCD_vidSendChar(' ');
     874:	80 e2       	ldi	r24, 0x20	; 32
     876:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_vidSendChar>
		}
		LCD_vidMoveCursor(2,5);
     87a:	65 e0       	ldi	r22, 0x05	; 5
     87c:	82 e0       	ldi	r24, 0x02	; 2
     87e:	0e 94 a3 03 	call	0x746	; 0x746 <LCD_vidMoveCursor>
		LCD_vidSendNumber(u8Speed);
     882:	60 91 0c 08 	lds	r22, 0x080C	; 0x80080c <u8Speed>
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_vidSendNumber>
		if (u16Degree<100)
     890:	80 91 09 08 	lds	r24, 0x0809	; 0x800809 <u16Degree>
     894:	90 91 0a 08 	lds	r25, 0x080A	; 0x80080a <u16Degree+0x1>
     898:	84 36       	cpi	r24, 0x64	; 100
     89a:	91 05       	cpc	r25, r1
     89c:	20 f4       	brcc	.+8      	; 0x8a6 <__stack+0x47>
		{
			LCD_vidSendString("  ");
     89e:	86 e7       	ldi	r24, 0x76	; 118
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCD_vidSendString>
		}
		vTaskDelay(30);
     8a6:	8e e1       	ldi	r24, 0x1E	; 30
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <vTaskDelay>
	}
     8ae:	c6 cf       	rjmp	.-116    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>

000008b0 <CHECK_TEMP>:

void CHECK_TEMP(void *pvData)
{
	while (1)
	{
		u16Degree=LM35_u8LM35Read();
     8b0:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LM35_u8LM35Read>
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	90 93 0a 08 	sts	0x080A, r25	; 0x80080a <u16Degree+0x1>
     8ba:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <u16Degree>
		if(u16Degree >=28 ){
     8be:	8c 31       	cpi	r24, 0x1C	; 28
     8c0:	91 05       	cpc	r25, r1
     8c2:	a8 f0       	brcs	.+42     	; 0x8ee <CHECK_TEMP+0x3e>
			u8Speed=(((((u16Degree)-28)/2)+1)*10);
     8c4:	4c 97       	sbiw	r24, 0x1c	; 28
     8c6:	96 95       	lsr	r25
     8c8:	87 95       	ror	r24
     8ca:	01 96       	adiw	r24, 0x01	; 1
     8cc:	88 0f       	add	r24, r24
     8ce:	98 2f       	mov	r25, r24
     8d0:	99 0f       	add	r25, r25
     8d2:	99 0f       	add	r25, r25
     8d4:	89 0f       	add	r24, r25
     8d6:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <u8Speed>
			if (u8Speed>=100)
     8da:	84 36       	cpi	r24, 0x64	; 100
     8dc:	18 f0       	brcs	.+6      	; 0x8e4 <CHECK_TEMP+0x34>
			{
				u8Speed=100;
     8de:	84 e6       	ldi	r24, 0x64	; 100
     8e0:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <u8Speed>
			}
			Motor1_ClockWise(u8Speed);
     8e4:	80 91 0c 08 	lds	r24, 0x080C	; 0x80080c <u8Speed>
     8e8:	0e 94 4a 07 	call	0xe94	; 0xe94 <Motor1_ClockWise>
     8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <CHECK_TEMP+0x46>
		}else
		{
			u8Speed=0;
     8ee:	10 92 0c 08 	sts	0x080C, r1	; 0x80080c <u8Speed>
			Motor1_Stop();
     8f2:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <Motor1_Stop>
		}
		vTaskDelay(50);
     8f6:	82 e3       	ldi	r24, 0x32	; 50
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <vTaskDelay>
	}
     8fe:	d8 cf       	rjmp	.-80     	; 0x8b0 <CHECK_TEMP>

00000900 <login>:
void VIEW_DATA(void *pvData);
void CHECK_COMMAND(void *pvData);
void CHECK_TEMP(void *pvData);

xQueueHandle QueueCOMMAND ;
u8 login(){
     900:	af 92       	push	r10
     902:	bf 92       	push	r11
     904:	cf 92       	push	r12
     906:	df 92       	push	r13
     908:	ef 92       	push	r14
     90a:	ff 92       	push	r15
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	cd b7       	in	r28, 0x3d	; 61
     916:	de b7       	in	r29, 0x3e	; 62
     918:	28 97       	sbiw	r28, 0x08	; 8
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	de bf       	out	0x3e, r29	; 62
     920:	0f be       	out	0x3f, r0	; 63
     922:	cd bf       	out	0x3d, r28	; 61
	u8 id[4],pass[4],passed=1;
	USART_vidSendString("\r\nEnter Id :\r\n");
     924:	89 e7       	ldi	r24, 0x79	; 121
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <USART_vidSendString>
	for (u8 i=0;i<4;i++)
     92c:	10 e0       	ldi	r17, 0x00	; 0
     92e:	0c c0       	rjmp	.+24     	; 0x948 <login+0x48>
	{
		id[i]=USART_u8RecieveByte();
     930:	e1 2e       	mov	r14, r17
     932:	f1 2c       	mov	r15, r1
     934:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <USART_u8RecieveByte>
     938:	e1 e0       	ldi	r30, 0x01	; 1
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	ec 0f       	add	r30, r28
     93e:	fd 1f       	adc	r31, r29
     940:	ee 0d       	add	r30, r14
     942:	ff 1d       	adc	r31, r15
     944:	80 83       	st	Z, r24

xQueueHandle QueueCOMMAND ;
u8 login(){
	u8 id[4],pass[4],passed=1;
	USART_vidSendString("\r\nEnter Id :\r\n");
	for (u8 i=0;i<4;i++)
     946:	1f 5f       	subi	r17, 0xFF	; 255
     948:	14 30       	cpi	r17, 0x04	; 4
     94a:	90 f3       	brcs	.-28     	; 0x930 <login+0x30>
	{
		id[i]=USART_u8RecieveByte();
	}
	
	USART_vidSendString("\r\nEnter Password :\r\n");
     94c:	88 e8       	ldi	r24, 0x88	; 136
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <USART_vidSendString>
	
	for (u8 i=0;i<6;i++)
     954:	10 e0       	ldi	r17, 0x00	; 0
     956:	0c c0       	rjmp	.+24     	; 0x970 <login+0x70>
	{
		pass[i]=USART_u8RecieveByte();
     958:	e1 2e       	mov	r14, r17
     95a:	f1 2c       	mov	r15, r1
     95c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <USART_u8RecieveByte>
     960:	e5 e0       	ldi	r30, 0x05	; 5
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	ec 0f       	add	r30, r28
     966:	fd 1f       	adc	r31, r29
     968:	ee 0d       	add	r30, r14
     96a:	ff 1d       	adc	r31, r15
     96c:	80 83       	st	Z, r24
		id[i]=USART_u8RecieveByte();
	}
	
	USART_vidSendString("\r\nEnter Password :\r\n");
	
	for (u8 i=0;i<6;i++)
     96e:	1f 5f       	subi	r17, 0xFF	; 255
     970:	16 30       	cpi	r17, 0x06	; 6
     972:	90 f3       	brcs	.-28     	; 0x958 <login+0x58>
     974:	00 e0       	ldi	r16, 0x00	; 0
     976:	dd 24       	eor	r13, r13
     978:	d3 94       	inc	r13
     97a:	39 c0       	rjmp	.+114    	; 0x9ee <login+0xee>
		pass[i]=USART_u8RecieveByte();
	}
	
	for(u8 i=0;i<numOfUsers;i+=10)
	{
		if(EEPROM_u8Read(USERS_EEPROM_ADDRESS+i)==id[0])
     97c:	e0 2e       	mov	r14, r16
     97e:	f1 2c       	mov	r15, r1
     980:	57 01       	movw	r10, r14
     982:	8a e0       	ldi	r24, 0x0A	; 10
     984:	a8 0e       	add	r10, r24
     986:	b1 1c       	adc	r11, r1
     988:	c5 01       	movw	r24, r10
     98a:	0e 94 c7 02 	call	0x58e	; 0x58e <EEPROM_u8Read>
     98e:	99 81       	ldd	r25, Y+1	; 0x01
     990:	89 13       	cpse	r24, r25
     992:	2c c0       	rjmp	.+88     	; 0x9ec <login+0xec>
     994:	11 c0       	rjmp	.+34     	; 0x9b8 <login+0xb8>
		{
			for(u8 j=0;j<4;j++)
			{
				if(id[j]!=EEPROM_u8Read(USERS_EEPROM_ADDRESS+i+j))
     996:	81 2f       	mov	r24, r17
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	e1 e0       	ldi	r30, 0x01	; 1
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	ec 0f       	add	r30, r28
     9a0:	fd 1f       	adc	r31, r29
     9a2:	e8 0f       	add	r30, r24
     9a4:	f9 1f       	adc	r31, r25
     9a6:	c0 80       	ld	r12, Z
     9a8:	8a 0d       	add	r24, r10
     9aa:	9b 1d       	adc	r25, r11
     9ac:	0e 94 c7 02 	call	0x58e	; 0x58e <EEPROM_u8Read>
     9b0:	c8 12       	cpse	r12, r24
				{
					passed=0;
     9b2:	d1 2c       	mov	r13, r1
	
	for(u8 i=0;i<numOfUsers;i+=10)
	{
		if(EEPROM_u8Read(USERS_EEPROM_ADDRESS+i)==id[0])
		{
			for(u8 j=0;j<4;j++)
     9b4:	1f 5f       	subi	r17, 0xFF	; 255
     9b6:	01 c0       	rjmp	.+2      	; 0x9ba <login+0xba>
     9b8:	10 e0       	ldi	r17, 0x00	; 0
     9ba:	14 30       	cpi	r17, 0x04	; 4
     9bc:	60 f3       	brcs	.-40     	; 0x996 <login+0x96>
     9be:	10 e0       	ldi	r17, 0x00	; 0
     9c0:	13 c0       	rjmp	.+38     	; 0x9e8 <login+0xe8>
					passed=0;
				}
			}
			for(u8 j=0;j<6;j++)
			{
				if(pass[j]!=EEPROM_u8Read(USERS_EEPROM_ADDRESS+4+i+j))
     9c2:	81 2f       	mov	r24, r17
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	e5 e0       	ldi	r30, 0x05	; 5
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	ec 0f       	add	r30, r28
     9cc:	fd 1f       	adc	r31, r29
     9ce:	e8 0f       	add	r30, r24
     9d0:	f9 1f       	adc	r31, r25
     9d2:	b0 80       	ld	r11, Z
     9d4:	97 01       	movw	r18, r14
     9d6:	22 5f       	subi	r18, 0xF2	; 242
     9d8:	3f 4f       	sbci	r19, 0xFF	; 255
     9da:	82 0f       	add	r24, r18
     9dc:	93 1f       	adc	r25, r19
     9de:	0e 94 c7 02 	call	0x58e	; 0x58e <EEPROM_u8Read>
     9e2:	b8 12       	cpse	r11, r24
				{
					passed=0;
     9e4:	d1 2c       	mov	r13, r1
				if(id[j]!=EEPROM_u8Read(USERS_EEPROM_ADDRESS+i+j))
				{
					passed=0;
				}
			}
			for(u8 j=0;j<6;j++)
     9e6:	1f 5f       	subi	r17, 0xFF	; 255
     9e8:	16 30       	cpi	r17, 0x06	; 6
     9ea:	58 f3       	brcs	.-42     	; 0x9c2 <login+0xc2>
	for (u8 i=0;i<6;i++)
	{
		pass[i]=USART_u8RecieveByte();
	}
	
	for(u8 i=0;i<numOfUsers;i+=10)
     9ec:	06 5f       	subi	r16, 0xF6	; 246
     9ee:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
     9f2:	08 17       	cp	r16, r24
     9f4:	18 f2       	brcs	.-122    	; 0x97c <login+0x7c>
		}
		
	}

	return passed;
}
     9f6:	8d 2d       	mov	r24, r13
     9f8:	28 96       	adiw	r28, 0x08	; 8
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	f8 94       	cli
     9fe:	de bf       	out	0x3e, r29	; 62
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	cd bf       	out	0x3d, r28	; 61
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	cf 90       	pop	r12
     a14:	bf 90       	pop	r11
     a16:	af 90       	pop	r10
     a18:	08 95       	ret

00000a1a <System_Init>:
	vTaskStartScheduler();
}

void System_Init(void)
{
	LCD_vidInit();
     a1a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LCD_vidInit>
	LCD_vidMoveCursor(0,0);
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	0e 94 a3 03 	call	0x746	; 0x746 <LCD_vidMoveCursor>
	LM35_vidInit(ADC_CHANNEL0);
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LM35_vidInit>
	USART_vidInit(9600);
     a2c:	60 e8       	ldi	r22, 0x80	; 128
     a2e:	75 e2       	ldi	r23, 0x25	; 37
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <USART_vidInit>
	motorA_vidInit();
     a38:	0e 94 22 07 	call	0xe44	; 0xe44 <motorA_vidInit>
	motorB_vidInit();
     a3c:	0e 94 36 07 	call	0xe6c	; 0xe6c <motorB_vidInit>
	LED_vidInit(GPIOB,PIN0);
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	82 e0       	ldi	r24, 0x02	; 2
     a44:	0e 94 c3 03 	call	0x786	; 0x786 <LED_vidInit>
	LED_vidInit(GPIOB,PIN1);
     a48:	61 e0       	ldi	r22, 0x01	; 1
     a4a:	82 e0       	ldi	r24, 0x02	; 2
     a4c:	0e 94 c3 03 	call	0x786	; 0x786 <LED_vidInit>
	LED_vidInit(GPIOB,PIN2);
     a50:	62 e0       	ldi	r22, 0x02	; 2
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	0e 94 c3 03 	call	0x786	; 0x786 <LED_vidInit>
	LED_vidInit(GPIOD,PIN2);
     a58:	62 e0       	ldi	r22, 0x02	; 2
     a5a:	84 e0       	ldi	r24, 0x04	; 4
     a5c:	0e 94 c3 03 	call	0x786	; 0x786 <LED_vidInit>
	LED_vidInit(GPIOD,PIN3);
     a60:	63 e0       	ldi	r22, 0x03	; 3
     a62:	84 e0       	ldi	r24, 0x04	; 4
     a64:	0e 94 c3 03 	call	0x786	; 0x786 <LED_vidInit>
	LED_vidInit(GPIOD,PIN4);
     a68:	64 e0       	ldi	r22, 0x04	; 4
     a6a:	84 e0       	ldi	r24, 0x04	; 4
     a6c:	0e 94 c3 03 	call	0x786	; 0x786 <LED_vidInit>
     a70:	08 95       	ret

00000a72 <GenerateAdmin>:

}

void GenerateAdmin(){
     a72:	cf 93       	push	r28
	
	
	USART_vidSendString("\r\nEnter Admin Id :\r\n");
     a74:	8d e9       	ldi	r24, 0x9D	; 157
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <USART_vidSendString>
	for (u8 i=0;i<4;i++)
     a7c:	c0 e0       	ldi	r28, 0x00	; 0
     a7e:	0c c0       	rjmp	.+24     	; 0xa98 <GenerateAdmin+0x26>
	{
		idChar=USART_u8RecieveByte();
     a80:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <USART_u8RecieveByte>
     a84:	68 2f       	mov	r22, r24
     a86:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <idChar>
		EEPROM_vidWrite(ADMIN_EEPROM_ADDRESS +i,idChar);
     a8a:	8c 2f       	mov	r24, r28
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	8e 50       	subi	r24, 0x0E	; 14
     a90:	9c 4f       	sbci	r25, 0xFC	; 252
     a92:	0e 94 ba 02 	call	0x574	; 0x574 <EEPROM_vidWrite>

void GenerateAdmin(){
	
	
	USART_vidSendString("\r\nEnter Admin Id :\r\n");
	for (u8 i=0;i<4;i++)
     a96:	cf 5f       	subi	r28, 0xFF	; 255
     a98:	c4 30       	cpi	r28, 0x04	; 4
     a9a:	90 f3       	brcs	.-28     	; 0xa80 <GenerateAdmin+0xe>
	{
		idChar=USART_u8RecieveByte();
		EEPROM_vidWrite(ADMIN_EEPROM_ADDRESS +i,idChar);
	}
	
	USART_vidSendString("\r\nEnter Admin Password :\r\n");
     a9c:	82 eb       	ldi	r24, 0xB2	; 178
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <USART_vidSendString>
	for (u8 i=0;i<6;i++)
     aa4:	c0 e0       	ldi	r28, 0x00	; 0
     aa6:	0c c0       	rjmp	.+24     	; 0xac0 <GenerateAdmin+0x4e>
	{
		passwordChar=USART_u8RecieveByte();
     aa8:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <USART_u8RecieveByte>
     aac:	68 2f       	mov	r22, r24
     aae:	80 93 0b 08 	sts	0x080B, r24	; 0x80080b <passwordChar>
		EEPROM_vidWrite(ADMIN_EEPROM_ADDRESS +4+i,passwordChar);
     ab2:	8c 2f       	mov	r24, r28
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	8a 50       	subi	r24, 0x0A	; 10
     ab8:	9c 4f       	sbci	r25, 0xFC	; 252
     aba:	0e 94 ba 02 	call	0x574	; 0x574 <EEPROM_vidWrite>
		idChar=USART_u8RecieveByte();
		EEPROM_vidWrite(ADMIN_EEPROM_ADDRESS +i,idChar);
	}
	
	USART_vidSendString("\r\nEnter Admin Password :\r\n");
	for (u8 i=0;i<6;i++)
     abe:	cf 5f       	subi	r28, 0xFF	; 255
     ac0:	c6 30       	cpi	r28, 0x06	; 6
     ac2:	90 f3       	brcs	.-28     	; 0xaa8 <GenerateAdmin+0x36>
	{
		passwordChar=USART_u8RecieveByte();
		EEPROM_vidWrite(ADMIN_EEPROM_ADDRESS +4+i,passwordChar);
	}

	EEPROM_vidWrite(FIRST_TIME_RUNNING_EEPROM_ADDRESS,'Y');
     ac4:	69 e5       	ldi	r22, 0x59	; 89
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 ba 02 	call	0x574	; 0x574 <EEPROM_vidWrite>
}
     ace:	cf 91       	pop	r28
     ad0:	08 95       	ret

00000ad2 <main>:

	return passed;
}

int main(void)
{
     ad2:	af 92       	push	r10
     ad4:	bf 92       	push	r11
     ad6:	cf 92       	push	r12
     ad8:	df 92       	push	r13
     ada:	ef 92       	push	r14
     adc:	ff 92       	push	r15
     ade:	0f 93       	push	r16
	u8 firstTimeFlag,passed;
	
	System_Init();
     ae0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <System_Init>
	xTaskCreate(CHECK_COMMAND		,NULL,200,NULL,1,NULL);
     ae4:	a1 2c       	mov	r10, r1
     ae6:	b1 2c       	mov	r11, r1
     ae8:	c1 2c       	mov	r12, r1
     aea:	d1 2c       	mov	r13, r1
     aec:	e1 2c       	mov	r14, r1
     aee:	f1 2c       	mov	r15, r1
     af0:	01 e0       	ldi	r16, 0x01	; 1
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	48 ec       	ldi	r20, 0xC8	; 200
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	82 ee       	ldi	r24, 0xE2	; 226
     b00:	96 e0       	ldi	r25, 0x06	; 6
     b02:	0e 94 03 0b 	call	0x1606	; 0x1606 <xTaskGenericCreate>
	xTaskCreate(CHECK_TEMP			,NULL,200,NULL,2,NULL);
     b06:	02 e0       	ldi	r16, 0x02	; 2
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	48 ec       	ldi	r20, 0xC8	; 200
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	88 e5       	ldi	r24, 0x58	; 88
     b16:	94 e0       	ldi	r25, 0x04	; 4
     b18:	0e 94 03 0b 	call	0x1606	; 0x1606 <xTaskGenericCreate>
	xTaskCreate(VIEW_DATA			,NULL,200,NULL,3,NULL);
     b1c:	03 e0       	ldi	r16, 0x03	; 3
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	48 ec       	ldi	r20, 0xC8	; 200
     b24:	50 e0       	ldi	r21, 0x00	; 0
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	8d ef       	ldi	r24, 0xFD	; 253
     b2c:	93 e0       	ldi	r25, 0x03	; 3
     b2e:	0e 94 03 0b 	call	0x1606	; 0x1606 <xTaskGenericCreate>
	QueueCOMMAND = xQueueCreate(5,sizeof(u8));
     b32:	40 e0       	ldi	r20, 0x00	; 0
     b34:	61 e0       	ldi	r22, 0x01	; 1
     b36:	85 e0       	ldi	r24, 0x05	; 5
     b38:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <xQueueGenericCreate>
     b3c:	90 93 07 08 	sts	0x0807, r25	; 0x800807 <QueueCOMMAND+0x1>
     b40:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <QueueCOMMAND>
	
	LCD_vidSendString("Welcome Home :)");
     b44:	8d ec       	ldi	r24, 0xCD	; 205
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCD_vidSendString>
     b4c:	2f ef       	ldi	r18, 0xFF	; 255
     b4e:	84 e3       	ldi	r24, 0x34	; 52
     b50:	9c e0       	ldi	r25, 0x0C	; 12
     b52:	21 50       	subi	r18, 0x01	; 1
     b54:	80 40       	sbci	r24, 0x00	; 0
     b56:	90 40       	sbci	r25, 0x00	; 0
     b58:	e1 f7       	brne	.-8      	; 0xb52 <main+0x80>
     b5a:	00 c0       	rjmp	.+0      	; 0xb5c <main+0x8a>
     b5c:	00 00       	nop
	_delay_ms(500);
	LCD_vidSendCmd(LCD_CLEAR_SCREEN);
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LCD_vidSendCmd>
	
	
	firstTimeFlag=EEPROM_u8Read(FIRST_TIME_RUNNING_EEPROM_ADDRESS);
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 c7 02 	call	0x58e	; 0x58e <EEPROM_u8Read>
	
	if(firstTimeFlag !='Y'){
     b6c:	89 35       	cpi	r24, 0x59	; 89
     b6e:	d9 f0       	breq	.+54     	; 0xba6 <main+0xd4>
		EEPROM_vidWrite(NUMBER_OF_USERS_EEPROM,0);
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 ba 02 	call	0x574	; 0x574 <EEPROM_vidWrite>
		LCD_vidSendString("Registering ....");
     b7a:	8d ed       	ldi	r24, 0xDD	; 221
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCD_vidSendString>
		GenerateAdmin();
     b82:	0e 94 39 05 	call	0xa72	; 0xa72 <GenerateAdmin>
		LCD_vidSendCmd(LCD_CLEAR_SCREEN);
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LCD_vidSendCmd>
		LCD_vidSendString("Registering Done");
     b8c:	8e ee       	ldi	r24, 0xEE	; 238
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCD_vidSendString>
     b94:	2f ef       	ldi	r18, 0xFF	; 255
     b96:	84 e3       	ldi	r24, 0x34	; 52
     b98:	9c e0       	ldi	r25, 0x0C	; 12
     b9a:	21 50       	subi	r18, 0x01	; 1
     b9c:	80 40       	sbci	r24, 0x00	; 0
     b9e:	90 40       	sbci	r25, 0x00	; 0
     ba0:	e1 f7       	brne	.-8      	; 0xb9a <main+0xc8>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <main+0xd2>
     ba4:	00 00       	nop
		_delay_ms(500);
		
	}
	numOfUsers=EEPROM_u8Read(NUMBER_OF_USERS_EEPROM);
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 c7 02 	call	0x58e	; 0x58e <EEPROM_u8Read>
     bae:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__data_end>
	LCD_vidSendCmd(LCD_CLEAR_SCREEN);
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LCD_vidSendCmd>
	
	LCD_vidSendString("Logging ....");
     bb8:	8f ef       	ldi	r24, 0xFF	; 255
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCD_vidSendString>
	
	do{
		passed=login();
     bc0:	0e 94 80 04 	call	0x900	; 0x900 <login>
	}while(passed==0);
     bc4:	88 23       	and	r24, r24
     bc6:	e1 f3       	breq	.-8      	; 0xbc0 <main+0xee>
	
	vTaskStartScheduler();
     bc8:	0e 94 bb 0b 	call	0x1776	; 0x1776 <vTaskStartScheduler>
}
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0f 91       	pop	r16
     bd2:	ff 90       	pop	r15
     bd4:	ef 90       	pop	r14
     bd6:	df 90       	pop	r13
     bd8:	cf 90       	pop	r12
     bda:	bf 90       	pop	r11
     bdc:	af 90       	pop	r10
     bde:	08 95       	ret

00000be0 <GenerateUser>:
// 	}
// 	return place;
// }


void GenerateUser(){
     be0:	cf 93       	push	r28
	
	u8 idChar,passwordChar;
	
	USART_vidSendString("\r\nEnter User Id :\r\n");
     be2:	8c e0       	ldi	r24, 0x0C	; 12
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <USART_vidSendString>
	for (u8 i=0;i<4;i++)
     bea:	c0 e0       	ldi	r28, 0x00	; 0
     bec:	0a c0       	rjmp	.+20     	; 0xc02 <GenerateUser+0x22>
	{
		idChar=USART_u8RecieveByte();
     bee:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <USART_u8RecieveByte>
		EEPROM_vidWrite(USERS_EEPROM_ADDRESS+ NUMBER_OF_USERS_EEPROM +i,idChar);
     bf2:	2c 2f       	mov	r18, r28
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	68 2f       	mov	r22, r24
     bf8:	c9 01       	movw	r24, r18
     bfa:	0b 96       	adiw	r24, 0x0b	; 11
     bfc:	0e 94 ba 02 	call	0x574	; 0x574 <EEPROM_vidWrite>
void GenerateUser(){
	
	u8 idChar,passwordChar;
	
	USART_vidSendString("\r\nEnter User Id :\r\n");
	for (u8 i=0;i<4;i++)
     c00:	cf 5f       	subi	r28, 0xFF	; 255
     c02:	c4 30       	cpi	r28, 0x04	; 4
     c04:	a0 f3       	brcs	.-24     	; 0xbee <GenerateUser+0xe>
	{
		idChar=USART_u8RecieveByte();
		EEPROM_vidWrite(USERS_EEPROM_ADDRESS+ NUMBER_OF_USERS_EEPROM +i,idChar);
	}
	
	USART_vidSendString("\r\nEnter User Password :\r\n");
     c06:	80 e2       	ldi	r24, 0x20	; 32
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <USART_vidSendString>
	for (u8 i=0;i<6;i++)
     c0e:	c0 e0       	ldi	r28, 0x00	; 0
     c10:	0a c0       	rjmp	.+20     	; 0xc26 <GenerateUser+0x46>
	{
		passwordChar=USART_u8RecieveByte();
     c12:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <USART_u8RecieveByte>
		EEPROM_vidWrite(USERS_EEPROM_ADDRESS+ NUMBER_OF_USERS_EEPROM +4+i,passwordChar);
     c16:	2c 2f       	mov	r18, r28
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	68 2f       	mov	r22, r24
     c1c:	c9 01       	movw	r24, r18
     c1e:	0f 96       	adiw	r24, 0x0f	; 15
     c20:	0e 94 ba 02 	call	0x574	; 0x574 <EEPROM_vidWrite>
		idChar=USART_u8RecieveByte();
		EEPROM_vidWrite(USERS_EEPROM_ADDRESS+ NUMBER_OF_USERS_EEPROM +i,idChar);
	}
	
	USART_vidSendString("\r\nEnter User Password :\r\n");
	for (u8 i=0;i<6;i++)
     c24:	cf 5f       	subi	r28, 0xFF	; 255
     c26:	c6 30       	cpi	r28, 0x06	; 6
     c28:	a0 f3       	brcs	.-24     	; 0xc12 <GenerateUser+0x32>
	{
		passwordChar=USART_u8RecieveByte();
		EEPROM_vidWrite(USERS_EEPROM_ADDRESS+ NUMBER_OF_USERS_EEPROM +4+i,passwordChar);
	}
	EEPROM_vidWrite(NUMBER_OF_USERS_EEPROM,numOfUsers+1);
     c2a:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <__data_end>
     c2e:	6f 5f       	subi	r22, 0xFF	; 255
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 ba 02 	call	0x574	; 0x574 <EEPROM_vidWrite>
	USART_vidSendString("\r\nThank You :)");
     c38:	8a e3       	ldi	r24, 0x3A	; 58
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <USART_vidSendString>
}
     c40:	cf 91       	pop	r28
     c42:	08 95       	ret

00000c44 <DeleteUser>:


void DeleteUser(){
     c44:	df 92       	push	r13
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	28 97       	sbiw	r28, 0x08	; 8
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61
	
	u8 idC[4],idChar[4],exist=1;
	USART_vidSendString("\r\nEnter User Id :\r\n");
     c62:	8c e0       	ldi	r24, 0x0C	; 12
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <USART_vidSendString>
	for (u8 i=0;i<4;i++)
     c6a:	10 e0       	ldi	r17, 0x00	; 0
     c6c:	0c c0       	rjmp	.+24     	; 0xc86 <DeleteUser+0x42>
	{
		idChar[i]=USART_u8RecieveByte();
     c6e:	e1 2e       	mov	r14, r17
     c70:	f1 2c       	mov	r15, r1
     c72:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <USART_u8RecieveByte>
     c76:	e5 e0       	ldi	r30, 0x05	; 5
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	ec 0f       	add	r30, r28
     c7c:	fd 1f       	adc	r31, r29
     c7e:	ee 0d       	add	r30, r14
     c80:	ff 1d       	adc	r31, r15
     c82:	80 83       	st	Z, r24

void DeleteUser(){
	
	u8 idC[4],idChar[4],exist=1;
	USART_vidSendString("\r\nEnter User Id :\r\n");
	for (u8 i=0;i<4;i++)
     c84:	1f 5f       	subi	r17, 0xFF	; 255
     c86:	14 30       	cpi	r17, 0x04	; 4
     c88:	90 f3       	brcs	.-28     	; 0xc6e <DeleteUser+0x2a>
     c8a:	e1 2c       	mov	r14, r1
     c8c:	dd 24       	eor	r13, r13
     c8e:	d3 94       	inc	r13
     c90:	44 c0       	rjmp	.+136    	; 0xd1a <DeleteUser+0xd6>
	}
	
	for(u8 i=0;i<numOfUsers;i++){
		
		for(u8 g=0;g<4;g++){
			idC[g]=EEPROM_u8Read(USERS_EEPROM_ADDRESS + i + g);
     c92:	8e 2d       	mov	r24, r14
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0a 96       	adiw	r24, 0x0a	; 10
     c98:	0f 2d       	mov	r16, r15
     c9a:	10 e0       	ldi	r17, 0x00	; 0
     c9c:	80 0f       	add	r24, r16
     c9e:	91 1f       	adc	r25, r17
     ca0:	0e 94 c7 02 	call	0x58e	; 0x58e <EEPROM_u8Read>
     ca4:	e1 e0       	ldi	r30, 0x01	; 1
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	ec 0f       	add	r30, r28
     caa:	fd 1f       	adc	r31, r29
     cac:	e0 0f       	add	r30, r16
     cae:	f1 1f       	adc	r31, r17
     cb0:	80 83       	st	Z, r24
		idChar[i]=USART_u8RecieveByte();
	}
	
	for(u8 i=0;i<numOfUsers;i++){
		
		for(u8 g=0;g<4;g++){
     cb2:	f3 94       	inc	r15
     cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <DeleteUser+0x74>
     cb6:	f1 2c       	mov	r15, r1
     cb8:	83 e0       	ldi	r24, 0x03	; 3
     cba:	8f 15       	cp	r24, r15
     cbc:	50 f7       	brcc	.-44     	; 0xc92 <DeleteUser+0x4e>
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	13 c0       	rjmp	.+38     	; 0xce8 <DeleteUser+0xa4>
			idC[g]=EEPROM_u8Read(USERS_EEPROM_ADDRESS + i + g);
		}
		for(u8 j=0;j<4;j++){
			if (idC[j]!=idChar[j])
     cc2:	82 2f       	mov	r24, r18
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	e1 e0       	ldi	r30, 0x01	; 1
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	ec 0f       	add	r30, r28
     ccc:	fd 1f       	adc	r31, r29
     cce:	e8 0f       	add	r30, r24
     cd0:	f9 1f       	adc	r31, r25
     cd2:	30 81       	ld	r19, Z
     cd4:	e5 e0       	ldi	r30, 0x05	; 5
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	ec 0f       	add	r30, r28
     cda:	fd 1f       	adc	r31, r29
     cdc:	e8 0f       	add	r30, r24
     cde:	f9 1f       	adc	r31, r25
     ce0:	80 81       	ld	r24, Z
     ce2:	38 13       	cpse	r19, r24
			{
				exist=0;
     ce4:	d1 2c       	mov	r13, r1
	for(u8 i=0;i<numOfUsers;i++){
		
		for(u8 g=0;g<4;g++){
			idC[g]=EEPROM_u8Read(USERS_EEPROM_ADDRESS + i + g);
		}
		for(u8 j=0;j<4;j++){
     ce6:	2f 5f       	subi	r18, 0xFF	; 255
     ce8:	24 30       	cpi	r18, 0x04	; 4
     cea:	58 f3       	brcs	.-42     	; 0xcc2 <DeleteUser+0x7e>
			if (idC[j]!=idChar[j])
			{
				exist=0;
			}
		}
		if(exist==1){
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	d8 12       	cpse	r13, r24
     cf0:	13 c0       	rjmp	.+38     	; 0xd18 <DeleteUser+0xd4>
     cf2:	0a c0       	rjmp	.+20     	; 0xd08 <DeleteUser+0xc4>
			for(u8 j=0;j<10;j++){
				EEPROM_vidWrite(USERS_EEPROM_ADDRESS+i+j,'A');
     cf4:	8e 2d       	mov	r24, r14
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0a 96       	adiw	r24, 0x0a	; 10
     cfa:	61 e4       	ldi	r22, 0x41	; 65
     cfc:	81 0f       	add	r24, r17
     cfe:	91 1d       	adc	r25, r1
     d00:	0e 94 ba 02 	call	0x574	; 0x574 <EEPROM_vidWrite>
			{
				exist=0;
			}
		}
		if(exist==1){
			for(u8 j=0;j<10;j++){
     d04:	1f 5f       	subi	r17, 0xFF	; 255
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <DeleteUser+0xc6>
     d08:	10 e0       	ldi	r17, 0x00	; 0
     d0a:	1a 30       	cpi	r17, 0x0A	; 10
     d0c:	98 f3       	brcs	.-26     	; 0xcf4 <DeleteUser+0xb0>
				EEPROM_vidWrite(USERS_EEPROM_ADDRESS+i+j,'A');
			}
			USART_vidSendString("User Has Been Deleted !\r\n");
     d0e:	89 e4       	ldi	r24, 0x49	; 73
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <USART_vidSendString>
			break;
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <DeleteUser+0xde>
	for (u8 i=0;i<4;i++)
	{
		idChar[i]=USART_u8RecieveByte();
	}
	
	for(u8 i=0;i<numOfUsers;i++){
     d18:	e3 94       	inc	r14
     d1a:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
     d1e:	e8 16       	cp	r14, r24
     d20:	50 f2       	brcs	.-108    	; 0xcb6 <DeleteUser+0x72>
			USART_vidSendString("User Has Been Deleted !\r\n");
			break;
		}
	}
	
	EEPROM_vidWrite(NUMBER_OF_USERS_EEPROM,numOfUsers-1);
     d22:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <__data_end>
     d26:	61 50       	subi	r22, 0x01	; 1
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 ba 02 	call	0x574	; 0x574 <EEPROM_vidWrite>
	USART_vidSendString("\r\nThank You :)");
     d30:	8a e3       	ldi	r24, 0x3A	; 58
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <USART_vidSendString>
}
     d38:	28 96       	adiw	r28, 0x08	; 8
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	ff 90       	pop	r15
     d4e:	ef 90       	pop	r14
     d50:	df 90       	pop	r13
     d52:	08 95       	ret

00000d54 <ResetAdminPassword>:

void ResetAdminPassword(){
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
	u8 recievedResetCode[4];
	u8 flag=0,passwordChar;
	USART_vidSendString("\r\nEnter Reset Code :\r\n");
     d58:	83 e6       	ldi	r24, 0x63	; 99
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <USART_vidSendString>
	for (u8 i=0;i<4;i++)
     d60:	c0 e0       	ldi	r28, 0x00	; 0
	USART_vidSendString("\r\nThank You :)");
}

void ResetAdminPassword(){
	u8 recievedResetCode[4];
	u8 flag=0,passwordChar;
     d62:	d0 e0       	ldi	r29, 0x00	; 0
	USART_vidSendString("\r\nEnter Reset Code :\r\n");
	for (u8 i=0;i<4;i++)
     d64:	0c c0       	rjmp	.+24     	; 0xd7e <ResetAdminPassword+0x2a>
	{
		recievedResetCode[i]=USART_u8RecieveByte();
     d66:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <USART_u8RecieveByte>
		
		if(recievedResetCode[i] != resetCode[i])
     d6a:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     d6e:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     d72:	ec 0f       	add	r30, r28
     d74:	f1 1d       	adc	r31, r1
     d76:	90 81       	ld	r25, Z
     d78:	89 13       	cpse	r24, r25
		{
			flag=1;
     d7a:	d1 e0       	ldi	r29, 0x01	; 1

void ResetAdminPassword(){
	u8 recievedResetCode[4];
	u8 flag=0,passwordChar;
	USART_vidSendString("\r\nEnter Reset Code :\r\n");
	for (u8 i=0;i<4;i++)
     d7c:	cf 5f       	subi	r28, 0xFF	; 255
     d7e:	c4 30       	cpi	r28, 0x04	; 4
     d80:	90 f3       	brcs	.-28     	; 0xd66 <ResetAdminPassword+0x12>
		if(recievedResetCode[i] != resetCode[i])
		{
			flag=1;
		}
	}
	if(flag != 1)
     d82:	d1 30       	cpi	r29, 0x01	; 1
     d84:	c1 f0       	breq	.+48     	; 0xdb6 <ResetAdminPassword+0x62>
	{
		USART_vidSendString("\r\nEnter New Password :\r\n");
     d86:	8a e7       	ldi	r24, 0x7A	; 122
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <USART_vidSendString>
		for (u8 i=0;i<6;i++)
     d8e:	c0 e0       	ldi	r28, 0x00	; 0
     d90:	0b c0       	rjmp	.+22     	; 0xda8 <ResetAdminPassword+0x54>
		{
			passwordChar=USART_u8RecieveByte();
     d92:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <USART_u8RecieveByte>
			EEPROM_vidWrite(ADMIN_EEPROM_ADDRESS + 4 + i,passwordChar);
     d96:	2c 2f       	mov	r18, r28
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	68 2f       	mov	r22, r24
     d9c:	c9 01       	movw	r24, r18
     d9e:	8a 50       	subi	r24, 0x0A	; 10
     da0:	9c 4f       	sbci	r25, 0xFC	; 252
     da2:	0e 94 ba 02 	call	0x574	; 0x574 <EEPROM_vidWrite>
		}
	}
	if(flag != 1)
	{
		USART_vidSendString("\r\nEnter New Password :\r\n");
		for (u8 i=0;i<6;i++)
     da6:	cf 5f       	subi	r28, 0xFF	; 255
     da8:	c6 30       	cpi	r28, 0x06	; 6
     daa:	98 f3       	brcs	.-26     	; 0xd92 <ResetAdminPassword+0x3e>
		{
			passwordChar=USART_u8RecieveByte();
			EEPROM_vidWrite(ADMIN_EEPROM_ADDRESS + 4 + i,passwordChar);
		}
		
		USART_vidSendString("\r\nThank You :)\r\n");
     dac:	83 e9       	ldi	r24, 0x93	; 147
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <USART_vidSendString>
     db4:	04 c0       	rjmp	.+8      	; 0xdbe <ResetAdminPassword+0x6a>
		
	}else
	{
		USART_vidSendString("\r\nYour Reset Code is Wrong \r\n");
     db6:	84 ea       	ldi	r24, 0xA4	; 164
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <USART_vidSendString>
	}
	
}
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	08 95       	ret

00000dc4 <CHECK_COMMAND>:
void CHECK_COMMAND(void *pvData)
{
	u8 RECIEVED_COMMAND;
	while (1)
	{
		RECIEVED_COMMAND=USART_u8RecieveByte();
     dc4:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <USART_u8RecieveByte>
     dc8:	e8 2f       	mov	r30, r24
		if (RECIEVED_COMMAND != NO_CHANGE)
     dca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <NO_CHANGE>
     dce:	e8 17       	cp	r30, r24
     dd0:	c9 f3       	breq	.-14     	; 0xdc4 <CHECK_COMMAND>
		{
			switch (RECIEVED_COMMAND) {
     dd2:	8e 2f       	mov	r24, r30
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	fc 01       	movw	r30, r24
     dd8:	f1 97       	sbiw	r30, 0x31	; 49
     dda:	e5 32       	cpi	r30, 0x25	; 37
     ddc:	f1 05       	cpc	r31, r1
     dde:	90 f7       	brcc	.-28     	; 0xdc4 <CHECK_COMMAND>
     de0:	e6 5d       	subi	r30, 0xD6	; 214
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__tablejump2__>
				case 'U' :
					GenerateUser();
     de8:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <GenerateUser>
					break;
     dec:	eb cf       	rjmp	.-42     	; 0xdc4 <CHECK_COMMAND>
				case 'D' :
					DeleteUser();
     dee:	0e 94 22 06 	call	0xc44	; 0xc44 <DeleteUser>
					break;
     df2:	e8 cf       	rjmp	.-48     	; 0xdc4 <CHECK_COMMAND>
				case 'R' :
					ResetAdminPassword();
     df4:	0e 94 aa 06 	call	0xd54	; 0xd54 <ResetAdminPassword>
					break;
     df8:	e5 cf       	rjmp	.-54     	; 0xdc4 <CHECK_COMMAND>
				case '1' :
					LED_vidLedToggle(GPIOB,PIN0);
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_vidLedToggle>
					break;
     e02:	e0 cf       	rjmp	.-64     	; 0xdc4 <CHECK_COMMAND>
				case '2' :
					LED_vidLedToggle(GPIOB,PIN1);
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	82 e0       	ldi	r24, 0x02	; 2
     e08:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_vidLedToggle>
					break;
     e0c:	db cf       	rjmp	.-74     	; 0xdc4 <CHECK_COMMAND>
				case '3' :
					LED_vidLedToggle(GPIOB,PIN2);
     e0e:	62 e0       	ldi	r22, 0x02	; 2
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_vidLedToggle>
					break;
     e16:	d6 cf       	rjmp	.-84     	; 0xdc4 <CHECK_COMMAND>
				case '4' :
					LED_vidLedToggle(GPIOD,PIN2);
     e18:	62 e0       	ldi	r22, 0x02	; 2
     e1a:	84 e0       	ldi	r24, 0x04	; 4
     e1c:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_vidLedToggle>
					break;
     e20:	d1 cf       	rjmp	.-94     	; 0xdc4 <CHECK_COMMAND>
				case '5' :
					LED_vidLedToggle(GPIOD,PIN3);
     e22:	63 e0       	ldi	r22, 0x03	; 3
     e24:	84 e0       	ldi	r24, 0x04	; 4
     e26:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_vidLedToggle>
					break;
     e2a:	cc cf       	rjmp	.-104    	; 0xdc4 <CHECK_COMMAND>
				case '6' :
					LED_vidLedToggle(GPIOD,PIN4);
     e2c:	64 e0       	ldi	r22, 0x04	; 4
     e2e:	84 e0       	ldi	r24, 0x04	; 4
     e30:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_vidLedToggle>
					break;
     e34:	c7 cf       	rjmp	.-114    	; 0xdc4 <CHECK_COMMAND>
				case 'O' :
					Motor2_ClockWise(50);
     e36:	82 e3       	ldi	r24, 0x32	; 50
     e38:	0e 94 66 07 	call	0xecc	; 0xecc <Motor2_ClockWise>
					break;
     e3c:	c3 cf       	rjmp	.-122    	; 0xdc4 <CHECK_COMMAND>
				case 'C' :
					Motor2_Stop();
     e3e:	0e 94 77 07 	call	0xeee	; 0xeee <Motor2_Stop>
					break;
     e42:	c0 cf       	rjmp	.-128    	; 0xdc4 <CHECK_COMMAND>

00000e44 <motorA_vidInit>:
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	67 e0       	ldi	r22, 0x07	; 7
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_vidSetPinMode>
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	66 e0       	ldi	r22, 0x06	; 6
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_vidSetPinMode>
     e58:	41 e0       	ldi	r20, 0x01	; 1
     e5a:	63 e0       	ldi	r22, 0x03	; 3
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_vidSetPinMode>
     e62:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <PWM2_vidInit>
     e66:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <PWM2_vidStart>
     e6a:	08 95       	ret

00000e6c <motorB_vidInit>:
     e6c:	41 e0       	ldi	r20, 0x01	; 1
     e6e:	67 e0       	ldi	r22, 0x07	; 7
     e70:	84 e0       	ldi	r24, 0x04	; 4
     e72:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_vidSetPinMode>
     e76:	41 e0       	ldi	r20, 0x01	; 1
     e78:	65 e0       	ldi	r22, 0x05	; 5
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_vidSetPinMode>
     e80:	41 e0       	ldi	r20, 0x01	; 1
     e82:	64 e0       	ldi	r22, 0x04	; 4
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_vidSetPinMode>
     e8a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <PWM0_vidInit>
     e8e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <PWM0_vidStart>
     e92:	08 95       	ret

00000e94 <Motor1_ClockWise>:
     e94:	cf 93       	push	r28
     e96:	c8 2f       	mov	r28, r24
     e98:	41 e0       	ldi	r20, 0x01	; 1
     e9a:	67 e0       	ldi	r22, 0x07	; 7
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	0e 94 12 01 	call	0x224	; 0x224 <DIO_vidWritePin>
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	66 e0       	ldi	r22, 0x06	; 6
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	0e 94 12 01 	call	0x224	; 0x224 <DIO_vidWritePin>
     eac:	8c 2f       	mov	r24, r28
     eae:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <PWM0_vidGenerate>
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <Motor1_Stop>:
     eb6:	41 e0       	ldi	r20, 0x01	; 1
     eb8:	67 e0       	ldi	r22, 0x07	; 7
     eba:	82 e0       	ldi	r24, 0x02	; 2
     ebc:	0e 94 12 01 	call	0x224	; 0x224 <DIO_vidWritePin>
     ec0:	41 e0       	ldi	r20, 0x01	; 1
     ec2:	66 e0       	ldi	r22, 0x06	; 6
     ec4:	82 e0       	ldi	r24, 0x02	; 2
     ec6:	0e 94 12 01 	call	0x224	; 0x224 <DIO_vidWritePin>
     eca:	08 95       	ret

00000ecc <Motor2_ClockWise>:
     ecc:	cf 93       	push	r28
     ece:	c8 2f       	mov	r28, r24
     ed0:	41 e0       	ldi	r20, 0x01	; 1
     ed2:	65 e0       	ldi	r22, 0x05	; 5
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	0e 94 12 01 	call	0x224	; 0x224 <DIO_vidWritePin>
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	64 e0       	ldi	r22, 0x04	; 4
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	0e 94 12 01 	call	0x224	; 0x224 <DIO_vidWritePin>
     ee4:	8c 2f       	mov	r24, r28
     ee6:	0e 94 55 0e 	call	0x1caa	; 0x1caa <PWM2_vidGenerate>
     eea:	cf 91       	pop	r28
     eec:	08 95       	ret

00000eee <Motor2_Stop>:
     eee:	41 e0       	ldi	r20, 0x01	; 1
     ef0:	65 e0       	ldi	r22, 0x05	; 5
     ef2:	82 e0       	ldi	r24, 0x02	; 2
     ef4:	0e 94 12 01 	call	0x224	; 0x224 <DIO_vidWritePin>
     ef8:	41 e0       	ldi	r20, 0x01	; 1
     efa:	64 e0       	ldi	r22, 0x04	; 4
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	0e 94 12 01 	call	0x224	; 0x224 <DIO_vidWritePin>
     f02:	08 95       	ret

00000f04 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     f0a:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     f0e:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <pucAlignedHeap.1980>
     f12:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <pucAlignedHeap.1980+0x1>
     f16:	89 2b       	or	r24, r25
     f18:	31 f4       	brne	.+12     	; 0xf26 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     f1a:	82 ed       	ldi	r24, 0xD2	; 210
     f1c:	91 e0       	ldi	r25, 0x01	; 1
     f1e:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <pucAlignedHeap.1980+0x1>
     f22:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <pucAlignedHeap.1980>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     f26:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <xNextFreeByte>
     f2a:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <xNextFreeByte+0x1>
     f2e:	c9 01       	movw	r24, r18
     f30:	8c 0f       	add	r24, r28
     f32:	9d 1f       	adc	r25, r29
     f34:	8b 3d       	cpi	r24, 0xDB	; 219
     f36:	45 e0       	ldi	r20, 0x05	; 5
     f38:	94 07       	cpc	r25, r20
     f3a:	70 f4       	brcc	.+28     	; 0xf58 <pvPortMalloc+0x54>
     f3c:	28 17       	cp	r18, r24
     f3e:	39 07       	cpc	r19, r25
     f40:	70 f4       	brcc	.+28     	; 0xf5e <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     f42:	c0 91 cd 01 	lds	r28, 0x01CD	; 0x8001cd <pucAlignedHeap.1980>
     f46:	d0 91 ce 01 	lds	r29, 0x01CE	; 0x8001ce <pucAlignedHeap.1980+0x1>
     f4a:	c2 0f       	add	r28, r18
     f4c:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
     f4e:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <xNextFreeByte+0x1>
     f52:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <xNextFreeByte>
     f56:	05 c0       	rjmp	.+10     	; 0xf62 <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     f58:	c0 e0       	ldi	r28, 0x00	; 0
     f5a:	d0 e0       	ldi	r29, 0x00	; 0
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <pvPortMalloc+0x5e>
     f5e:	c0 e0       	ldi	r28, 0x00	; 0
     f60:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     f62:	0e 94 a8 0c 	call	0x1950	; 0x1950 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     f66:	ce 01       	movw	r24, r28
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	08 95       	ret

00000f6e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     f6e:	08 95       	ret

00000f70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     f70:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f72:	03 96       	adiw	r24, 0x03	; 3
     f74:	92 83       	std	Z+2, r25	; 0x02
     f76:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     f78:	2f ef       	ldi	r18, 0xFF	; 255
     f7a:	3f ef       	ldi	r19, 0xFF	; 255
     f7c:	34 83       	std	Z+4, r19	; 0x04
     f7e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f80:	96 83       	std	Z+6, r25	; 0x06
     f82:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f84:	90 87       	std	Z+8, r25	; 0x08
     f86:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     f88:	10 82       	st	Z, r1
     f8a:	08 95       	ret

00000f8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     f8c:	fc 01       	movw	r30, r24
     f8e:	11 86       	std	Z+9, r1	; 0x09
     f90:	10 86       	std	Z+8, r1	; 0x08
     f92:	08 95       	ret

00000f94 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	9c 01       	movw	r18, r24
     f9a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     f9c:	dc 01       	movw	r26, r24
     f9e:	11 96       	adiw	r26, 0x01	; 1
     fa0:	cd 91       	ld	r28, X+
     fa2:	dc 91       	ld	r29, X
     fa4:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     fa6:	d3 83       	std	Z+3, r29	; 0x03
     fa8:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	9d 81       	ldd	r25, Y+5	; 0x05
     fae:	95 83       	std	Z+5, r25	; 0x05
     fb0:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     fb2:	8c 81       	ldd	r24, Y+4	; 0x04
     fb4:	9d 81       	ldd	r25, Y+5	; 0x05
     fb6:	dc 01       	movw	r26, r24
     fb8:	13 96       	adiw	r26, 0x03	; 3
     fba:	7c 93       	st	X, r23
     fbc:	6e 93       	st	-X, r22
     fbe:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     fc0:	7d 83       	std	Y+5, r23	; 0x05
     fc2:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     fc4:	31 87       	std	Z+9, r19	; 0x09
     fc6:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     fc8:	f9 01       	movw	r30, r18
     fca:	80 81       	ld	r24, Z
     fcc:	8f 5f       	subi	r24, 0xFF	; 255
     fce:	80 83       	st	Z, r24
}
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     fdc:	48 81       	ld	r20, Y
     fde:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     fe0:	4f 3f       	cpi	r20, 0xFF	; 255
     fe2:	2f ef       	ldi	r18, 0xFF	; 255
     fe4:	52 07       	cpc	r21, r18
     fe6:	21 f4       	brne	.+8      	; 0xff0 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     fe8:	fc 01       	movw	r30, r24
     fea:	a7 81       	ldd	r26, Z+7	; 0x07
     fec:	b0 85       	ldd	r27, Z+8	; 0x08
     fee:	0d c0       	rjmp	.+26     	; 0x100a <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ff0:	dc 01       	movw	r26, r24
     ff2:	13 96       	adiw	r26, 0x03	; 3
     ff4:	01 c0       	rjmp	.+2      	; 0xff8 <vListInsert+0x22>
     ff6:	df 01       	movw	r26, r30
     ff8:	12 96       	adiw	r26, 0x02	; 2
     ffa:	ed 91       	ld	r30, X+
     ffc:	fc 91       	ld	r31, X
     ffe:	13 97       	sbiw	r26, 0x03	; 3
    1000:	20 81       	ld	r18, Z
    1002:	31 81       	ldd	r19, Z+1	; 0x01
    1004:	42 17       	cp	r20, r18
    1006:	53 07       	cpc	r21, r19
    1008:	b0 f7       	brcc	.-20     	; 0xff6 <vListInsert+0x20>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    100a:	12 96       	adiw	r26, 0x02	; 2
    100c:	ed 91       	ld	r30, X+
    100e:	fc 91       	ld	r31, X
    1010:	13 97       	sbiw	r26, 0x03	; 3
    1012:	fb 83       	std	Y+3, r31	; 0x03
    1014:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1016:	d5 83       	std	Z+5, r29	; 0x05
    1018:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    101a:	bd 83       	std	Y+5, r27	; 0x05
    101c:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    101e:	13 96       	adiw	r26, 0x03	; 3
    1020:	dc 93       	st	X, r29
    1022:	ce 93       	st	-X, r28
    1024:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1026:	99 87       	std	Y+9, r25	; 0x09
    1028:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    102a:	fc 01       	movw	r30, r24
    102c:	20 81       	ld	r18, Z
    102e:	2f 5f       	subi	r18, 0xFF	; 255
    1030:	20 83       	st	Z, r18
}
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	08 95       	ret

00001038 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    103e:	a0 85       	ldd	r26, Z+8	; 0x08
    1040:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1042:	c2 81       	ldd	r28, Z+2	; 0x02
    1044:	d3 81       	ldd	r29, Z+3	; 0x03
    1046:	84 81       	ldd	r24, Z+4	; 0x04
    1048:	95 81       	ldd	r25, Z+5	; 0x05
    104a:	9d 83       	std	Y+5, r25	; 0x05
    104c:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    104e:	c4 81       	ldd	r28, Z+4	; 0x04
    1050:	d5 81       	ldd	r29, Z+5	; 0x05
    1052:	82 81       	ldd	r24, Z+2	; 0x02
    1054:	93 81       	ldd	r25, Z+3	; 0x03
    1056:	9b 83       	std	Y+3, r25	; 0x03
    1058:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    105a:	11 96       	adiw	r26, 0x01	; 1
    105c:	8d 91       	ld	r24, X+
    105e:	9c 91       	ld	r25, X
    1060:	12 97       	sbiw	r26, 0x02	; 2
    1062:	e8 17       	cp	r30, r24
    1064:	f9 07       	cpc	r31, r25
    1066:	31 f4       	brne	.+12     	; 0x1074 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1068:	84 81       	ldd	r24, Z+4	; 0x04
    106a:	95 81       	ldd	r25, Z+5	; 0x05
    106c:	12 96       	adiw	r26, 0x02	; 2
    106e:	9c 93       	st	X, r25
    1070:	8e 93       	st	-X, r24
    1072:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1074:	11 86       	std	Z+9, r1	; 0x09
    1076:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1078:	8c 91       	ld	r24, X
    107a:	81 50       	subi	r24, 0x01	; 1
    107c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	08 95       	ret

00001084 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1084:	1b bc       	out	0x2b, r1	; 43
    1086:	8c e7       	ldi	r24, 0x7C	; 124
    1088:	8a bd       	out	0x2a, r24	; 42
    108a:	8b e0       	ldi	r24, 0x0B	; 11
    108c:	8e bd       	out	0x2e, r24	; 46
    108e:	89 b7       	in	r24, 0x39	; 57
    1090:	80 61       	ori	r24, 0x10	; 16
    1092:	89 bf       	out	0x39, r24	; 57
    1094:	08 95       	ret

00001096 <pxPortInitialiseStack>:
    1096:	31 e1       	ldi	r19, 0x11	; 17
    1098:	fc 01       	movw	r30, r24
    109a:	30 83       	st	Z, r19
    109c:	31 97       	sbiw	r30, 0x01	; 1
    109e:	22 e2       	ldi	r18, 0x22	; 34
    10a0:	20 83       	st	Z, r18
    10a2:	31 97       	sbiw	r30, 0x01	; 1
    10a4:	a3 e3       	ldi	r26, 0x33	; 51
    10a6:	a0 83       	st	Z, r26
    10a8:	31 97       	sbiw	r30, 0x01	; 1
    10aa:	60 83       	st	Z, r22
    10ac:	31 97       	sbiw	r30, 0x01	; 1
    10ae:	70 83       	st	Z, r23
    10b0:	31 97       	sbiw	r30, 0x01	; 1
    10b2:	10 82       	st	Z, r1
    10b4:	31 97       	sbiw	r30, 0x01	; 1
    10b6:	60 e8       	ldi	r22, 0x80	; 128
    10b8:	60 83       	st	Z, r22
    10ba:	31 97       	sbiw	r30, 0x01	; 1
    10bc:	10 82       	st	Z, r1
    10be:	31 97       	sbiw	r30, 0x01	; 1
    10c0:	62 e0       	ldi	r22, 0x02	; 2
    10c2:	60 83       	st	Z, r22
    10c4:	31 97       	sbiw	r30, 0x01	; 1
    10c6:	63 e0       	ldi	r22, 0x03	; 3
    10c8:	60 83       	st	Z, r22
    10ca:	31 97       	sbiw	r30, 0x01	; 1
    10cc:	64 e0       	ldi	r22, 0x04	; 4
    10ce:	60 83       	st	Z, r22
    10d0:	31 97       	sbiw	r30, 0x01	; 1
    10d2:	65 e0       	ldi	r22, 0x05	; 5
    10d4:	60 83       	st	Z, r22
    10d6:	31 97       	sbiw	r30, 0x01	; 1
    10d8:	66 e0       	ldi	r22, 0x06	; 6
    10da:	60 83       	st	Z, r22
    10dc:	31 97       	sbiw	r30, 0x01	; 1
    10de:	67 e0       	ldi	r22, 0x07	; 7
    10e0:	60 83       	st	Z, r22
    10e2:	31 97       	sbiw	r30, 0x01	; 1
    10e4:	68 e0       	ldi	r22, 0x08	; 8
    10e6:	60 83       	st	Z, r22
    10e8:	31 97       	sbiw	r30, 0x01	; 1
    10ea:	69 e0       	ldi	r22, 0x09	; 9
    10ec:	60 83       	st	Z, r22
    10ee:	31 97       	sbiw	r30, 0x01	; 1
    10f0:	60 e1       	ldi	r22, 0x10	; 16
    10f2:	60 83       	st	Z, r22
    10f4:	31 97       	sbiw	r30, 0x01	; 1
    10f6:	30 83       	st	Z, r19
    10f8:	31 97       	sbiw	r30, 0x01	; 1
    10fa:	32 e1       	ldi	r19, 0x12	; 18
    10fc:	30 83       	st	Z, r19
    10fe:	31 97       	sbiw	r30, 0x01	; 1
    1100:	33 e1       	ldi	r19, 0x13	; 19
    1102:	30 83       	st	Z, r19
    1104:	31 97       	sbiw	r30, 0x01	; 1
    1106:	34 e1       	ldi	r19, 0x14	; 20
    1108:	30 83       	st	Z, r19
    110a:	31 97       	sbiw	r30, 0x01	; 1
    110c:	35 e1       	ldi	r19, 0x15	; 21
    110e:	30 83       	st	Z, r19
    1110:	31 97       	sbiw	r30, 0x01	; 1
    1112:	36 e1       	ldi	r19, 0x16	; 22
    1114:	30 83       	st	Z, r19
    1116:	31 97       	sbiw	r30, 0x01	; 1
    1118:	37 e1       	ldi	r19, 0x17	; 23
    111a:	30 83       	st	Z, r19
    111c:	31 97       	sbiw	r30, 0x01	; 1
    111e:	38 e1       	ldi	r19, 0x18	; 24
    1120:	30 83       	st	Z, r19
    1122:	31 97       	sbiw	r30, 0x01	; 1
    1124:	39 e1       	ldi	r19, 0x19	; 25
    1126:	30 83       	st	Z, r19
    1128:	31 97       	sbiw	r30, 0x01	; 1
    112a:	30 e2       	ldi	r19, 0x20	; 32
    112c:	30 83       	st	Z, r19
    112e:	31 97       	sbiw	r30, 0x01	; 1
    1130:	31 e2       	ldi	r19, 0x21	; 33
    1132:	30 83       	st	Z, r19
    1134:	31 97       	sbiw	r30, 0x01	; 1
    1136:	20 83       	st	Z, r18
    1138:	31 97       	sbiw	r30, 0x01	; 1
    113a:	23 e2       	ldi	r18, 0x23	; 35
    113c:	20 83       	st	Z, r18
    113e:	31 97       	sbiw	r30, 0x01	; 1
    1140:	40 83       	st	Z, r20
    1142:	31 97       	sbiw	r30, 0x01	; 1
    1144:	50 83       	st	Z, r21
    1146:	31 97       	sbiw	r30, 0x01	; 1
    1148:	26 e2       	ldi	r18, 0x26	; 38
    114a:	20 83       	st	Z, r18
    114c:	31 97       	sbiw	r30, 0x01	; 1
    114e:	27 e2       	ldi	r18, 0x27	; 39
    1150:	20 83       	st	Z, r18
    1152:	31 97       	sbiw	r30, 0x01	; 1
    1154:	28 e2       	ldi	r18, 0x28	; 40
    1156:	20 83       	st	Z, r18
    1158:	31 97       	sbiw	r30, 0x01	; 1
    115a:	29 e2       	ldi	r18, 0x29	; 41
    115c:	20 83       	st	Z, r18
    115e:	31 97       	sbiw	r30, 0x01	; 1
    1160:	20 e3       	ldi	r18, 0x30	; 48
    1162:	20 83       	st	Z, r18
    1164:	31 97       	sbiw	r30, 0x01	; 1
    1166:	21 e3       	ldi	r18, 0x31	; 49
    1168:	20 83       	st	Z, r18
    116a:	86 97       	sbiw	r24, 0x26	; 38
    116c:	08 95       	ret

0000116e <xPortStartScheduler>:
    116e:	0e 94 42 08 	call	0x1084	; 0x1084 <prvSetupTimerInterrupt>
    1172:	a0 91 04 08 	lds	r26, 0x0804	; 0x800804 <pxCurrentTCB>
    1176:	b0 91 05 08 	lds	r27, 0x0805	; 0x800805 <pxCurrentTCB+0x1>
    117a:	cd 91       	ld	r28, X+
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	dd 91       	ld	r29, X+
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	ff 91       	pop	r31
    1184:	ef 91       	pop	r30
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	bf 91       	pop	r27
    118c:	af 91       	pop	r26
    118e:	9f 91       	pop	r25
    1190:	8f 91       	pop	r24
    1192:	7f 91       	pop	r23
    1194:	6f 91       	pop	r22
    1196:	5f 91       	pop	r21
    1198:	4f 91       	pop	r20
    119a:	3f 91       	pop	r19
    119c:	2f 91       	pop	r18
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	ef 90       	pop	r14
    11a6:	df 90       	pop	r13
    11a8:	cf 90       	pop	r12
    11aa:	bf 90       	pop	r11
    11ac:	af 90       	pop	r10
    11ae:	9f 90       	pop	r9
    11b0:	8f 90       	pop	r8
    11b2:	7f 90       	pop	r7
    11b4:	6f 90       	pop	r6
    11b6:	5f 90       	pop	r5
    11b8:	4f 90       	pop	r4
    11ba:	3f 90       	pop	r3
    11bc:	2f 90       	pop	r2
    11be:	1f 90       	pop	r1
    11c0:	0f 90       	pop	r0
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	0f 90       	pop	r0
    11c6:	08 95       	ret
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	08 95       	ret

000011cc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    11cc:	0f 92       	push	r0
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	0f 92       	push	r0
    11d4:	1f 92       	push	r1
    11d6:	11 24       	eor	r1, r1
    11d8:	2f 92       	push	r2
    11da:	3f 92       	push	r3
    11dc:	4f 92       	push	r4
    11de:	5f 92       	push	r5
    11e0:	6f 92       	push	r6
    11e2:	7f 92       	push	r7
    11e4:	8f 92       	push	r8
    11e6:	9f 92       	push	r9
    11e8:	af 92       	push	r10
    11ea:	bf 92       	push	r11
    11ec:	cf 92       	push	r12
    11ee:	df 92       	push	r13
    11f0:	ef 92       	push	r14
    11f2:	ff 92       	push	r15
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	2f 93       	push	r18
    11fa:	3f 93       	push	r19
    11fc:	4f 93       	push	r20
    11fe:	5f 93       	push	r21
    1200:	6f 93       	push	r22
    1202:	7f 93       	push	r23
    1204:	8f 93       	push	r24
    1206:	9f 93       	push	r25
    1208:	af 93       	push	r26
    120a:	bf 93       	push	r27
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	ef 93       	push	r30
    1212:	ff 93       	push	r31
    1214:	a0 91 04 08 	lds	r26, 0x0804	; 0x800804 <pxCurrentTCB>
    1218:	b0 91 05 08 	lds	r27, 0x0805	; 0x800805 <pxCurrentTCB+0x1>
    121c:	0d b6       	in	r0, 0x3d	; 61
    121e:	0d 92       	st	X+, r0
    1220:	0e b6       	in	r0, 0x3e	; 62
    1222:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1224:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1228:	a0 91 04 08 	lds	r26, 0x0804	; 0x800804 <pxCurrentTCB>
    122c:	b0 91 05 08 	lds	r27, 0x0805	; 0x800805 <pxCurrentTCB+0x1>
    1230:	cd 91       	ld	r28, X+
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	dd 91       	ld	r29, X+
    1236:	de bf       	out	0x3e, r29	; 62
    1238:	ff 91       	pop	r31
    123a:	ef 91       	pop	r30
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	bf 91       	pop	r27
    1242:	af 91       	pop	r26
    1244:	9f 91       	pop	r25
    1246:	8f 91       	pop	r24
    1248:	7f 91       	pop	r23
    124a:	6f 91       	pop	r22
    124c:	5f 91       	pop	r21
    124e:	4f 91       	pop	r20
    1250:	3f 91       	pop	r19
    1252:	2f 91       	pop	r18
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	ff 90       	pop	r15
    125a:	ef 90       	pop	r14
    125c:	df 90       	pop	r13
    125e:	cf 90       	pop	r12
    1260:	bf 90       	pop	r11
    1262:	af 90       	pop	r10
    1264:	9f 90       	pop	r9
    1266:	8f 90       	pop	r8
    1268:	7f 90       	pop	r7
    126a:	6f 90       	pop	r6
    126c:	5f 90       	pop	r5
    126e:	4f 90       	pop	r4
    1270:	3f 90       	pop	r3
    1272:	2f 90       	pop	r2
    1274:	1f 90       	pop	r1
    1276:	0f 90       	pop	r0
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	0f 90       	pop	r0

	asm volatile ( "ret" );
    127c:	08 95       	ret

0000127e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    127e:	0f 92       	push	r0
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	0f 92       	push	r0
    1286:	1f 92       	push	r1
    1288:	11 24       	eor	r1, r1
    128a:	2f 92       	push	r2
    128c:	3f 92       	push	r3
    128e:	4f 92       	push	r4
    1290:	5f 92       	push	r5
    1292:	6f 92       	push	r6
    1294:	7f 92       	push	r7
    1296:	8f 92       	push	r8
    1298:	9f 92       	push	r9
    129a:	af 92       	push	r10
    129c:	bf 92       	push	r11
    129e:	cf 92       	push	r12
    12a0:	df 92       	push	r13
    12a2:	ef 92       	push	r14
    12a4:	ff 92       	push	r15
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	2f 93       	push	r18
    12ac:	3f 93       	push	r19
    12ae:	4f 93       	push	r20
    12b0:	5f 93       	push	r21
    12b2:	6f 93       	push	r22
    12b4:	7f 93       	push	r23
    12b6:	8f 93       	push	r24
    12b8:	9f 93       	push	r25
    12ba:	af 93       	push	r26
    12bc:	bf 93       	push	r27
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	ef 93       	push	r30
    12c4:	ff 93       	push	r31
    12c6:	a0 91 04 08 	lds	r26, 0x0804	; 0x800804 <pxCurrentTCB>
    12ca:	b0 91 05 08 	lds	r27, 0x0805	; 0x800805 <pxCurrentTCB+0x1>
    12ce:	0d b6       	in	r0, 0x3d	; 61
    12d0:	0d 92       	st	X+, r0
    12d2:	0e b6       	in	r0, 0x3e	; 62
    12d4:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    12d6:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskIncrementTick>
    12da:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    12dc:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    12e0:	a0 91 04 08 	lds	r26, 0x0804	; 0x800804 <pxCurrentTCB>
    12e4:	b0 91 05 08 	lds	r27, 0x0805	; 0x800805 <pxCurrentTCB+0x1>
    12e8:	cd 91       	ld	r28, X+
    12ea:	cd bf       	out	0x3d, r28	; 61
    12ec:	dd 91       	ld	r29, X+
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	ff 91       	pop	r31
    12f2:	ef 91       	pop	r30
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	bf 91       	pop	r27
    12fa:	af 91       	pop	r26
    12fc:	9f 91       	pop	r25
    12fe:	8f 91       	pop	r24
    1300:	7f 91       	pop	r23
    1302:	6f 91       	pop	r22
    1304:	5f 91       	pop	r21
    1306:	4f 91       	pop	r20
    1308:	3f 91       	pop	r19
    130a:	2f 91       	pop	r18
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	ff 90       	pop	r15
    1312:	ef 90       	pop	r14
    1314:	df 90       	pop	r13
    1316:	cf 90       	pop	r12
    1318:	bf 90       	pop	r11
    131a:	af 90       	pop	r10
    131c:	9f 90       	pop	r9
    131e:	8f 90       	pop	r8
    1320:	7f 90       	pop	r7
    1322:	6f 90       	pop	r6
    1324:	5f 90       	pop	r5
    1326:	4f 90       	pop	r4
    1328:	3f 90       	pop	r3
    132a:	2f 90       	pop	r2
    132c:	1f 90       	pop	r1
    132e:	0f 90       	pop	r0
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1334:	08 95       	ret

00001336 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    1336:	0e 94 3f 09 	call	0x127e	; 0x127e <vPortYieldFromTick>
		asm volatile ( "reti" );
    133a:	18 95       	reti

0000133c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	ec 01       	movw	r28, r24
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1348:	e8 81       	ld	r30, Y
    134a:	f9 81       	ldd	r31, Y+1	; 0x01
    134c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	82 9f       	mul	r24, r18
    1356:	a0 01       	movw	r20, r0
    1358:	83 9f       	mul	r24, r19
    135a:	50 0d       	add	r21, r0
    135c:	92 9f       	mul	r25, r18
    135e:	50 0d       	add	r21, r0
    1360:	11 24       	eor	r1, r1
    1362:	4e 0f       	add	r20, r30
    1364:	5f 1f       	adc	r21, r31
    1366:	5b 83       	std	Y+3, r21	; 0x03
    1368:	4a 83       	std	Y+2, r20	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    136a:	1a 8e       	std	Y+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    136c:	fd 83       	std	Y+5, r31	; 0x05
    136e:	ec 83       	std	Y+4, r30	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	28 9f       	mul	r18, r24
    1374:	a0 01       	movw	r20, r0
    1376:	29 9f       	mul	r18, r25
    1378:	50 0d       	add	r21, r0
    137a:	38 9f       	mul	r19, r24
    137c:	50 0d       	add	r21, r0
    137e:	11 24       	eor	r1, r1
    1380:	cf 01       	movw	r24, r30
    1382:	84 0f       	add	r24, r20
    1384:	95 1f       	adc	r25, r21
    1386:	9f 83       	std	Y+7, r25	; 0x07
    1388:	8e 83       	std	Y+6, r24	; 0x06
		pxQueue->xRxLock = queueUNLOCKED;
    138a:	8f ef       	ldi	r24, 0xFF	; 255
    138c:	8d 8f       	std	Y+29, r24	; 0x1d
		pxQueue->xTxLock = queueUNLOCKED;
    138e:	8e 8f       	std	Y+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    1390:	61 11       	cpse	r22, r1
    1392:	0c c0       	rjmp	.+24     	; 0x13ac <xQueueGenericReset+0x70>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1394:	88 85       	ldd	r24, Y+8	; 0x08
    1396:	88 23       	and	r24, r24
    1398:	89 f0       	breq	.+34     	; 0x13bc <xQueueGenericReset+0x80>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    139a:	ce 01       	movw	r24, r28
    139c:	08 96       	adiw	r24, 0x08	; 8
    139e:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <xTaskRemoveFromEventList>
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	59 f4       	brne	.+22     	; 0x13bc <xQueueGenericReset+0x80>
				{
					queueYIELD_IF_USING_PREEMPTION();
    13a6:	0e 94 e6 08 	call	0x11cc	; 0x11cc <vPortYield>
    13aa:	08 c0       	rjmp	.+16     	; 0x13bc <xQueueGenericReset+0x80>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    13ac:	ce 01       	movw	r24, r28
    13ae:	08 96       	adiw	r24, 0x08	; 8
    13b0:	0e 94 b8 07 	call	0xf70	; 0xf70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    13b4:	ce 01       	movw	r24, r28
    13b6:	41 96       	adiw	r24, 0x11	; 17
    13b8:	0e 94 b8 07 	call	0xf70	; 0xf70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    13bc:	0f 90       	pop	r0
    13be:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	08 95       	ret

000013c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    13d0:	88 23       	and	r24, r24
    13d2:	01 f1       	breq	.+64     	; 0x1414 <xQueueGenericCreate+0x4c>
    13d4:	06 2f       	mov	r16, r22
    13d6:	18 2f       	mov	r17, r24
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    13d8:	8f e1       	ldi	r24, 0x1F	; 31
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 82 07 	call	0xf04	; 0xf04 <pvPortMalloc>
    13e0:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
    13e2:	89 2b       	or	r24, r25
    13e4:	c9 f0       	breq	.+50     	; 0x1418 <xQueueGenericCreate+0x50>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    13e6:	10 9f       	mul	r17, r16
    13e8:	c0 01       	movw	r24, r0
    13ea:	11 24       	eor	r1, r1

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	0e 94 82 07 	call	0xf04	; 0xf04 <pvPortMalloc>
    13f2:	99 83       	std	Y+1, r25	; 0x01
    13f4:	88 83       	st	Y, r24
			if( pxNewQueue->pcHead != NULL )
    13f6:	89 2b       	or	r24, r25
    13f8:	39 f0       	breq	.+14     	; 0x1408 <xQueueGenericCreate+0x40>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    13fa:	1b 8f       	std	Y+27, r17	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    13fc:	0c 8f       	std	Y+28, r16	; 0x1c
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    13fe:	61 e0       	ldi	r22, 0x01	; 1
    1400:	ce 01       	movw	r24, r28
    1402:	0e 94 9e 09 	call	0x133c	; 0x133c <xQueueGenericReset>
    1406:	08 c0       	rjmp	.+16     	; 0x1418 <xQueueGenericCreate+0x50>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    1408:	ce 01       	movw	r24, r28
    140a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <vPortFree>

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
    140e:	c0 e0       	ldi	r28, 0x00	; 0
    1410:	d0 e0       	ldi	r29, 0x00	; 0
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <xQueueGenericCreate+0x50>
    1414:	c0 e0       	ldi	r28, 0x00	; 0
    1416:	d0 e0       	ldi	r29, 0x00	; 0
	}

	configASSERT( xReturn );

	return xReturn;
}
    1418:	ce 01       	movw	r24, r28
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	1f 91       	pop	r17
    1420:	0f 91       	pop	r16
    1422:	08 95       	ret

00001424 <prvResetNextTaskUnblockTime>:
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    1424:	e0 91 cc 07 	lds	r30, 0x07CC	; 0x8007cc <pxDelayedTaskList>
    1428:	f0 91 cd 07 	lds	r31, 0x07CD	; 0x8007cd <pxDelayedTaskList+0x1>
    142c:	80 81       	ld	r24, Z
    142e:	81 11       	cpse	r24, r1
    1430:	07 c0       	rjmp	.+14     	; 0x1440 <prvResetNextTaskUnblockTime+0x1c>
    1432:	8f ef       	ldi	r24, 0xFF	; 255
    1434:	9f ef       	ldi	r25, 0xFF	; 255
    1436:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <xNextTaskUnblockTime+0x1>
    143a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <xNextTaskUnblockTime>
    143e:	08 95       	ret
    1440:	e0 91 cc 07 	lds	r30, 0x07CC	; 0x8007cc <pxDelayedTaskList>
    1444:	f0 91 cd 07 	lds	r31, 0x07CD	; 0x8007cd <pxDelayedTaskList+0x1>
    1448:	05 80       	ldd	r0, Z+5	; 0x05
    144a:	f6 81       	ldd	r31, Z+6	; 0x06
    144c:	e0 2d       	mov	r30, r0
    144e:	06 80       	ldd	r0, Z+6	; 0x06
    1450:	f7 81       	ldd	r31, Z+7	; 0x07
    1452:	e0 2d       	mov	r30, r0
    1454:	82 81       	ldd	r24, Z+2	; 0x02
    1456:	93 81       	ldd	r25, Z+3	; 0x03
    1458:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <xNextTaskUnblockTime+0x1>
    145c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <xNextTaskUnblockTime>
    1460:	08 95       	ret

00001462 <prvAllocateTCBAndStack>:
    1462:	ef 92       	push	r14
    1464:	ff 92       	push	r15
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	7c 01       	movw	r14, r24
    1470:	eb 01       	movw	r28, r22
    1472:	8d e2       	ldi	r24, 0x2D	; 45
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	0e 94 82 07 	call	0xf04	; 0xf04 <pvPortMalloc>
    147a:	8c 01       	movw	r16, r24
    147c:	89 2b       	or	r24, r25
    147e:	89 f0       	breq	.+34     	; 0x14a2 <prvAllocateTCBAndStack+0x40>
    1480:	20 97       	sbiw	r28, 0x00	; 0
    1482:	21 f4       	brne	.+8      	; 0x148c <prvAllocateTCBAndStack+0x2a>
    1484:	c7 01       	movw	r24, r14
    1486:	0e 94 82 07 	call	0xf04	; 0xf04 <pvPortMalloc>
    148a:	01 c0       	rjmp	.+2      	; 0x148e <prvAllocateTCBAndStack+0x2c>
    148c:	ce 01       	movw	r24, r28
    148e:	f8 01       	movw	r30, r16
    1490:	90 8f       	std	Z+24, r25	; 0x18
    1492:	87 8b       	std	Z+23, r24	; 0x17
    1494:	89 2b       	or	r24, r25
    1496:	29 f4       	brne	.+10     	; 0x14a2 <prvAllocateTCBAndStack+0x40>
    1498:	c8 01       	movw	r24, r16
    149a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <vPortFree>
    149e:	00 e0       	ldi	r16, 0x00	; 0
    14a0:	10 e0       	ldi	r17, 0x00	; 0
    14a2:	c8 01       	movw	r24, r16
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	ff 90       	pop	r15
    14ae:	ef 90       	pop	r14
    14b0:	08 95       	ret

000014b2 <prvDeleteTCB>:
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	ec 01       	movw	r28, r24
    14b8:	8f 89       	ldd	r24, Y+23	; 0x17
    14ba:	98 8d       	ldd	r25, Y+24	; 0x18
    14bc:	0e 94 b7 07 	call	0xf6e	; 0xf6e <vPortFree>
    14c0:	ce 01       	movw	r24, r28
    14c2:	0e 94 b7 07 	call	0xf6e	; 0xf6e <vPortFree>
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	08 95       	ret

000014cc <prvInitialiseTCBVariables>:
    14cc:	1f 93       	push	r17
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	ec 01       	movw	r28, r24
    14d4:	14 2f       	mov	r17, r20
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	0f c0       	rjmp	.+30     	; 0x14f8 <prvInitialiseTCBVariables+0x2c>
    14da:	82 2f       	mov	r24, r18
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	fb 01       	movw	r30, r22
    14e0:	e8 0f       	add	r30, r24
    14e2:	f9 1f       	adc	r31, r25
    14e4:	30 81       	ld	r19, Z
    14e6:	de 01       	movw	r26, r28
    14e8:	a8 0f       	add	r26, r24
    14ea:	b9 1f       	adc	r27, r25
    14ec:	59 96       	adiw	r26, 0x19	; 25
    14ee:	3c 93       	st	X, r19
    14f0:	80 81       	ld	r24, Z
    14f2:	88 23       	and	r24, r24
    14f4:	19 f0       	breq	.+6      	; 0x14fc <prvInitialiseTCBVariables+0x30>
    14f6:	2f 5f       	subi	r18, 0xFF	; 255
    14f8:	24 31       	cpi	r18, 0x14	; 20
    14fa:	78 f3       	brcs	.-34     	; 0x14da <prvInitialiseTCBVariables+0xe>
    14fc:	1c a6       	std	Y+44, r1	; 0x2c
    14fe:	14 30       	cpi	r17, 0x04	; 4
    1500:	08 f0       	brcs	.+2      	; 0x1504 <prvInitialiseTCBVariables+0x38>
    1502:	13 e0       	ldi	r17, 0x03	; 3
    1504:	1e 8b       	std	Y+22, r17	; 0x16
    1506:	ce 01       	movw	r24, r28
    1508:	02 96       	adiw	r24, 0x02	; 2
    150a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <vListInitialiseItem>
    150e:	ce 01       	movw	r24, r28
    1510:	0c 96       	adiw	r24, 0x0c	; 12
    1512:	0e 94 c6 07 	call	0xf8c	; 0xf8c <vListInitialiseItem>
    1516:	d9 87       	std	Y+9, r29	; 0x09
    1518:	c8 87       	std	Y+8, r28	; 0x08
    151a:	84 e0       	ldi	r24, 0x04	; 4
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	81 1b       	sub	r24, r17
    1520:	91 09       	sbc	r25, r1
    1522:	9d 87       	std	Y+13, r25	; 0x0d
    1524:	8c 87       	std	Y+12, r24	; 0x0c
    1526:	db 8b       	std	Y+19, r29	; 0x13
    1528:	ca 8b       	std	Y+18, r28	; 0x12
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	08 95       	ret

00001532 <prvInitialiseTaskLists>:
    1532:	cf 93       	push	r28
    1534:	c0 e0       	ldi	r28, 0x00	; 0
    1536:	10 c0       	rjmp	.+32     	; 0x1558 <prvInitialiseTaskLists+0x26>
    1538:	8c 2f       	mov	r24, r28
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	9c 01       	movw	r18, r24
    153e:	22 0f       	add	r18, r18
    1540:	33 1f       	adc	r19, r19
    1542:	22 0f       	add	r18, r18
    1544:	33 1f       	adc	r19, r19
    1546:	22 0f       	add	r18, r18
    1548:	33 1f       	adc	r19, r19
    154a:	82 0f       	add	r24, r18
    154c:	93 1f       	adc	r25, r19
    154e:	80 52       	subi	r24, 0x20	; 32
    1550:	98 4f       	sbci	r25, 0xF8	; 248
    1552:	0e 94 b8 07 	call	0xf70	; 0xf70 <vListInitialise>
    1556:	cf 5f       	subi	r28, 0xFF	; 255
    1558:	c4 30       	cpi	r28, 0x04	; 4
    155a:	70 f3       	brcs	.-36     	; 0x1538 <prvInitialiseTaskLists+0x6>
    155c:	87 ed       	ldi	r24, 0xD7	; 215
    155e:	97 e0       	ldi	r25, 0x07	; 7
    1560:	0e 94 b8 07 	call	0xf70	; 0xf70 <vListInitialise>
    1564:	8e ec       	ldi	r24, 0xCE	; 206
    1566:	97 e0       	ldi	r25, 0x07	; 7
    1568:	0e 94 b8 07 	call	0xf70	; 0xf70 <vListInitialise>
    156c:	81 ec       	ldi	r24, 0xC1	; 193
    156e:	97 e0       	ldi	r25, 0x07	; 7
    1570:	0e 94 b8 07 	call	0xf70	; 0xf70 <vListInitialise>
    1574:	88 eb       	ldi	r24, 0xB8	; 184
    1576:	97 e0       	ldi	r25, 0x07	; 7
    1578:	0e 94 b8 07 	call	0xf70	; 0xf70 <vListInitialise>
    157c:	87 ed       	ldi	r24, 0xD7	; 215
    157e:	97 e0       	ldi	r25, 0x07	; 7
    1580:	90 93 cd 07 	sts	0x07CD, r25	; 0x8007cd <pxDelayedTaskList+0x1>
    1584:	80 93 cc 07 	sts	0x07CC, r24	; 0x8007cc <pxDelayedTaskList>
    1588:	8e ec       	ldi	r24, 0xCE	; 206
    158a:	97 e0       	ldi	r25, 0x07	; 7
    158c:	90 93 cb 07 	sts	0x07CB, r25	; 0x8007cb <pxOverflowDelayedTaskList+0x1>
    1590:	80 93 ca 07 	sts	0x07CA, r24	; 0x8007ca <pxOverflowDelayedTaskList>
    1594:	cf 91       	pop	r28
    1596:	08 95       	ret

00001598 <prvAddCurrentTaskToDelayedList>:
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	ec 01       	movw	r28, r24
    159e:	e0 91 04 08 	lds	r30, 0x0804	; 0x800804 <pxCurrentTCB>
    15a2:	f0 91 05 08 	lds	r31, 0x0805	; 0x800805 <pxCurrentTCB+0x1>
    15a6:	93 83       	std	Z+3, r25	; 0x03
    15a8:	82 83       	std	Z+2, r24	; 0x02
    15aa:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <xTickCount>
    15ae:	90 91 b5 07 	lds	r25, 0x07B5	; 0x8007b5 <xTickCount+0x1>
    15b2:	c8 17       	cp	r28, r24
    15b4:	d9 07       	cpc	r29, r25
    15b6:	68 f4       	brcc	.+26     	; 0x15d2 <prvAddCurrentTaskToDelayedList+0x3a>
    15b8:	60 91 04 08 	lds	r22, 0x0804	; 0x800804 <pxCurrentTCB>
    15bc:	70 91 05 08 	lds	r23, 0x0805	; 0x800805 <pxCurrentTCB+0x1>
    15c0:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <pxOverflowDelayedTaskList>
    15c4:	90 91 cb 07 	lds	r25, 0x07CB	; 0x8007cb <pxOverflowDelayedTaskList+0x1>
    15c8:	6e 5f       	subi	r22, 0xFE	; 254
    15ca:	7f 4f       	sbci	r23, 0xFF	; 255
    15cc:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInsert>
    15d0:	17 c0       	rjmp	.+46     	; 0x1600 <prvAddCurrentTaskToDelayedList+0x68>
    15d2:	60 91 04 08 	lds	r22, 0x0804	; 0x800804 <pxCurrentTCB>
    15d6:	70 91 05 08 	lds	r23, 0x0805	; 0x800805 <pxCurrentTCB+0x1>
    15da:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <pxDelayedTaskList>
    15de:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <pxDelayedTaskList+0x1>
    15e2:	6e 5f       	subi	r22, 0xFE	; 254
    15e4:	7f 4f       	sbci	r23, 0xFF	; 255
    15e6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vListInsert>
    15ea:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <xNextTaskUnblockTime>
    15ee:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <xNextTaskUnblockTime+0x1>
    15f2:	c8 17       	cp	r28, r24
    15f4:	d9 07       	cpc	r29, r25
    15f6:	20 f4       	brcc	.+8      	; 0x1600 <prvAddCurrentTaskToDelayedList+0x68>
    15f8:	d0 93 64 00 	sts	0x0064, r29	; 0x800064 <xNextTaskUnblockTime+0x1>
    15fc:	c0 93 63 00 	sts	0x0063, r28	; 0x800063 <xNextTaskUnblockTime>
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	08 95       	ret

00001606 <xTaskGenericCreate>:
    1606:	2f 92       	push	r2
    1608:	3f 92       	push	r3
    160a:	4f 92       	push	r4
    160c:	5f 92       	push	r5
    160e:	7f 92       	push	r7
    1610:	8f 92       	push	r8
    1612:	9f 92       	push	r9
    1614:	af 92       	push	r10
    1616:	bf 92       	push	r11
    1618:	cf 92       	push	r12
    161a:	df 92       	push	r13
    161c:	ef 92       	push	r14
    161e:	ff 92       	push	r15
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	00 d0       	rcall	.+0      	; 0x162a <xTaskGenericCreate+0x24>
    162a:	00 d0       	rcall	.+0      	; 0x162c <xTaskGenericCreate+0x26>
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	9a 83       	std	Y+2, r25	; 0x02
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	4b 01       	movw	r8, r22
    1636:	5c 83       	std	Y+4, r21	; 0x04
    1638:	4b 83       	std	Y+3, r20	; 0x03
    163a:	19 01       	movw	r2, r18
    163c:	70 2e       	mov	r7, r16
    163e:	b6 01       	movw	r22, r12
    1640:	25 01       	movw	r4, r10
    1642:	ca 01       	movw	r24, r20
    1644:	0e 94 31 0a 	call	0x1462	; 0x1462 <prvAllocateTCBAndStack>
    1648:	5c 01       	movw	r10, r24
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	09 f4       	brne	.+2      	; 0x1650 <xTaskGenericCreate+0x4a>
    164e:	6a c0       	rjmp	.+212    	; 0x1724 <xTaskGenericCreate+0x11e>
    1650:	fc 01       	movw	r30, r24
    1652:	c7 88       	ldd	r12, Z+23	; 0x17
    1654:	d0 8c       	ldd	r13, Z+24	; 0x18
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	c8 0e       	add	r12, r24
    165e:	d9 1e       	adc	r13, r25
    1660:	0b 81       	ldd	r16, Y+3	; 0x03
    1662:	1c 81       	ldd	r17, Y+4	; 0x04
    1664:	92 01       	movw	r18, r4
    1666:	47 2d       	mov	r20, r7
    1668:	b4 01       	movw	r22, r8
    166a:	c5 01       	movw	r24, r10
    166c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <prvInitialiseTCBVariables>
    1670:	a1 01       	movw	r20, r2
    1672:	69 81       	ldd	r22, Y+1	; 0x01
    1674:	7a 81       	ldd	r23, Y+2	; 0x02
    1676:	c6 01       	movw	r24, r12
    1678:	0e 94 4b 08 	call	0x1096	; 0x1096 <pxPortInitialiseStack>
    167c:	f5 01       	movw	r30, r10
    167e:	91 83       	std	Z+1, r25	; 0x01
    1680:	80 83       	st	Z, r24
    1682:	e1 14       	cp	r14, r1
    1684:	f1 04       	cpc	r15, r1
    1686:	19 f0       	breq	.+6      	; 0x168e <xTaskGenericCreate+0x88>
    1688:	f7 01       	movw	r30, r14
    168a:	b1 82       	std	Z+1, r11	; 0x01
    168c:	a0 82       	st	Z, r10
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	f8 94       	cli
    1692:	0f 92       	push	r0
    1694:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <uxCurrentNumberOfTasks>
    1698:	8f 5f       	subi	r24, 0xFF	; 255
    169a:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <uxCurrentNumberOfTasks>
    169e:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <pxCurrentTCB>
    16a2:	90 91 05 08 	lds	r25, 0x0805	; 0x800805 <pxCurrentTCB+0x1>
    16a6:	89 2b       	or	r24, r25
    16a8:	59 f4       	brne	.+22     	; 0x16c0 <xTaskGenericCreate+0xba>
    16aa:	b0 92 05 08 	sts	0x0805, r11	; 0x800805 <pxCurrentTCB+0x1>
    16ae:	a0 92 04 08 	sts	0x0804, r10	; 0x800804 <pxCurrentTCB>
    16b2:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <uxCurrentNumberOfTasks>
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	91 f4       	brne	.+36     	; 0x16de <xTaskGenericCreate+0xd8>
    16ba:	0e 94 99 0a 	call	0x1532	; 0x1532 <prvInitialiseTaskLists>
    16be:	0f c0       	rjmp	.+30     	; 0x16de <xTaskGenericCreate+0xd8>
    16c0:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <xSchedulerRunning>
    16c4:	81 11       	cpse	r24, r1
    16c6:	0b c0       	rjmp	.+22     	; 0x16de <xTaskGenericCreate+0xd8>
    16c8:	e0 91 04 08 	lds	r30, 0x0804	; 0x800804 <pxCurrentTCB>
    16cc:	f0 91 05 08 	lds	r31, 0x0805	; 0x800805 <pxCurrentTCB+0x1>
    16d0:	86 89       	ldd	r24, Z+22	; 0x16
    16d2:	78 16       	cp	r7, r24
    16d4:	20 f0       	brcs	.+8      	; 0x16de <xTaskGenericCreate+0xd8>
    16d6:	b0 92 05 08 	sts	0x0805, r11	; 0x800805 <pxCurrentTCB+0x1>
    16da:	a0 92 04 08 	sts	0x0804, r10	; 0x800804 <pxCurrentTCB>
    16de:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <uxTaskNumber>
    16e2:	8f 5f       	subi	r24, 0xFF	; 255
    16e4:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <uxTaskNumber>
    16e8:	f5 01       	movw	r30, r10
    16ea:	86 89       	ldd	r24, Z+22	; 0x16
    16ec:	90 91 b3 07 	lds	r25, 0x07B3	; 0x8007b3 <uxTopReadyPriority>
    16f0:	98 17       	cp	r25, r24
    16f2:	10 f4       	brcc	.+4      	; 0x16f8 <xTaskGenericCreate+0xf2>
    16f4:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <uxTopReadyPriority>
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	b5 01       	movw	r22, r10
    16fc:	6e 5f       	subi	r22, 0xFE	; 254
    16fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1700:	9c 01       	movw	r18, r24
    1702:	22 0f       	add	r18, r18
    1704:	33 1f       	adc	r19, r19
    1706:	22 0f       	add	r18, r18
    1708:	33 1f       	adc	r19, r19
    170a:	22 0f       	add	r18, r18
    170c:	33 1f       	adc	r19, r19
    170e:	82 0f       	add	r24, r18
    1710:	93 1f       	adc	r25, r19
    1712:	80 52       	subi	r24, 0x20	; 32
    1714:	98 4f       	sbci	r25, 0xF8	; 248
    1716:	0e 94 ca 07 	call	0xf94	; 0xf94 <vListInsertEnd>
    171a:	0f 90       	pop	r0
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	f1 e0       	ldi	r31, 0x01	; 1
    1720:	f9 83       	std	Y+1, r31	; 0x01
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <xTaskGenericCreate+0x122>
    1724:	8f ef       	ldi	r24, 0xFF	; 255
    1726:	89 83       	std	Y+1, r24	; 0x01
    1728:	e9 81       	ldd	r30, Y+1	; 0x01
    172a:	e1 30       	cpi	r30, 0x01	; 1
    172c:	69 f4       	brne	.+26     	; 0x1748 <xTaskGenericCreate+0x142>
    172e:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <xSchedulerRunning>
    1732:	88 23       	and	r24, r24
    1734:	49 f0       	breq	.+18     	; 0x1748 <xTaskGenericCreate+0x142>
    1736:	e0 91 04 08 	lds	r30, 0x0804	; 0x800804 <pxCurrentTCB>
    173a:	f0 91 05 08 	lds	r31, 0x0805	; 0x800805 <pxCurrentTCB+0x1>
    173e:	86 89       	ldd	r24, Z+22	; 0x16
    1740:	87 15       	cp	r24, r7
    1742:	10 f4       	brcc	.+4      	; 0x1748 <xTaskGenericCreate+0x142>
    1744:	0e 94 e6 08 	call	0x11cc	; 0x11cc <vPortYield>
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	ff 90       	pop	r15
    175c:	ef 90       	pop	r14
    175e:	df 90       	pop	r13
    1760:	cf 90       	pop	r12
    1762:	bf 90       	pop	r11
    1764:	af 90       	pop	r10
    1766:	9f 90       	pop	r9
    1768:	8f 90       	pop	r8
    176a:	7f 90       	pop	r7
    176c:	5f 90       	pop	r5
    176e:	4f 90       	pop	r4
    1770:	3f 90       	pop	r3
    1772:	2f 90       	pop	r2
    1774:	08 95       	ret

00001776 <vTaskStartScheduler>:
    1776:	af 92       	push	r10
    1778:	bf 92       	push	r11
    177a:	cf 92       	push	r12
    177c:	df 92       	push	r13
    177e:	ef 92       	push	r14
    1780:	ff 92       	push	r15
    1782:	0f 93       	push	r16
    1784:	a1 2c       	mov	r10, r1
    1786:	b1 2c       	mov	r11, r1
    1788:	c1 2c       	mov	r12, r1
    178a:	d1 2c       	mov	r13, r1
    178c:	e1 2c       	mov	r14, r1
    178e:	f1 2c       	mov	r15, r1
    1790:	00 e0       	ldi	r16, 0x00	; 0
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	45 e5       	ldi	r20, 0x55	; 85
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	67 ec       	ldi	r22, 0xC7	; 199
    179c:	71 e0       	ldi	r23, 0x01	; 1
    179e:	89 e6       	ldi	r24, 0x69	; 105
    17a0:	9d e0       	ldi	r25, 0x0D	; 13
    17a2:	0e 94 03 0b 	call	0x1606	; 0x1606 <xTaskGenericCreate>
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	49 f4       	brne	.+18     	; 0x17bc <vTaskStartScheduler+0x46>
    17aa:	f8 94       	cli
    17ac:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <xSchedulerRunning>
    17b0:	10 92 b5 07 	sts	0x07B5, r1	; 0x8007b5 <xTickCount+0x1>
    17b4:	10 92 b4 07 	sts	0x07B4, r1	; 0x8007b4 <xTickCount>
    17b8:	0e 94 b7 08 	call	0x116e	; 0x116e <xPortStartScheduler>
    17bc:	0f 91       	pop	r16
    17be:	ff 90       	pop	r15
    17c0:	ef 90       	pop	r14
    17c2:	df 90       	pop	r13
    17c4:	cf 90       	pop	r12
    17c6:	bf 90       	pop	r11
    17c8:	af 90       	pop	r10
    17ca:	08 95       	ret

000017cc <vTaskSuspendAll>:
    17cc:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <uxSchedulerSuspended>
    17d0:	8f 5f       	subi	r24, 0xFF	; 255
    17d2:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <uxSchedulerSuspended>
    17d6:	08 95       	ret

000017d8 <xTaskIncrementTick>:
    17d8:	df 92       	push	r13
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <uxSchedulerSuspended>
    17ea:	81 11       	cpse	r24, r1
    17ec:	99 c0       	rjmp	.+306    	; 0x1920 <xTaskIncrementTick+0x148>
    17ee:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <xTickCount>
    17f2:	90 91 b5 07 	lds	r25, 0x07B5	; 0x8007b5 <xTickCount+0x1>
    17f6:	01 96       	adiw	r24, 0x01	; 1
    17f8:	90 93 b5 07 	sts	0x07B5, r25	; 0x8007b5 <xTickCount+0x1>
    17fc:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <xTickCount>
    1800:	e0 90 b4 07 	lds	r14, 0x07B4	; 0x8007b4 <xTickCount>
    1804:	f0 90 b5 07 	lds	r15, 0x07B5	; 0x8007b5 <xTickCount+0x1>
    1808:	e1 14       	cp	r14, r1
    180a:	f1 04       	cpc	r15, r1
    180c:	b9 f4       	brne	.+46     	; 0x183c <xTaskIncrementTick+0x64>
    180e:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <pxDelayedTaskList>
    1812:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <pxDelayedTaskList+0x1>
    1816:	20 91 ca 07 	lds	r18, 0x07CA	; 0x8007ca <pxOverflowDelayedTaskList>
    181a:	30 91 cb 07 	lds	r19, 0x07CB	; 0x8007cb <pxOverflowDelayedTaskList+0x1>
    181e:	30 93 cd 07 	sts	0x07CD, r19	; 0x8007cd <pxDelayedTaskList+0x1>
    1822:	20 93 cc 07 	sts	0x07CC, r18	; 0x8007cc <pxDelayedTaskList>
    1826:	90 93 cb 07 	sts	0x07CB, r25	; 0x8007cb <pxOverflowDelayedTaskList+0x1>
    182a:	80 93 ca 07 	sts	0x07CA, r24	; 0x8007ca <pxOverflowDelayedTaskList>
    182e:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <xNumOfOverflows>
    1832:	8f 5f       	subi	r24, 0xFF	; 255
    1834:	80 93 af 07 	sts	0x07AF, r24	; 0x8007af <xNumOfOverflows>
    1838:	0e 94 12 0a 	call	0x1424	; 0x1424 <prvResetNextTaskUnblockTime>
    183c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <xNextTaskUnblockTime>
    1840:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <xNextTaskUnblockTime+0x1>
    1844:	e8 16       	cp	r14, r24
    1846:	f9 06       	cpc	r15, r25
    1848:	28 f4       	brcc	.+10     	; 0x1854 <xTaskIncrementTick+0x7c>
    184a:	d1 2c       	mov	r13, r1
    184c:	53 c0       	rjmp	.+166    	; 0x18f4 <xTaskIncrementTick+0x11c>
    184e:	dd 24       	eor	r13, r13
    1850:	d3 94       	inc	r13
    1852:	01 c0       	rjmp	.+2      	; 0x1856 <xTaskIncrementTick+0x7e>
    1854:	d1 2c       	mov	r13, r1
    1856:	e0 91 cc 07 	lds	r30, 0x07CC	; 0x8007cc <pxDelayedTaskList>
    185a:	f0 91 cd 07 	lds	r31, 0x07CD	; 0x8007cd <pxDelayedTaskList+0x1>
    185e:	80 81       	ld	r24, Z
    1860:	81 11       	cpse	r24, r1
    1862:	07 c0       	rjmp	.+14     	; 0x1872 <xTaskIncrementTick+0x9a>
    1864:	8f ef       	ldi	r24, 0xFF	; 255
    1866:	9f ef       	ldi	r25, 0xFF	; 255
    1868:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <xNextTaskUnblockTime+0x1>
    186c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <xNextTaskUnblockTime>
    1870:	41 c0       	rjmp	.+130    	; 0x18f4 <xTaskIncrementTick+0x11c>
    1872:	e0 91 cc 07 	lds	r30, 0x07CC	; 0x8007cc <pxDelayedTaskList>
    1876:	f0 91 cd 07 	lds	r31, 0x07CD	; 0x8007cd <pxDelayedTaskList+0x1>
    187a:	05 80       	ldd	r0, Z+5	; 0x05
    187c:	f6 81       	ldd	r31, Z+6	; 0x06
    187e:	e0 2d       	mov	r30, r0
    1880:	c6 81       	ldd	r28, Z+6	; 0x06
    1882:	d7 81       	ldd	r29, Z+7	; 0x07
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	9b 81       	ldd	r25, Y+3	; 0x03
    1888:	e8 16       	cp	r14, r24
    188a:	f9 06       	cpc	r15, r25
    188c:	28 f4       	brcc	.+10     	; 0x1898 <xTaskIncrementTick+0xc0>
    188e:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <xNextTaskUnblockTime+0x1>
    1892:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <xNextTaskUnblockTime>
    1896:	2e c0       	rjmp	.+92     	; 0x18f4 <xTaskIncrementTick+0x11c>
    1898:	8e 01       	movw	r16, r28
    189a:	0e 5f       	subi	r16, 0xFE	; 254
    189c:	1f 4f       	sbci	r17, 0xFF	; 255
    189e:	c8 01       	movw	r24, r16
    18a0:	0e 94 1c 08 	call	0x1038	; 0x1038 <uxListRemove>
    18a4:	8c 89       	ldd	r24, Y+20	; 0x14
    18a6:	9d 89       	ldd	r25, Y+21	; 0x15
    18a8:	89 2b       	or	r24, r25
    18aa:	21 f0       	breq	.+8      	; 0x18b4 <xTaskIncrementTick+0xdc>
    18ac:	ce 01       	movw	r24, r28
    18ae:	0c 96       	adiw	r24, 0x0c	; 12
    18b0:	0e 94 1c 08 	call	0x1038	; 0x1038 <uxListRemove>
    18b4:	8e 89       	ldd	r24, Y+22	; 0x16
    18b6:	90 91 b3 07 	lds	r25, 0x07B3	; 0x8007b3 <uxTopReadyPriority>
    18ba:	98 17       	cp	r25, r24
    18bc:	10 f4       	brcc	.+4      	; 0x18c2 <xTaskIncrementTick+0xea>
    18be:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <uxTopReadyPriority>
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	9c 01       	movw	r18, r24
    18c6:	22 0f       	add	r18, r18
    18c8:	33 1f       	adc	r19, r19
    18ca:	22 0f       	add	r18, r18
    18cc:	33 1f       	adc	r19, r19
    18ce:	22 0f       	add	r18, r18
    18d0:	33 1f       	adc	r19, r19
    18d2:	82 0f       	add	r24, r18
    18d4:	93 1f       	adc	r25, r19
    18d6:	b8 01       	movw	r22, r16
    18d8:	80 52       	subi	r24, 0x20	; 32
    18da:	98 4f       	sbci	r25, 0xF8	; 248
    18dc:	0e 94 ca 07 	call	0xf94	; 0xf94 <vListInsertEnd>
    18e0:	9e 89       	ldd	r25, Y+22	; 0x16
    18e2:	e0 91 04 08 	lds	r30, 0x0804	; 0x800804 <pxCurrentTCB>
    18e6:	f0 91 05 08 	lds	r31, 0x0805	; 0x800805 <pxCurrentTCB+0x1>
    18ea:	86 89       	ldd	r24, Z+22	; 0x16
    18ec:	98 17       	cp	r25, r24
    18ee:	08 f0       	brcs	.+2      	; 0x18f2 <xTaskIncrementTick+0x11a>
    18f0:	ae cf       	rjmp	.-164    	; 0x184e <xTaskIncrementTick+0x76>
    18f2:	b1 cf       	rjmp	.-158    	; 0x1856 <xTaskIncrementTick+0x7e>
    18f4:	e0 91 04 08 	lds	r30, 0x0804	; 0x800804 <pxCurrentTCB>
    18f8:	f0 91 05 08 	lds	r31, 0x0805	; 0x800805 <pxCurrentTCB+0x1>
    18fc:	86 89       	ldd	r24, Z+22	; 0x16
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	fc 01       	movw	r30, r24
    1902:	ee 0f       	add	r30, r30
    1904:	ff 1f       	adc	r31, r31
    1906:	ee 0f       	add	r30, r30
    1908:	ff 1f       	adc	r31, r31
    190a:	ee 0f       	add	r30, r30
    190c:	ff 1f       	adc	r31, r31
    190e:	8e 0f       	add	r24, r30
    1910:	9f 1f       	adc	r25, r31
    1912:	fc 01       	movw	r30, r24
    1914:	e0 52       	subi	r30, 0x20	; 32
    1916:	f8 4f       	sbci	r31, 0xF8	; 248
    1918:	80 81       	ld	r24, Z
    191a:	82 30       	cpi	r24, 0x02	; 2
    191c:	40 f4       	brcc	.+16     	; 0x192e <xTaskIncrementTick+0x156>
    191e:	09 c0       	rjmp	.+18     	; 0x1932 <xTaskIncrementTick+0x15a>
    1920:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <uxPendedTicks>
    1924:	8f 5f       	subi	r24, 0xFF	; 255
    1926:	80 93 b1 07 	sts	0x07B1, r24	; 0x8007b1 <uxPendedTicks>
    192a:	d1 2c       	mov	r13, r1
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <xTaskIncrementTick+0x15a>
    192e:	dd 24       	eor	r13, r13
    1930:	d3 94       	inc	r13
    1932:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <xYieldPending>
    1936:	88 23       	and	r24, r24
    1938:	11 f0       	breq	.+4      	; 0x193e <xTaskIncrementTick+0x166>
    193a:	dd 24       	eor	r13, r13
    193c:	d3 94       	inc	r13
    193e:	8d 2d       	mov	r24, r13
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	1f 91       	pop	r17
    1946:	0f 91       	pop	r16
    1948:	ff 90       	pop	r15
    194a:	ef 90       	pop	r14
    194c:	df 90       	pop	r13
    194e:	08 95       	ret

00001950 <xTaskResumeAll>:
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	0f 92       	push	r0
    195e:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <uxSchedulerSuspended>
    1962:	81 50       	subi	r24, 0x01	; 1
    1964:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <uxSchedulerSuspended>
    1968:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <uxSchedulerSuspended>
    196c:	81 11       	cpse	r24, r1
    196e:	57 c0       	rjmp	.+174    	; 0x1a1e <xTaskResumeAll+0xce>
    1970:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <uxCurrentNumberOfTasks>
    1974:	81 11       	cpse	r24, r1
    1976:	32 c0       	rjmp	.+100    	; 0x19dc <xTaskResumeAll+0x8c>
    1978:	55 c0       	rjmp	.+170    	; 0x1a24 <xTaskResumeAll+0xd4>
    197a:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <xPendingReadyList+0x5>
    197e:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <xPendingReadyList+0x6>
    1982:	c6 81       	ldd	r28, Z+6	; 0x06
    1984:	d7 81       	ldd	r29, Z+7	; 0x07
    1986:	ce 01       	movw	r24, r28
    1988:	0c 96       	adiw	r24, 0x0c	; 12
    198a:	0e 94 1c 08 	call	0x1038	; 0x1038 <uxListRemove>
    198e:	8e 01       	movw	r16, r28
    1990:	0e 5f       	subi	r16, 0xFE	; 254
    1992:	1f 4f       	sbci	r17, 0xFF	; 255
    1994:	c8 01       	movw	r24, r16
    1996:	0e 94 1c 08 	call	0x1038	; 0x1038 <uxListRemove>
    199a:	8e 89       	ldd	r24, Y+22	; 0x16
    199c:	90 91 b3 07 	lds	r25, 0x07B3	; 0x8007b3 <uxTopReadyPriority>
    19a0:	98 17       	cp	r25, r24
    19a2:	10 f4       	brcc	.+4      	; 0x19a8 <xTaskResumeAll+0x58>
    19a4:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <uxTopReadyPriority>
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9c 01       	movw	r18, r24
    19ac:	22 0f       	add	r18, r18
    19ae:	33 1f       	adc	r19, r19
    19b0:	22 0f       	add	r18, r18
    19b2:	33 1f       	adc	r19, r19
    19b4:	22 0f       	add	r18, r18
    19b6:	33 1f       	adc	r19, r19
    19b8:	82 0f       	add	r24, r18
    19ba:	93 1f       	adc	r25, r19
    19bc:	b8 01       	movw	r22, r16
    19be:	80 52       	subi	r24, 0x20	; 32
    19c0:	98 4f       	sbci	r25, 0xF8	; 248
    19c2:	0e 94 ca 07 	call	0xf94	; 0xf94 <vListInsertEnd>
    19c6:	9e 89       	ldd	r25, Y+22	; 0x16
    19c8:	e0 91 04 08 	lds	r30, 0x0804	; 0x800804 <pxCurrentTCB>
    19cc:	f0 91 05 08 	lds	r31, 0x0805	; 0x800805 <pxCurrentTCB+0x1>
    19d0:	86 89       	ldd	r24, Z+22	; 0x16
    19d2:	98 17       	cp	r25, r24
    19d4:	18 f0       	brcs	.+6      	; 0x19dc <xTaskResumeAll+0x8c>
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <xYieldPending>
    19dc:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <xPendingReadyList>
    19e0:	81 11       	cpse	r24, r1
    19e2:	cb cf       	rjmp	.-106    	; 0x197a <xTaskResumeAll+0x2a>
    19e4:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <uxPendedTicks>
    19e8:	81 11       	cpse	r24, r1
    19ea:	0d c0       	rjmp	.+26     	; 0x1a06 <xTaskResumeAll+0xb6>
    19ec:	10 c0       	rjmp	.+32     	; 0x1a0e <xTaskResumeAll+0xbe>
    19ee:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskIncrementTick>
    19f2:	88 23       	and	r24, r24
    19f4:	19 f0       	breq	.+6      	; 0x19fc <xTaskResumeAll+0xac>
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <xYieldPending>
    19fc:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <uxPendedTicks>
    1a00:	81 50       	subi	r24, 0x01	; 1
    1a02:	80 93 b1 07 	sts	0x07B1, r24	; 0x8007b1 <uxPendedTicks>
    1a06:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <uxPendedTicks>
    1a0a:	81 11       	cpse	r24, r1
    1a0c:	f0 cf       	rjmp	.-32     	; 0x19ee <xTaskResumeAll+0x9e>
    1a0e:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <xYieldPending>
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	31 f4       	brne	.+12     	; 0x1a22 <xTaskResumeAll+0xd2>
    1a16:	0e 94 e6 08 	call	0x11cc	; 0x11cc <vPortYield>
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	03 c0       	rjmp	.+6      	; 0x1a24 <xTaskResumeAll+0xd4>
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	01 c0       	rjmp	.+2      	; 0x1a24 <xTaskResumeAll+0xd4>
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	0f 90       	pop	r0
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	1f 91       	pop	r17
    1a2e:	0f 91       	pop	r16
    1a30:	08 95       	ret

00001a32 <vTaskDelay>:
    1a32:	cf 93       	push	r28
    1a34:	df 93       	push	r29
    1a36:	ec 01       	movw	r28, r24
    1a38:	89 2b       	or	r24, r25
    1a3a:	a9 f0       	breq	.+42     	; 0x1a66 <vTaskDelay+0x34>
    1a3c:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <vTaskSuspendAll>
    1a40:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <xTickCount>
    1a44:	90 91 b5 07 	lds	r25, 0x07B5	; 0x8007b5 <xTickCount+0x1>
    1a48:	c8 0f       	add	r28, r24
    1a4a:	d9 1f       	adc	r29, r25
    1a4c:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <pxCurrentTCB>
    1a50:	90 91 05 08 	lds	r25, 0x0805	; 0x800805 <pxCurrentTCB+0x1>
    1a54:	02 96       	adiw	r24, 0x02	; 2
    1a56:	0e 94 1c 08 	call	0x1038	; 0x1038 <uxListRemove>
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	0e 94 cc 0a 	call	0x1598	; 0x1598 <prvAddCurrentTaskToDelayedList>
    1a60:	0e 94 a8 0c 	call	0x1950	; 0x1950 <xTaskResumeAll>
    1a64:	01 c0       	rjmp	.+2      	; 0x1a68 <vTaskDelay+0x36>
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	81 11       	cpse	r24, r1
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <vTaskDelay+0x3e>
    1a6c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <vPortYield>
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	08 95       	ret

00001a76 <prvCheckTasksWaitingTermination>:
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	24 c0       	rjmp	.+72     	; 0x1ac4 <prvCheckTasksWaitingTermination+0x4e>
    1a7c:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <vTaskSuspendAll>
    1a80:	c0 91 b8 07 	lds	r28, 0x07B8	; 0x8007b8 <xTasksWaitingTermination>
    1a84:	0e 94 a8 0c 	call	0x1950	; 0x1950 <xTaskResumeAll>
    1a88:	cc 23       	and	r28, r28
    1a8a:	e1 f0       	breq	.+56     	; 0x1ac4 <prvCheckTasksWaitingTermination+0x4e>
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	0f 92       	push	r0
    1a92:	e0 91 bd 07 	lds	r30, 0x07BD	; 0x8007bd <xTasksWaitingTermination+0x5>
    1a96:	f0 91 be 07 	lds	r31, 0x07BE	; 0x8007be <xTasksWaitingTermination+0x6>
    1a9a:	c6 81       	ldd	r28, Z+6	; 0x06
    1a9c:	d7 81       	ldd	r29, Z+7	; 0x07
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	02 96       	adiw	r24, 0x02	; 2
    1aa2:	0e 94 1c 08 	call	0x1038	; 0x1038 <uxListRemove>
    1aa6:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <uxCurrentNumberOfTasks>
    1aaa:	81 50       	subi	r24, 0x01	; 1
    1aac:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <uxCurrentNumberOfTasks>
    1ab0:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <uxTasksDeleted>
    1ab4:	81 50       	subi	r24, 0x01	; 1
    1ab6:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <uxTasksDeleted>
    1aba:	0f 90       	pop	r0
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	ce 01       	movw	r24, r28
    1ac0:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <prvDeleteTCB>
    1ac4:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <uxTasksDeleted>
    1ac8:	81 11       	cpse	r24, r1
    1aca:	d8 cf       	rjmp	.-80     	; 0x1a7c <prvCheckTasksWaitingTermination+0x6>
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	08 95       	ret

00001ad2 <prvIdleTask>:
    1ad2:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <prvCheckTasksWaitingTermination>
    1ad6:	80 91 e0 07 	lds	r24, 0x07E0	; 0x8007e0 <pxReadyTasksLists>
    1ada:	82 30       	cpi	r24, 0x02	; 2
    1adc:	d0 f3       	brcs	.-12     	; 0x1ad2 <prvIdleTask>
    1ade:	0e 94 e6 08 	call	0x11cc	; 0x11cc <vPortYield>
    1ae2:	f7 cf       	rjmp	.-18     	; 0x1ad2 <prvIdleTask>

00001ae4 <vTaskSwitchContext>:
    1ae4:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <uxSchedulerSuspended>
    1ae8:	88 23       	and	r24, r24
    1aea:	21 f0       	breq	.+8      	; 0x1af4 <vTaskSwitchContext+0x10>
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <xYieldPending>
    1af2:	08 95       	ret
    1af4:	10 92 b0 07 	sts	0x07B0, r1	; 0x8007b0 <xYieldPending>
    1af8:	05 c0       	rjmp	.+10     	; 0x1b04 <vTaskSwitchContext+0x20>
    1afa:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <uxTopReadyPriority>
    1afe:	81 50       	subi	r24, 0x01	; 1
    1b00:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <uxTopReadyPriority>
    1b04:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <uxTopReadyPriority>
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	ee 0f       	add	r30, r30
    1b0e:	ff 1f       	adc	r31, r31
    1b10:	ee 0f       	add	r30, r30
    1b12:	ff 1f       	adc	r31, r31
    1b14:	ee 0f       	add	r30, r30
    1b16:	ff 1f       	adc	r31, r31
    1b18:	8e 0f       	add	r24, r30
    1b1a:	9f 1f       	adc	r25, r31
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	e0 52       	subi	r30, 0x20	; 32
    1b20:	f8 4f       	sbci	r31, 0xF8	; 248
    1b22:	80 81       	ld	r24, Z
    1b24:	88 23       	and	r24, r24
    1b26:	49 f3       	breq	.-46     	; 0x1afa <vTaskSwitchContext+0x16>
    1b28:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <uxTopReadyPriority>
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	9c 01       	movw	r18, r24
    1b30:	22 0f       	add	r18, r18
    1b32:	33 1f       	adc	r19, r19
    1b34:	22 0f       	add	r18, r18
    1b36:	33 1f       	adc	r19, r19
    1b38:	22 0f       	add	r18, r18
    1b3a:	33 1f       	adc	r19, r19
    1b3c:	28 0f       	add	r18, r24
    1b3e:	39 1f       	adc	r19, r25
    1b40:	d9 01       	movw	r26, r18
    1b42:	a0 52       	subi	r26, 0x20	; 32
    1b44:	b8 4f       	sbci	r27, 0xF8	; 248
    1b46:	11 96       	adiw	r26, 0x01	; 1
    1b48:	ed 91       	ld	r30, X+
    1b4a:	fc 91       	ld	r31, X
    1b4c:	12 97       	sbiw	r26, 0x02	; 2
    1b4e:	02 80       	ldd	r0, Z+2	; 0x02
    1b50:	f3 81       	ldd	r31, Z+3	; 0x03
    1b52:	e0 2d       	mov	r30, r0
    1b54:	12 96       	adiw	r26, 0x02	; 2
    1b56:	fc 93       	st	X, r31
    1b58:	ee 93       	st	-X, r30
    1b5a:	11 97       	sbiw	r26, 0x01	; 1
    1b5c:	2d 51       	subi	r18, 0x1D	; 29
    1b5e:	38 4f       	sbci	r19, 0xF8	; 248
    1b60:	e2 17       	cp	r30, r18
    1b62:	f3 07       	cpc	r31, r19
    1b64:	29 f4       	brne	.+10     	; 0x1b70 <vTaskSwitchContext+0x8c>
    1b66:	22 81       	ldd	r18, Z+2	; 0x02
    1b68:	33 81       	ldd	r19, Z+3	; 0x03
    1b6a:	fd 01       	movw	r30, r26
    1b6c:	32 83       	std	Z+2, r19	; 0x02
    1b6e:	21 83       	std	Z+1, r18	; 0x01
    1b70:	fc 01       	movw	r30, r24
    1b72:	ee 0f       	add	r30, r30
    1b74:	ff 1f       	adc	r31, r31
    1b76:	ee 0f       	add	r30, r30
    1b78:	ff 1f       	adc	r31, r31
    1b7a:	ee 0f       	add	r30, r30
    1b7c:	ff 1f       	adc	r31, r31
    1b7e:	8e 0f       	add	r24, r30
    1b80:	9f 1f       	adc	r25, r31
    1b82:	fc 01       	movw	r30, r24
    1b84:	e0 52       	subi	r30, 0x20	; 32
    1b86:	f8 4f       	sbci	r31, 0xF8	; 248
    1b88:	01 80       	ldd	r0, Z+1	; 0x01
    1b8a:	f2 81       	ldd	r31, Z+2	; 0x02
    1b8c:	e0 2d       	mov	r30, r0
    1b8e:	86 81       	ldd	r24, Z+6	; 0x06
    1b90:	97 81       	ldd	r25, Z+7	; 0x07
    1b92:	90 93 05 08 	sts	0x0805, r25	; 0x800805 <pxCurrentTCB+0x1>
    1b96:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <pxCurrentTCB>
    1b9a:	08 95       	ret

00001b9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    1b9c:	0f 93       	push	r16
    1b9e:	1f 93       	push	r17
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	15 96       	adiw	r26, 0x05	; 5
    1ba8:	ed 91       	ld	r30, X+
    1baa:	fc 91       	ld	r31, X
    1bac:	16 97       	sbiw	r26, 0x06	; 6
    1bae:	c6 81       	ldd	r28, Z+6	; 0x06
    1bb0:	d7 81       	ldd	r29, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    1bb2:	8e 01       	movw	r16, r28
    1bb4:	04 5f       	subi	r16, 0xF4	; 244
    1bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb8:	c8 01       	movw	r24, r16
    1bba:	0e 94 1c 08 	call	0x1038	; 0x1038 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1bbe:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <uxSchedulerSuspended>
    1bc2:	81 11       	cpse	r24, r1
    1bc4:	1c c0       	rjmp	.+56     	; 0x1bfe <xTaskRemoveFromEventList+0x62>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    1bc6:	0a 50       	subi	r16, 0x0A	; 10
    1bc8:	11 09       	sbc	r17, r1
    1bca:	c8 01       	movw	r24, r16
    1bcc:	0e 94 1c 08 	call	0x1038	; 0x1038 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    1bd0:	8e 89       	ldd	r24, Y+22	; 0x16
    1bd2:	90 91 b3 07 	lds	r25, 0x07B3	; 0x8007b3 <uxTopReadyPriority>
    1bd6:	98 17       	cp	r25, r24
    1bd8:	10 f4       	brcc	.+4      	; 0x1bde <xTaskRemoveFromEventList+0x42>
    1bda:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <uxTopReadyPriority>
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	9c 01       	movw	r18, r24
    1be2:	22 0f       	add	r18, r18
    1be4:	33 1f       	adc	r19, r19
    1be6:	22 0f       	add	r18, r18
    1be8:	33 1f       	adc	r19, r19
    1bea:	22 0f       	add	r18, r18
    1bec:	33 1f       	adc	r19, r19
    1bee:	82 0f       	add	r24, r18
    1bf0:	93 1f       	adc	r25, r19
    1bf2:	b8 01       	movw	r22, r16
    1bf4:	80 52       	subi	r24, 0x20	; 32
    1bf6:	98 4f       	sbci	r25, 0xF8	; 248
    1bf8:	0e 94 ca 07 	call	0xf94	; 0xf94 <vListInsertEnd>
    1bfc:	05 c0       	rjmp	.+10     	; 0x1c08 <xTaskRemoveFromEventList+0x6c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1bfe:	b8 01       	movw	r22, r16
    1c00:	81 ec       	ldi	r24, 0xC1	; 193
    1c02:	97 e0       	ldi	r25, 0x07	; 7
    1c04:	0e 94 ca 07 	call	0xf94	; 0xf94 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1c08:	9e 89       	ldd	r25, Y+22	; 0x16
    1c0a:	e0 91 04 08 	lds	r30, 0x0804	; 0x800804 <pxCurrentTCB>
    1c0e:	f0 91 05 08 	lds	r31, 0x0805	; 0x800805 <pxCurrentTCB+0x1>
    1c12:	86 89       	ldd	r24, Z+22	; 0x16
    1c14:	89 17       	cp	r24, r25
    1c16:	20 f4       	brcc	.+8      	; 0x1c20 <xTaskRemoveFromEventList+0x84>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <xYieldPending>
    1c1e:	01 c0       	rjmp	.+2      	; 0x1c22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
    1c20:	80 e0       	ldi	r24, 0x00	; 0
	}

	return xReturn;
}
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	08 95       	ret

00001c2c <PWM0_vidInit>:
    1c2c:	83 b7       	in	r24, 0x33	; 51
    1c2e:	87 7b       	andi	r24, 0xB7	; 183
    1c30:	83 bf       	out	0x33, r24	; 51
    1c32:	83 b7       	in	r24, 0x33	; 51
    1c34:	80 64       	ori	r24, 0x40	; 64
    1c36:	83 bf       	out	0x33, r24	; 51
    1c38:	83 b7       	in	r24, 0x33	; 51
    1c3a:	8f 7c       	andi	r24, 0xCF	; 207
    1c3c:	83 bf       	out	0x33, r24	; 51
    1c3e:	83 b7       	in	r24, 0x33	; 51
    1c40:	80 62       	ori	r24, 0x20	; 32
    1c42:	83 bf       	out	0x33, r24	; 51
    1c44:	08 95       	ret

00001c46 <PWM0_vidGenerate>:
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	1f 92       	push	r1
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	2f ef       	ldi	r18, 0xFF	; 255
    1c52:	82 9f       	mul	r24, r18
    1c54:	c0 01       	movw	r24, r0
    1c56:	11 24       	eor	r1, r1
    1c58:	64 e6       	ldi	r22, 0x64	; 100
    1c5a:	70 e0       	ldi	r23, 0x00	; 0
    1c5c:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__divmodhi4>
    1c60:	69 83       	std	Y+1, r22	; 0x01
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	8c bf       	out	0x3c, r24	; 60
    1c66:	0f 90       	pop	r0
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	08 95       	ret

00001c6e <PWM0_vidStart>:
    1c6e:	83 b7       	in	r24, 0x33	; 51
    1c70:	88 7f       	andi	r24, 0xF8	; 248
    1c72:	83 bf       	out	0x33, r24	; 51
    1c74:	83 b7       	in	r24, 0x33	; 51
    1c76:	85 60       	ori	r24, 0x05	; 5
    1c78:	83 bf       	out	0x33, r24	; 51
    1c7a:	08 95       	ret

00001c7c <PWM2_vidInit>:
    1c7c:	85 b5       	in	r24, 0x25	; 37
    1c7e:	96 b5       	in	r25, 0x26	; 38
    1c80:	87 7b       	andi	r24, 0xB7	; 183
    1c82:	99 27       	eor	r25, r25
    1c84:	96 bd       	out	0x26, r25	; 38
    1c86:	85 bd       	out	0x25, r24	; 37
    1c88:	85 b5       	in	r24, 0x25	; 37
    1c8a:	96 b5       	in	r25, 0x26	; 38
    1c8c:	80 64       	ori	r24, 0x40	; 64
    1c8e:	96 bd       	out	0x26, r25	; 38
    1c90:	85 bd       	out	0x25, r24	; 37
    1c92:	85 b5       	in	r24, 0x25	; 37
    1c94:	96 b5       	in	r25, 0x26	; 38
    1c96:	8f 7c       	andi	r24, 0xCF	; 207
    1c98:	99 27       	eor	r25, r25
    1c9a:	96 bd       	out	0x26, r25	; 38
    1c9c:	85 bd       	out	0x25, r24	; 37
    1c9e:	85 b5       	in	r24, 0x25	; 37
    1ca0:	96 b5       	in	r25, 0x26	; 38
    1ca2:	80 61       	ori	r24, 0x10	; 16
    1ca4:	96 bd       	out	0x26, r25	; 38
    1ca6:	85 bd       	out	0x25, r24	; 37
    1ca8:	08 95       	ret

00001caa <PWM2_vidGenerate>:
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	1f 92       	push	r1
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	19 82       	std	Y+1, r1	; 0x01
    1cb6:	2f ef       	ldi	r18, 0xFF	; 255
    1cb8:	82 9f       	mul	r24, r18
    1cba:	c0 01       	movw	r24, r0
    1cbc:	11 24       	eor	r1, r1
    1cbe:	64 e6       	ldi	r22, 0x64	; 100
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__divmodhi4>
    1cc6:	69 83       	std	Y+1, r22	; 0x01
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	94 bd       	out	0x24, r25	; 36
    1cce:	83 bd       	out	0x23, r24	; 35
    1cd0:	0f 90       	pop	r0
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	08 95       	ret

00001cd8 <PWM2_vidStart>:
    1cd8:	85 b5       	in	r24, 0x25	; 37
    1cda:	96 b5       	in	r25, 0x26	; 38
    1cdc:	88 7f       	andi	r24, 0xF8	; 248
    1cde:	99 27       	eor	r25, r25
    1ce0:	96 bd       	out	0x26, r25	; 38
    1ce2:	85 bd       	out	0x25, r24	; 37
    1ce4:	85 b5       	in	r24, 0x25	; 37
    1ce6:	96 b5       	in	r25, 0x26	; 38
    1ce8:	85 60       	ori	r24, 0x05	; 5
    1cea:	96 bd       	out	0x26, r25	; 38
    1cec:	85 bd       	out	0x25, r24	; 37
    1cee:	08 95       	ret

00001cf0 <USART_vidInit>:
	CB_RX = CB;
}

void USART_vidSetCBUDRE(void(*CB)(void))
{
	CB_UDR = CB;
    1cf0:	20 b5       	in	r18, 0x20	; 32
    1cf2:	2f 77       	andi	r18, 0x7F	; 127
    1cf4:	20 bd       	out	0x20, r18	; 32
    1cf6:	20 b5       	in	r18, 0x20	; 32
    1cf8:	2f 7b       	andi	r18, 0xBF	; 191
    1cfa:	20 bd       	out	0x20, r18	; 32
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	aa 1f       	adc	r26, r26
    1d06:	bb 1f       	adc	r27, r27
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	aa 1f       	adc	r26, r26
    1d0e:	bb 1f       	adc	r27, r27
    1d10:	9c 01       	movw	r18, r24
    1d12:	ad 01       	movw	r20, r26
    1d14:	22 0f       	add	r18, r18
    1d16:	33 1f       	adc	r19, r19
    1d18:	44 1f       	adc	r20, r20
    1d1a:	55 1f       	adc	r21, r21
    1d1c:	22 0f       	add	r18, r18
    1d1e:	33 1f       	adc	r19, r19
    1d20:	44 1f       	adc	r20, r20
    1d22:	55 1f       	adc	r21, r21
    1d24:	60 e0       	ldi	r22, 0x00	; 0
    1d26:	72 e1       	ldi	r23, 0x12	; 18
    1d28:	8a e7       	ldi	r24, 0x7A	; 122
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__udivmodsi4>
    1d30:	21 50       	subi	r18, 0x01	; 1
    1d32:	31 09       	sbc	r19, r1
    1d34:	80 b5       	in	r24, 0x20	; 32
    1d36:	82 60       	ori	r24, 0x02	; 2
    1d38:	80 bd       	out	0x20, r24	; 32
    1d3a:	80 b5       	in	r24, 0x20	; 32
    1d3c:	84 60       	ori	r24, 0x04	; 4
    1d3e:	80 bd       	out	0x20, r24	; 32
    1d40:	8a b1       	in	r24, 0x0a	; 10
    1d42:	8b 7f       	andi	r24, 0xFB	; 251
    1d44:	8a b9       	out	0x0a, r24	; 10
    1d46:	80 b5       	in	r24, 0x20	; 32
    1d48:	8f 7e       	andi	r24, 0xEF	; 239
    1d4a:	80 bd       	out	0x20, r24	; 32
    1d4c:	80 b5       	in	r24, 0x20	; 32
    1d4e:	8f 7d       	andi	r24, 0xDF	; 223
    1d50:	80 bd       	out	0x20, r24	; 32
    1d52:	80 b5       	in	r24, 0x20	; 32
    1d54:	88 60       	ori	r24, 0x08	; 8
    1d56:	80 bd       	out	0x20, r24	; 32
    1d58:	8a b1       	in	r24, 0x0a	; 10
    1d5a:	88 60       	ori	r24, 0x08	; 8
    1d5c:	8a b9       	out	0x0a, r24	; 10
    1d5e:	8a b1       	in	r24, 0x0a	; 10
    1d60:	80 61       	ori	r24, 0x10	; 16
    1d62:	8a b9       	out	0x0a, r24	; 10
    1d64:	80 b5       	in	r24, 0x20	; 32
    1d66:	80 68       	ori	r24, 0x80	; 128
    1d68:	80 bd       	out	0x20, r24	; 32
    1d6a:	30 bd       	out	0x20, r19	; 32
    1d6c:	29 b9       	out	0x09, r18	; 9
    1d6e:	08 95       	ret

00001d70 <USART_vidSendByte>:
    1d70:	5d 9b       	sbis	0x0b, 5	; 11
    1d72:	fe cf       	rjmp	.-4      	; 0x1d70 <USART_vidSendByte>
    1d74:	8c b9       	out	0x0c, r24	; 12
    1d76:	08 95       	ret

00001d78 <USART_u8RecieveByte>:
    1d78:	5f 9b       	sbis	0x0b, 7	; 11
    1d7a:	fe cf       	rjmp	.-4      	; 0x1d78 <USART_u8RecieveByte>
    1d7c:	8c b1       	in	r24, 0x0c	; 12
    1d7e:	08 95       	ret

00001d80 <USART_vidSendString>:
}

void USART_vidSendString(u8 *ptrString)
{
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	ec 01       	movw	r28, r24
	while((*ptrString) != '\0')
    1d86:	03 c0       	rjmp	.+6      	; 0x1d8e <USART_vidSendString+0xe>
	{
		USART_vidSendByte(*ptrString);
    1d88:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <USART_vidSendByte>
		ptrString++;
    1d8c:	21 96       	adiw	r28, 0x01	; 1
	CB_UDR = CB;
}

void USART_vidSendString(u8 *ptrString)
{
	while((*ptrString) != '\0')
    1d8e:	88 81       	ld	r24, Y
    1d90:	81 11       	cpse	r24, r1
    1d92:	fa cf       	rjmp	.-12     	; 0x1d88 <USART_vidSendString+0x8>
	{
		USART_vidSendByte(*ptrString);
		ptrString++;
	}
}
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	08 95       	ret

00001d9a <__divsf3>:
    1d9a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__divsf3x>
    1d9e:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__fp_round>
    1da2:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fp_pscB>
    1da6:	58 f0       	brcs	.+22     	; 0x1dbe <__divsf3+0x24>
    1da8:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__fp_pscA>
    1dac:	40 f0       	brcs	.+16     	; 0x1dbe <__divsf3+0x24>
    1dae:	29 f4       	brne	.+10     	; 0x1dba <__divsf3+0x20>
    1db0:	5f 3f       	cpi	r21, 0xFF	; 255
    1db2:	29 f0       	breq	.+10     	; 0x1dbe <__divsf3+0x24>
    1db4:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__fp_inf>
    1db8:	51 11       	cpse	r21, r1
    1dba:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__fp_szero>
    1dbe:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__fp_nan>

00001dc2 <__divsf3x>:
    1dc2:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__fp_split3>
    1dc6:	68 f3       	brcs	.-38     	; 0x1da2 <__divsf3+0x8>

00001dc8 <__divsf3_pse>:
    1dc8:	99 23       	and	r25, r25
    1dca:	b1 f3       	breq	.-20     	; 0x1db8 <__divsf3+0x1e>
    1dcc:	55 23       	and	r21, r21
    1dce:	91 f3       	breq	.-28     	; 0x1db4 <__divsf3+0x1a>
    1dd0:	95 1b       	sub	r25, r21
    1dd2:	55 0b       	sbc	r21, r21
    1dd4:	bb 27       	eor	r27, r27
    1dd6:	aa 27       	eor	r26, r26
    1dd8:	62 17       	cp	r22, r18
    1dda:	73 07       	cpc	r23, r19
    1ddc:	84 07       	cpc	r24, r20
    1dde:	38 f0       	brcs	.+14     	; 0x1dee <__divsf3_pse+0x26>
    1de0:	9f 5f       	subi	r25, 0xFF	; 255
    1de2:	5f 4f       	sbci	r21, 0xFF	; 255
    1de4:	22 0f       	add	r18, r18
    1de6:	33 1f       	adc	r19, r19
    1de8:	44 1f       	adc	r20, r20
    1dea:	aa 1f       	adc	r26, r26
    1dec:	a9 f3       	breq	.-22     	; 0x1dd8 <__divsf3_pse+0x10>
    1dee:	35 d0       	rcall	.+106    	; 0x1e5a <__divsf3_pse+0x92>
    1df0:	0e 2e       	mov	r0, r30
    1df2:	3a f0       	brmi	.+14     	; 0x1e02 <__divsf3_pse+0x3a>
    1df4:	e0 e8       	ldi	r30, 0x80	; 128
    1df6:	32 d0       	rcall	.+100    	; 0x1e5c <__divsf3_pse+0x94>
    1df8:	91 50       	subi	r25, 0x01	; 1
    1dfa:	50 40       	sbci	r21, 0x00	; 0
    1dfc:	e6 95       	lsr	r30
    1dfe:	00 1c       	adc	r0, r0
    1e00:	ca f7       	brpl	.-14     	; 0x1df4 <__divsf3_pse+0x2c>
    1e02:	2b d0       	rcall	.+86     	; 0x1e5a <__divsf3_pse+0x92>
    1e04:	fe 2f       	mov	r31, r30
    1e06:	29 d0       	rcall	.+82     	; 0x1e5a <__divsf3_pse+0x92>
    1e08:	66 0f       	add	r22, r22
    1e0a:	77 1f       	adc	r23, r23
    1e0c:	88 1f       	adc	r24, r24
    1e0e:	bb 1f       	adc	r27, r27
    1e10:	26 17       	cp	r18, r22
    1e12:	37 07       	cpc	r19, r23
    1e14:	48 07       	cpc	r20, r24
    1e16:	ab 07       	cpc	r26, r27
    1e18:	b0 e8       	ldi	r27, 0x80	; 128
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <__divsf3_pse+0x56>
    1e1c:	bb 0b       	sbc	r27, r27
    1e1e:	80 2d       	mov	r24, r0
    1e20:	bf 01       	movw	r22, r30
    1e22:	ff 27       	eor	r31, r31
    1e24:	93 58       	subi	r25, 0x83	; 131
    1e26:	5f 4f       	sbci	r21, 0xFF	; 255
    1e28:	3a f0       	brmi	.+14     	; 0x1e38 <__divsf3_pse+0x70>
    1e2a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e2c:	51 05       	cpc	r21, r1
    1e2e:	78 f0       	brcs	.+30     	; 0x1e4e <__divsf3_pse+0x86>
    1e30:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__fp_inf>
    1e34:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__fp_szero>
    1e38:	5f 3f       	cpi	r21, 0xFF	; 255
    1e3a:	e4 f3       	brlt	.-8      	; 0x1e34 <__divsf3_pse+0x6c>
    1e3c:	98 3e       	cpi	r25, 0xE8	; 232
    1e3e:	d4 f3       	brlt	.-12     	; 0x1e34 <__divsf3_pse+0x6c>
    1e40:	86 95       	lsr	r24
    1e42:	77 95       	ror	r23
    1e44:	67 95       	ror	r22
    1e46:	b7 95       	ror	r27
    1e48:	f7 95       	ror	r31
    1e4a:	9f 5f       	subi	r25, 0xFF	; 255
    1e4c:	c9 f7       	brne	.-14     	; 0x1e40 <__divsf3_pse+0x78>
    1e4e:	88 0f       	add	r24, r24
    1e50:	91 1d       	adc	r25, r1
    1e52:	96 95       	lsr	r25
    1e54:	87 95       	ror	r24
    1e56:	97 f9       	bld	r25, 7
    1e58:	08 95       	ret
    1e5a:	e1 e0       	ldi	r30, 0x01	; 1
    1e5c:	66 0f       	add	r22, r22
    1e5e:	77 1f       	adc	r23, r23
    1e60:	88 1f       	adc	r24, r24
    1e62:	bb 1f       	adc	r27, r27
    1e64:	62 17       	cp	r22, r18
    1e66:	73 07       	cpc	r23, r19
    1e68:	84 07       	cpc	r24, r20
    1e6a:	ba 07       	cpc	r27, r26
    1e6c:	20 f0       	brcs	.+8      	; 0x1e76 <__divsf3_pse+0xae>
    1e6e:	62 1b       	sub	r22, r18
    1e70:	73 0b       	sbc	r23, r19
    1e72:	84 0b       	sbc	r24, r20
    1e74:	ba 0b       	sbc	r27, r26
    1e76:	ee 1f       	adc	r30, r30
    1e78:	88 f7       	brcc	.-30     	; 0x1e5c <__divsf3_pse+0x94>
    1e7a:	e0 95       	com	r30
    1e7c:	08 95       	ret

00001e7e <__fixunssfsi>:
    1e7e:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__fp_splitA>
    1e82:	88 f0       	brcs	.+34     	; 0x1ea6 <__fixunssfsi+0x28>
    1e84:	9f 57       	subi	r25, 0x7F	; 127
    1e86:	98 f0       	brcs	.+38     	; 0x1eae <__fixunssfsi+0x30>
    1e88:	b9 2f       	mov	r27, r25
    1e8a:	99 27       	eor	r25, r25
    1e8c:	b7 51       	subi	r27, 0x17	; 23
    1e8e:	b0 f0       	brcs	.+44     	; 0x1ebc <__fixunssfsi+0x3e>
    1e90:	e1 f0       	breq	.+56     	; 0x1eca <__fixunssfsi+0x4c>
    1e92:	66 0f       	add	r22, r22
    1e94:	77 1f       	adc	r23, r23
    1e96:	88 1f       	adc	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	1a f0       	brmi	.+6      	; 0x1ea2 <__fixunssfsi+0x24>
    1e9c:	ba 95       	dec	r27
    1e9e:	c9 f7       	brne	.-14     	; 0x1e92 <__fixunssfsi+0x14>
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <__fixunssfsi+0x4c>
    1ea2:	b1 30       	cpi	r27, 0x01	; 1
    1ea4:	91 f0       	breq	.+36     	; 0x1eca <__fixunssfsi+0x4c>
    1ea6:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__fp_zero>
    1eaa:	b1 e0       	ldi	r27, 0x01	; 1
    1eac:	08 95       	ret
    1eae:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <__fp_zero>
    1eb2:	67 2f       	mov	r22, r23
    1eb4:	78 2f       	mov	r23, r24
    1eb6:	88 27       	eor	r24, r24
    1eb8:	b8 5f       	subi	r27, 0xF8	; 248
    1eba:	39 f0       	breq	.+14     	; 0x1eca <__fixunssfsi+0x4c>
    1ebc:	b9 3f       	cpi	r27, 0xF9	; 249
    1ebe:	cc f3       	brlt	.-14     	; 0x1eb2 <__fixunssfsi+0x34>
    1ec0:	86 95       	lsr	r24
    1ec2:	77 95       	ror	r23
    1ec4:	67 95       	ror	r22
    1ec6:	b3 95       	inc	r27
    1ec8:	d9 f7       	brne	.-10     	; 0x1ec0 <__fixunssfsi+0x42>
    1eca:	3e f4       	brtc	.+14     	; 0x1eda <__fixunssfsi+0x5c>
    1ecc:	90 95       	com	r25
    1ece:	80 95       	com	r24
    1ed0:	70 95       	com	r23
    1ed2:	61 95       	neg	r22
    1ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eda:	08 95       	ret

00001edc <__floatunsisf>:
    1edc:	e8 94       	clt
    1ede:	09 c0       	rjmp	.+18     	; 0x1ef2 <__floatsisf+0x12>

00001ee0 <__floatsisf>:
    1ee0:	97 fb       	bst	r25, 7
    1ee2:	3e f4       	brtc	.+14     	; 0x1ef2 <__floatsisf+0x12>
    1ee4:	90 95       	com	r25
    1ee6:	80 95       	com	r24
    1ee8:	70 95       	com	r23
    1eea:	61 95       	neg	r22
    1eec:	7f 4f       	sbci	r23, 0xFF	; 255
    1eee:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef2:	99 23       	and	r25, r25
    1ef4:	a9 f0       	breq	.+42     	; 0x1f20 <__floatsisf+0x40>
    1ef6:	f9 2f       	mov	r31, r25
    1ef8:	96 e9       	ldi	r25, 0x96	; 150
    1efa:	bb 27       	eor	r27, r27
    1efc:	93 95       	inc	r25
    1efe:	f6 95       	lsr	r31
    1f00:	87 95       	ror	r24
    1f02:	77 95       	ror	r23
    1f04:	67 95       	ror	r22
    1f06:	b7 95       	ror	r27
    1f08:	f1 11       	cpse	r31, r1
    1f0a:	f8 cf       	rjmp	.-16     	; 0x1efc <__floatsisf+0x1c>
    1f0c:	fa f4       	brpl	.+62     	; 0x1f4c <__floatsisf+0x6c>
    1f0e:	bb 0f       	add	r27, r27
    1f10:	11 f4       	brne	.+4      	; 0x1f16 <__floatsisf+0x36>
    1f12:	60 ff       	sbrs	r22, 0
    1f14:	1b c0       	rjmp	.+54     	; 0x1f4c <__floatsisf+0x6c>
    1f16:	6f 5f       	subi	r22, 0xFF	; 255
    1f18:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1e:	16 c0       	rjmp	.+44     	; 0x1f4c <__floatsisf+0x6c>
    1f20:	88 23       	and	r24, r24
    1f22:	11 f0       	breq	.+4      	; 0x1f28 <__floatsisf+0x48>
    1f24:	96 e9       	ldi	r25, 0x96	; 150
    1f26:	11 c0       	rjmp	.+34     	; 0x1f4a <__floatsisf+0x6a>
    1f28:	77 23       	and	r23, r23
    1f2a:	21 f0       	breq	.+8      	; 0x1f34 <__floatsisf+0x54>
    1f2c:	9e e8       	ldi	r25, 0x8E	; 142
    1f2e:	87 2f       	mov	r24, r23
    1f30:	76 2f       	mov	r23, r22
    1f32:	05 c0       	rjmp	.+10     	; 0x1f3e <__floatsisf+0x5e>
    1f34:	66 23       	and	r22, r22
    1f36:	71 f0       	breq	.+28     	; 0x1f54 <__floatsisf+0x74>
    1f38:	96 e8       	ldi	r25, 0x86	; 134
    1f3a:	86 2f       	mov	r24, r22
    1f3c:	70 e0       	ldi	r23, 0x00	; 0
    1f3e:	60 e0       	ldi	r22, 0x00	; 0
    1f40:	2a f0       	brmi	.+10     	; 0x1f4c <__floatsisf+0x6c>
    1f42:	9a 95       	dec	r25
    1f44:	66 0f       	add	r22, r22
    1f46:	77 1f       	adc	r23, r23
    1f48:	88 1f       	adc	r24, r24
    1f4a:	da f7       	brpl	.-10     	; 0x1f42 <__floatsisf+0x62>
    1f4c:	88 0f       	add	r24, r24
    1f4e:	96 95       	lsr	r25
    1f50:	87 95       	ror	r24
    1f52:	97 f9       	bld	r25, 7
    1f54:	08 95       	ret

00001f56 <__fp_inf>:
    1f56:	97 f9       	bld	r25, 7
    1f58:	9f 67       	ori	r25, 0x7F	; 127
    1f5a:	80 e8       	ldi	r24, 0x80	; 128
    1f5c:	70 e0       	ldi	r23, 0x00	; 0
    1f5e:	60 e0       	ldi	r22, 0x00	; 0
    1f60:	08 95       	ret

00001f62 <__fp_nan>:
    1f62:	9f ef       	ldi	r25, 0xFF	; 255
    1f64:	80 ec       	ldi	r24, 0xC0	; 192
    1f66:	08 95       	ret

00001f68 <__fp_pscA>:
    1f68:	00 24       	eor	r0, r0
    1f6a:	0a 94       	dec	r0
    1f6c:	16 16       	cp	r1, r22
    1f6e:	17 06       	cpc	r1, r23
    1f70:	18 06       	cpc	r1, r24
    1f72:	09 06       	cpc	r0, r25
    1f74:	08 95       	ret

00001f76 <__fp_pscB>:
    1f76:	00 24       	eor	r0, r0
    1f78:	0a 94       	dec	r0
    1f7a:	12 16       	cp	r1, r18
    1f7c:	13 06       	cpc	r1, r19
    1f7e:	14 06       	cpc	r1, r20
    1f80:	05 06       	cpc	r0, r21
    1f82:	08 95       	ret

00001f84 <__fp_round>:
    1f84:	09 2e       	mov	r0, r25
    1f86:	03 94       	inc	r0
    1f88:	00 0c       	add	r0, r0
    1f8a:	11 f4       	brne	.+4      	; 0x1f90 <__fp_round+0xc>
    1f8c:	88 23       	and	r24, r24
    1f8e:	52 f0       	brmi	.+20     	; 0x1fa4 <__fp_round+0x20>
    1f90:	bb 0f       	add	r27, r27
    1f92:	40 f4       	brcc	.+16     	; 0x1fa4 <__fp_round+0x20>
    1f94:	bf 2b       	or	r27, r31
    1f96:	11 f4       	brne	.+4      	; 0x1f9c <__fp_round+0x18>
    1f98:	60 ff       	sbrs	r22, 0
    1f9a:	04 c0       	rjmp	.+8      	; 0x1fa4 <__fp_round+0x20>
    1f9c:	6f 5f       	subi	r22, 0xFF	; 255
    1f9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa4:	08 95       	ret

00001fa6 <__fp_split3>:
    1fa6:	57 fd       	sbrc	r21, 7
    1fa8:	90 58       	subi	r25, 0x80	; 128
    1faa:	44 0f       	add	r20, r20
    1fac:	55 1f       	adc	r21, r21
    1fae:	59 f0       	breq	.+22     	; 0x1fc6 <__fp_splitA+0x10>
    1fb0:	5f 3f       	cpi	r21, 0xFF	; 255
    1fb2:	71 f0       	breq	.+28     	; 0x1fd0 <__fp_splitA+0x1a>
    1fb4:	47 95       	ror	r20

00001fb6 <__fp_splitA>:
    1fb6:	88 0f       	add	r24, r24
    1fb8:	97 fb       	bst	r25, 7
    1fba:	99 1f       	adc	r25, r25
    1fbc:	61 f0       	breq	.+24     	; 0x1fd6 <__fp_splitA+0x20>
    1fbe:	9f 3f       	cpi	r25, 0xFF	; 255
    1fc0:	79 f0       	breq	.+30     	; 0x1fe0 <__fp_splitA+0x2a>
    1fc2:	87 95       	ror	r24
    1fc4:	08 95       	ret
    1fc6:	12 16       	cp	r1, r18
    1fc8:	13 06       	cpc	r1, r19
    1fca:	14 06       	cpc	r1, r20
    1fcc:	55 1f       	adc	r21, r21
    1fce:	f2 cf       	rjmp	.-28     	; 0x1fb4 <__fp_split3+0xe>
    1fd0:	46 95       	lsr	r20
    1fd2:	f1 df       	rcall	.-30     	; 0x1fb6 <__fp_splitA>
    1fd4:	08 c0       	rjmp	.+16     	; 0x1fe6 <__fp_splitA+0x30>
    1fd6:	16 16       	cp	r1, r22
    1fd8:	17 06       	cpc	r1, r23
    1fda:	18 06       	cpc	r1, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	f1 cf       	rjmp	.-30     	; 0x1fc2 <__fp_splitA+0xc>
    1fe0:	86 95       	lsr	r24
    1fe2:	71 05       	cpc	r23, r1
    1fe4:	61 05       	cpc	r22, r1
    1fe6:	08 94       	sec
    1fe8:	08 95       	ret

00001fea <__fp_zero>:
    1fea:	e8 94       	clt

00001fec <__fp_szero>:
    1fec:	bb 27       	eor	r27, r27
    1fee:	66 27       	eor	r22, r22
    1ff0:	77 27       	eor	r23, r23
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	97 f9       	bld	r25, 7
    1ff6:	08 95       	ret

00001ff8 <__mulsf3>:
    1ff8:	0e 94 0f 10 	call	0x201e	; 0x201e <__mulsf3x>
    1ffc:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__fp_round>
    2000:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__fp_pscA>
    2004:	38 f0       	brcs	.+14     	; 0x2014 <__mulsf3+0x1c>
    2006:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fp_pscB>
    200a:	20 f0       	brcs	.+8      	; 0x2014 <__mulsf3+0x1c>
    200c:	95 23       	and	r25, r21
    200e:	11 f0       	breq	.+4      	; 0x2014 <__mulsf3+0x1c>
    2010:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__fp_inf>
    2014:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__fp_nan>
    2018:	11 24       	eor	r1, r1
    201a:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__fp_szero>

0000201e <__mulsf3x>:
    201e:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__fp_split3>
    2022:	70 f3       	brcs	.-36     	; 0x2000 <__mulsf3+0x8>

00002024 <__mulsf3_pse>:
    2024:	95 9f       	mul	r25, r21
    2026:	c1 f3       	breq	.-16     	; 0x2018 <__mulsf3+0x20>
    2028:	95 0f       	add	r25, r21
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	55 1f       	adc	r21, r21
    202e:	62 9f       	mul	r22, r18
    2030:	f0 01       	movw	r30, r0
    2032:	72 9f       	mul	r23, r18
    2034:	bb 27       	eor	r27, r27
    2036:	f0 0d       	add	r31, r0
    2038:	b1 1d       	adc	r27, r1
    203a:	63 9f       	mul	r22, r19
    203c:	aa 27       	eor	r26, r26
    203e:	f0 0d       	add	r31, r0
    2040:	b1 1d       	adc	r27, r1
    2042:	aa 1f       	adc	r26, r26
    2044:	64 9f       	mul	r22, r20
    2046:	66 27       	eor	r22, r22
    2048:	b0 0d       	add	r27, r0
    204a:	a1 1d       	adc	r26, r1
    204c:	66 1f       	adc	r22, r22
    204e:	82 9f       	mul	r24, r18
    2050:	22 27       	eor	r18, r18
    2052:	b0 0d       	add	r27, r0
    2054:	a1 1d       	adc	r26, r1
    2056:	62 1f       	adc	r22, r18
    2058:	73 9f       	mul	r23, r19
    205a:	b0 0d       	add	r27, r0
    205c:	a1 1d       	adc	r26, r1
    205e:	62 1f       	adc	r22, r18
    2060:	83 9f       	mul	r24, r19
    2062:	a0 0d       	add	r26, r0
    2064:	61 1d       	adc	r22, r1
    2066:	22 1f       	adc	r18, r18
    2068:	74 9f       	mul	r23, r20
    206a:	33 27       	eor	r19, r19
    206c:	a0 0d       	add	r26, r0
    206e:	61 1d       	adc	r22, r1
    2070:	23 1f       	adc	r18, r19
    2072:	84 9f       	mul	r24, r20
    2074:	60 0d       	add	r22, r0
    2076:	21 1d       	adc	r18, r1
    2078:	82 2f       	mov	r24, r18
    207a:	76 2f       	mov	r23, r22
    207c:	6a 2f       	mov	r22, r26
    207e:	11 24       	eor	r1, r1
    2080:	9f 57       	subi	r25, 0x7F	; 127
    2082:	50 40       	sbci	r21, 0x00	; 0
    2084:	9a f0       	brmi	.+38     	; 0x20ac <__mulsf3_pse+0x88>
    2086:	f1 f0       	breq	.+60     	; 0x20c4 <__mulsf3_pse+0xa0>
    2088:	88 23       	and	r24, r24
    208a:	4a f0       	brmi	.+18     	; 0x209e <__mulsf3_pse+0x7a>
    208c:	ee 0f       	add	r30, r30
    208e:	ff 1f       	adc	r31, r31
    2090:	bb 1f       	adc	r27, r27
    2092:	66 1f       	adc	r22, r22
    2094:	77 1f       	adc	r23, r23
    2096:	88 1f       	adc	r24, r24
    2098:	91 50       	subi	r25, 0x01	; 1
    209a:	50 40       	sbci	r21, 0x00	; 0
    209c:	a9 f7       	brne	.-22     	; 0x2088 <__mulsf3_pse+0x64>
    209e:	9e 3f       	cpi	r25, 0xFE	; 254
    20a0:	51 05       	cpc	r21, r1
    20a2:	80 f0       	brcs	.+32     	; 0x20c4 <__mulsf3_pse+0xa0>
    20a4:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__fp_inf>
    20a8:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__fp_szero>
    20ac:	5f 3f       	cpi	r21, 0xFF	; 255
    20ae:	e4 f3       	brlt	.-8      	; 0x20a8 <__mulsf3_pse+0x84>
    20b0:	98 3e       	cpi	r25, 0xE8	; 232
    20b2:	d4 f3       	brlt	.-12     	; 0x20a8 <__mulsf3_pse+0x84>
    20b4:	86 95       	lsr	r24
    20b6:	77 95       	ror	r23
    20b8:	67 95       	ror	r22
    20ba:	b7 95       	ror	r27
    20bc:	f7 95       	ror	r31
    20be:	e7 95       	ror	r30
    20c0:	9f 5f       	subi	r25, 0xFF	; 255
    20c2:	c1 f7       	brne	.-16     	; 0x20b4 <__mulsf3_pse+0x90>
    20c4:	fe 2b       	or	r31, r30
    20c6:	88 0f       	add	r24, r24
    20c8:	91 1d       	adc	r25, r1
    20ca:	96 95       	lsr	r25
    20cc:	87 95       	ror	r24
    20ce:	97 f9       	bld	r25, 7
    20d0:	08 95       	ret

000020d2 <__divmodhi4>:
    20d2:	97 fb       	bst	r25, 7
    20d4:	07 2e       	mov	r0, r23
    20d6:	16 f4       	brtc	.+4      	; 0x20dc <__divmodhi4+0xa>
    20d8:	00 94       	com	r0
    20da:	07 d0       	rcall	.+14     	; 0x20ea <__divmodhi4_neg1>
    20dc:	77 fd       	sbrc	r23, 7
    20de:	09 d0       	rcall	.+18     	; 0x20f2 <__divmodhi4_neg2>
    20e0:	0e 94 a5 10 	call	0x214a	; 0x214a <__udivmodhi4>
    20e4:	07 fc       	sbrc	r0, 7
    20e6:	05 d0       	rcall	.+10     	; 0x20f2 <__divmodhi4_neg2>
    20e8:	3e f4       	brtc	.+14     	; 0x20f8 <__divmodhi4_exit>

000020ea <__divmodhi4_neg1>:
    20ea:	90 95       	com	r25
    20ec:	81 95       	neg	r24
    20ee:	9f 4f       	sbci	r25, 0xFF	; 255
    20f0:	08 95       	ret

000020f2 <__divmodhi4_neg2>:
    20f2:	70 95       	com	r23
    20f4:	61 95       	neg	r22
    20f6:	7f 4f       	sbci	r23, 0xFF	; 255

000020f8 <__divmodhi4_exit>:
    20f8:	08 95       	ret

000020fa <__udivmodsi4>:
    20fa:	a1 e2       	ldi	r26, 0x21	; 33
    20fc:	1a 2e       	mov	r1, r26
    20fe:	aa 1b       	sub	r26, r26
    2100:	bb 1b       	sub	r27, r27
    2102:	fd 01       	movw	r30, r26
    2104:	0d c0       	rjmp	.+26     	; 0x2120 <__udivmodsi4_ep>

00002106 <__udivmodsi4_loop>:
    2106:	aa 1f       	adc	r26, r26
    2108:	bb 1f       	adc	r27, r27
    210a:	ee 1f       	adc	r30, r30
    210c:	ff 1f       	adc	r31, r31
    210e:	a2 17       	cp	r26, r18
    2110:	b3 07       	cpc	r27, r19
    2112:	e4 07       	cpc	r30, r20
    2114:	f5 07       	cpc	r31, r21
    2116:	20 f0       	brcs	.+8      	; 0x2120 <__udivmodsi4_ep>
    2118:	a2 1b       	sub	r26, r18
    211a:	b3 0b       	sbc	r27, r19
    211c:	e4 0b       	sbc	r30, r20
    211e:	f5 0b       	sbc	r31, r21

00002120 <__udivmodsi4_ep>:
    2120:	66 1f       	adc	r22, r22
    2122:	77 1f       	adc	r23, r23
    2124:	88 1f       	adc	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	1a 94       	dec	r1
    212a:	69 f7       	brne	.-38     	; 0x2106 <__udivmodsi4_loop>
    212c:	60 95       	com	r22
    212e:	70 95       	com	r23
    2130:	80 95       	com	r24
    2132:	90 95       	com	r25
    2134:	9b 01       	movw	r18, r22
    2136:	ac 01       	movw	r20, r24
    2138:	bd 01       	movw	r22, r26
    213a:	cf 01       	movw	r24, r30
    213c:	08 95       	ret

0000213e <__tablejump2__>:
    213e:	ee 0f       	add	r30, r30
    2140:	ff 1f       	adc	r31, r31
    2142:	05 90       	lpm	r0, Z+
    2144:	f4 91       	lpm	r31, Z
    2146:	e0 2d       	mov	r30, r0
    2148:	09 94       	ijmp

0000214a <__udivmodhi4>:
    214a:	aa 1b       	sub	r26, r26
    214c:	bb 1b       	sub	r27, r27
    214e:	51 e1       	ldi	r21, 0x11	; 17
    2150:	07 c0       	rjmp	.+14     	; 0x2160 <__udivmodhi4_ep>

00002152 <__udivmodhi4_loop>:
    2152:	aa 1f       	adc	r26, r26
    2154:	bb 1f       	adc	r27, r27
    2156:	a6 17       	cp	r26, r22
    2158:	b7 07       	cpc	r27, r23
    215a:	10 f0       	brcs	.+4      	; 0x2160 <__udivmodhi4_ep>
    215c:	a6 1b       	sub	r26, r22
    215e:	b7 0b       	sbc	r27, r23

00002160 <__udivmodhi4_ep>:
    2160:	88 1f       	adc	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	5a 95       	dec	r21
    2166:	a9 f7       	brne	.-22     	; 0x2152 <__udivmodhi4_loop>
    2168:	80 95       	com	r24
    216a:	90 95       	com	r25
    216c:	bc 01       	movw	r22, r24
    216e:	cd 01       	movw	r24, r26
    2170:	08 95       	ret

00002172 <sprintf>:
    2172:	ae e0       	ldi	r26, 0x0E	; 14
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	ef eb       	ldi	r30, 0xBF	; 191
    2178:	f0 e1       	ldi	r31, 0x10	; 16
    217a:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__prologue_saves__+0x1c>
    217e:	0d 89       	ldd	r16, Y+21	; 0x15
    2180:	1e 89       	ldd	r17, Y+22	; 0x16
    2182:	86 e0       	ldi	r24, 0x06	; 6
    2184:	8c 83       	std	Y+4, r24	; 0x04
    2186:	1a 83       	std	Y+2, r17	; 0x02
    2188:	09 83       	std	Y+1, r16	; 0x01
    218a:	8f ef       	ldi	r24, 0xFF	; 255
    218c:	9f e7       	ldi	r25, 0x7F	; 127
    218e:	9e 83       	std	Y+6, r25	; 0x06
    2190:	8d 83       	std	Y+5, r24	; 0x05
    2192:	ae 01       	movw	r20, r28
    2194:	47 5e       	subi	r20, 0xE7	; 231
    2196:	5f 4f       	sbci	r21, 0xFF	; 255
    2198:	6f 89       	ldd	r22, Y+23	; 0x17
    219a:	78 8d       	ldd	r23, Y+24	; 0x18
    219c:	ce 01       	movw	r24, r28
    219e:	01 96       	adiw	r24, 0x01	; 1
    21a0:	0e 94 db 10 	call	0x21b6	; 0x21b6 <vfprintf>
    21a4:	ef 81       	ldd	r30, Y+7	; 0x07
    21a6:	f8 85       	ldd	r31, Y+8	; 0x08
    21a8:	e0 0f       	add	r30, r16
    21aa:	f1 1f       	adc	r31, r17
    21ac:	10 82       	st	Z, r1
    21ae:	2e 96       	adiw	r28, 0x0e	; 14
    21b0:	e4 e0       	ldi	r30, 0x04	; 4
    21b2:	0c 94 96 13 	jmp	0x272c	; 0x272c <__epilogue_restores__+0x1c>

000021b6 <vfprintf>:
    21b6:	ab e0       	ldi	r26, 0x0B	; 11
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e1 ee       	ldi	r30, 0xE1	; 225
    21bc:	f0 e1       	ldi	r31, 0x10	; 16
    21be:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__prologue_saves__>
    21c2:	6c 01       	movw	r12, r24
    21c4:	7b 01       	movw	r14, r22
    21c6:	8a 01       	movw	r16, r20
    21c8:	fc 01       	movw	r30, r24
    21ca:	17 82       	std	Z+7, r1	; 0x07
    21cc:	16 82       	std	Z+6, r1	; 0x06
    21ce:	83 81       	ldd	r24, Z+3	; 0x03
    21d0:	81 ff       	sbrs	r24, 1
    21d2:	cc c1       	rjmp	.+920    	; 0x256c <vfprintf+0x3b6>
    21d4:	ce 01       	movw	r24, r28
    21d6:	01 96       	adiw	r24, 0x01	; 1
    21d8:	3c 01       	movw	r6, r24
    21da:	f6 01       	movw	r30, r12
    21dc:	93 81       	ldd	r25, Z+3	; 0x03
    21de:	f7 01       	movw	r30, r14
    21e0:	93 fd       	sbrc	r25, 3
    21e2:	85 91       	lpm	r24, Z+
    21e4:	93 ff       	sbrs	r25, 3
    21e6:	81 91       	ld	r24, Z+
    21e8:	7f 01       	movw	r14, r30
    21ea:	88 23       	and	r24, r24
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <vfprintf+0x3a>
    21ee:	ba c1       	rjmp	.+884    	; 0x2564 <vfprintf+0x3ae>
    21f0:	85 32       	cpi	r24, 0x25	; 37
    21f2:	39 f4       	brne	.+14     	; 0x2202 <vfprintf+0x4c>
    21f4:	93 fd       	sbrc	r25, 3
    21f6:	85 91       	lpm	r24, Z+
    21f8:	93 ff       	sbrs	r25, 3
    21fa:	81 91       	ld	r24, Z+
    21fc:	7f 01       	movw	r14, r30
    21fe:	85 32       	cpi	r24, 0x25	; 37
    2200:	29 f4       	brne	.+10     	; 0x220c <vfprintf+0x56>
    2202:	b6 01       	movw	r22, r12
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <fputc>
    220a:	e7 cf       	rjmp	.-50     	; 0x21da <vfprintf+0x24>
    220c:	91 2c       	mov	r9, r1
    220e:	21 2c       	mov	r2, r1
    2210:	31 2c       	mov	r3, r1
    2212:	ff e1       	ldi	r31, 0x1F	; 31
    2214:	f3 15       	cp	r31, r3
    2216:	d8 f0       	brcs	.+54     	; 0x224e <vfprintf+0x98>
    2218:	8b 32       	cpi	r24, 0x2B	; 43
    221a:	79 f0       	breq	.+30     	; 0x223a <vfprintf+0x84>
    221c:	38 f4       	brcc	.+14     	; 0x222c <vfprintf+0x76>
    221e:	80 32       	cpi	r24, 0x20	; 32
    2220:	79 f0       	breq	.+30     	; 0x2240 <vfprintf+0x8a>
    2222:	83 32       	cpi	r24, 0x23	; 35
    2224:	a1 f4       	brne	.+40     	; 0x224e <vfprintf+0x98>
    2226:	23 2d       	mov	r18, r3
    2228:	20 61       	ori	r18, 0x10	; 16
    222a:	1d c0       	rjmp	.+58     	; 0x2266 <vfprintf+0xb0>
    222c:	8d 32       	cpi	r24, 0x2D	; 45
    222e:	61 f0       	breq	.+24     	; 0x2248 <vfprintf+0x92>
    2230:	80 33       	cpi	r24, 0x30	; 48
    2232:	69 f4       	brne	.+26     	; 0x224e <vfprintf+0x98>
    2234:	23 2d       	mov	r18, r3
    2236:	21 60       	ori	r18, 0x01	; 1
    2238:	16 c0       	rjmp	.+44     	; 0x2266 <vfprintf+0xb0>
    223a:	83 2d       	mov	r24, r3
    223c:	82 60       	ori	r24, 0x02	; 2
    223e:	38 2e       	mov	r3, r24
    2240:	e3 2d       	mov	r30, r3
    2242:	e4 60       	ori	r30, 0x04	; 4
    2244:	3e 2e       	mov	r3, r30
    2246:	2a c0       	rjmp	.+84     	; 0x229c <vfprintf+0xe6>
    2248:	f3 2d       	mov	r31, r3
    224a:	f8 60       	ori	r31, 0x08	; 8
    224c:	1d c0       	rjmp	.+58     	; 0x2288 <vfprintf+0xd2>
    224e:	37 fc       	sbrc	r3, 7
    2250:	2d c0       	rjmp	.+90     	; 0x22ac <vfprintf+0xf6>
    2252:	20 ed       	ldi	r18, 0xD0	; 208
    2254:	28 0f       	add	r18, r24
    2256:	2a 30       	cpi	r18, 0x0A	; 10
    2258:	40 f0       	brcs	.+16     	; 0x226a <vfprintf+0xb4>
    225a:	8e 32       	cpi	r24, 0x2E	; 46
    225c:	b9 f4       	brne	.+46     	; 0x228c <vfprintf+0xd6>
    225e:	36 fc       	sbrc	r3, 6
    2260:	81 c1       	rjmp	.+770    	; 0x2564 <vfprintf+0x3ae>
    2262:	23 2d       	mov	r18, r3
    2264:	20 64       	ori	r18, 0x40	; 64
    2266:	32 2e       	mov	r3, r18
    2268:	19 c0       	rjmp	.+50     	; 0x229c <vfprintf+0xe6>
    226a:	36 fe       	sbrs	r3, 6
    226c:	06 c0       	rjmp	.+12     	; 0x227a <vfprintf+0xc4>
    226e:	8a e0       	ldi	r24, 0x0A	; 10
    2270:	98 9e       	mul	r9, r24
    2272:	20 0d       	add	r18, r0
    2274:	11 24       	eor	r1, r1
    2276:	92 2e       	mov	r9, r18
    2278:	11 c0       	rjmp	.+34     	; 0x229c <vfprintf+0xe6>
    227a:	ea e0       	ldi	r30, 0x0A	; 10
    227c:	2e 9e       	mul	r2, r30
    227e:	20 0d       	add	r18, r0
    2280:	11 24       	eor	r1, r1
    2282:	22 2e       	mov	r2, r18
    2284:	f3 2d       	mov	r31, r3
    2286:	f0 62       	ori	r31, 0x20	; 32
    2288:	3f 2e       	mov	r3, r31
    228a:	08 c0       	rjmp	.+16     	; 0x229c <vfprintf+0xe6>
    228c:	8c 36       	cpi	r24, 0x6C	; 108
    228e:	21 f4       	brne	.+8      	; 0x2298 <vfprintf+0xe2>
    2290:	83 2d       	mov	r24, r3
    2292:	80 68       	ori	r24, 0x80	; 128
    2294:	38 2e       	mov	r3, r24
    2296:	02 c0       	rjmp	.+4      	; 0x229c <vfprintf+0xe6>
    2298:	88 36       	cpi	r24, 0x68	; 104
    229a:	41 f4       	brne	.+16     	; 0x22ac <vfprintf+0xf6>
    229c:	f7 01       	movw	r30, r14
    229e:	93 fd       	sbrc	r25, 3
    22a0:	85 91       	lpm	r24, Z+
    22a2:	93 ff       	sbrs	r25, 3
    22a4:	81 91       	ld	r24, Z+
    22a6:	7f 01       	movw	r14, r30
    22a8:	81 11       	cpse	r24, r1
    22aa:	b3 cf       	rjmp	.-154    	; 0x2212 <vfprintf+0x5c>
    22ac:	98 2f       	mov	r25, r24
    22ae:	9f 7d       	andi	r25, 0xDF	; 223
    22b0:	95 54       	subi	r25, 0x45	; 69
    22b2:	93 30       	cpi	r25, 0x03	; 3
    22b4:	28 f4       	brcc	.+10     	; 0x22c0 <vfprintf+0x10a>
    22b6:	0c 5f       	subi	r16, 0xFC	; 252
    22b8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ba:	9f e3       	ldi	r25, 0x3F	; 63
    22bc:	99 83       	std	Y+1, r25	; 0x01
    22be:	0d c0       	rjmp	.+26     	; 0x22da <vfprintf+0x124>
    22c0:	83 36       	cpi	r24, 0x63	; 99
    22c2:	31 f0       	breq	.+12     	; 0x22d0 <vfprintf+0x11a>
    22c4:	83 37       	cpi	r24, 0x73	; 115
    22c6:	71 f0       	breq	.+28     	; 0x22e4 <vfprintf+0x12e>
    22c8:	83 35       	cpi	r24, 0x53	; 83
    22ca:	09 f0       	breq	.+2      	; 0x22ce <vfprintf+0x118>
    22cc:	59 c0       	rjmp	.+178    	; 0x2380 <vfprintf+0x1ca>
    22ce:	21 c0       	rjmp	.+66     	; 0x2312 <vfprintf+0x15c>
    22d0:	f8 01       	movw	r30, r16
    22d2:	80 81       	ld	r24, Z
    22d4:	89 83       	std	Y+1, r24	; 0x01
    22d6:	0e 5f       	subi	r16, 0xFE	; 254
    22d8:	1f 4f       	sbci	r17, 0xFF	; 255
    22da:	88 24       	eor	r8, r8
    22dc:	83 94       	inc	r8
    22de:	91 2c       	mov	r9, r1
    22e0:	53 01       	movw	r10, r6
    22e2:	13 c0       	rjmp	.+38     	; 0x230a <vfprintf+0x154>
    22e4:	28 01       	movw	r4, r16
    22e6:	f2 e0       	ldi	r31, 0x02	; 2
    22e8:	4f 0e       	add	r4, r31
    22ea:	51 1c       	adc	r5, r1
    22ec:	f8 01       	movw	r30, r16
    22ee:	a0 80       	ld	r10, Z
    22f0:	b1 80       	ldd	r11, Z+1	; 0x01
    22f2:	36 fe       	sbrs	r3, 6
    22f4:	03 c0       	rjmp	.+6      	; 0x22fc <vfprintf+0x146>
    22f6:	69 2d       	mov	r22, r9
    22f8:	70 e0       	ldi	r23, 0x00	; 0
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <vfprintf+0x14a>
    22fc:	6f ef       	ldi	r22, 0xFF	; 255
    22fe:	7f ef       	ldi	r23, 0xFF	; 255
    2300:	c5 01       	movw	r24, r10
    2302:	0e 94 c7 12 	call	0x258e	; 0x258e <strnlen>
    2306:	4c 01       	movw	r8, r24
    2308:	82 01       	movw	r16, r4
    230a:	f3 2d       	mov	r31, r3
    230c:	ff 77       	andi	r31, 0x7F	; 127
    230e:	3f 2e       	mov	r3, r31
    2310:	16 c0       	rjmp	.+44     	; 0x233e <vfprintf+0x188>
    2312:	28 01       	movw	r4, r16
    2314:	22 e0       	ldi	r18, 0x02	; 2
    2316:	42 0e       	add	r4, r18
    2318:	51 1c       	adc	r5, r1
    231a:	f8 01       	movw	r30, r16
    231c:	a0 80       	ld	r10, Z
    231e:	b1 80       	ldd	r11, Z+1	; 0x01
    2320:	36 fe       	sbrs	r3, 6
    2322:	03 c0       	rjmp	.+6      	; 0x232a <vfprintf+0x174>
    2324:	69 2d       	mov	r22, r9
    2326:	70 e0       	ldi	r23, 0x00	; 0
    2328:	02 c0       	rjmp	.+4      	; 0x232e <vfprintf+0x178>
    232a:	6f ef       	ldi	r22, 0xFF	; 255
    232c:	7f ef       	ldi	r23, 0xFF	; 255
    232e:	c5 01       	movw	r24, r10
    2330:	0e 94 bc 12 	call	0x2578	; 0x2578 <strnlen_P>
    2334:	4c 01       	movw	r8, r24
    2336:	f3 2d       	mov	r31, r3
    2338:	f0 68       	ori	r31, 0x80	; 128
    233a:	3f 2e       	mov	r3, r31
    233c:	82 01       	movw	r16, r4
    233e:	33 fc       	sbrc	r3, 3
    2340:	1b c0       	rjmp	.+54     	; 0x2378 <vfprintf+0x1c2>
    2342:	82 2d       	mov	r24, r2
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	88 16       	cp	r8, r24
    2348:	99 06       	cpc	r9, r25
    234a:	b0 f4       	brcc	.+44     	; 0x2378 <vfprintf+0x1c2>
    234c:	b6 01       	movw	r22, r12
    234e:	80 e2       	ldi	r24, 0x20	; 32
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <fputc>
    2356:	2a 94       	dec	r2
    2358:	f4 cf       	rjmp	.-24     	; 0x2342 <vfprintf+0x18c>
    235a:	f5 01       	movw	r30, r10
    235c:	37 fc       	sbrc	r3, 7
    235e:	85 91       	lpm	r24, Z+
    2360:	37 fe       	sbrs	r3, 7
    2362:	81 91       	ld	r24, Z+
    2364:	5f 01       	movw	r10, r30
    2366:	b6 01       	movw	r22, r12
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <fputc>
    236e:	21 10       	cpse	r2, r1
    2370:	2a 94       	dec	r2
    2372:	21 e0       	ldi	r18, 0x01	; 1
    2374:	82 1a       	sub	r8, r18
    2376:	91 08       	sbc	r9, r1
    2378:	81 14       	cp	r8, r1
    237a:	91 04       	cpc	r9, r1
    237c:	71 f7       	brne	.-36     	; 0x235a <vfprintf+0x1a4>
    237e:	e8 c0       	rjmp	.+464    	; 0x2550 <vfprintf+0x39a>
    2380:	84 36       	cpi	r24, 0x64	; 100
    2382:	11 f0       	breq	.+4      	; 0x2388 <vfprintf+0x1d2>
    2384:	89 36       	cpi	r24, 0x69	; 105
    2386:	41 f5       	brne	.+80     	; 0x23d8 <vfprintf+0x222>
    2388:	f8 01       	movw	r30, r16
    238a:	37 fe       	sbrs	r3, 7
    238c:	07 c0       	rjmp	.+14     	; 0x239c <vfprintf+0x1e6>
    238e:	60 81       	ld	r22, Z
    2390:	71 81       	ldd	r23, Z+1	; 0x01
    2392:	82 81       	ldd	r24, Z+2	; 0x02
    2394:	93 81       	ldd	r25, Z+3	; 0x03
    2396:	0c 5f       	subi	r16, 0xFC	; 252
    2398:	1f 4f       	sbci	r17, 0xFF	; 255
    239a:	08 c0       	rjmp	.+16     	; 0x23ac <vfprintf+0x1f6>
    239c:	60 81       	ld	r22, Z
    239e:	71 81       	ldd	r23, Z+1	; 0x01
    23a0:	07 2e       	mov	r0, r23
    23a2:	00 0c       	add	r0, r0
    23a4:	88 0b       	sbc	r24, r24
    23a6:	99 0b       	sbc	r25, r25
    23a8:	0e 5f       	subi	r16, 0xFE	; 254
    23aa:	1f 4f       	sbci	r17, 0xFF	; 255
    23ac:	f3 2d       	mov	r31, r3
    23ae:	ff 76       	andi	r31, 0x6F	; 111
    23b0:	3f 2e       	mov	r3, r31
    23b2:	97 ff       	sbrs	r25, 7
    23b4:	09 c0       	rjmp	.+18     	; 0x23c8 <vfprintf+0x212>
    23b6:	90 95       	com	r25
    23b8:	80 95       	com	r24
    23ba:	70 95       	com	r23
    23bc:	61 95       	neg	r22
    23be:	7f 4f       	sbci	r23, 0xFF	; 255
    23c0:	8f 4f       	sbci	r24, 0xFF	; 255
    23c2:	9f 4f       	sbci	r25, 0xFF	; 255
    23c4:	f0 68       	ori	r31, 0x80	; 128
    23c6:	3f 2e       	mov	r3, r31
    23c8:	2a e0       	ldi	r18, 0x0A	; 10
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	a3 01       	movw	r20, r6
    23ce:	0e 94 0e 13 	call	0x261c	; 0x261c <__ultoa_invert>
    23d2:	88 2e       	mov	r8, r24
    23d4:	86 18       	sub	r8, r6
    23d6:	45 c0       	rjmp	.+138    	; 0x2462 <vfprintf+0x2ac>
    23d8:	85 37       	cpi	r24, 0x75	; 117
    23da:	31 f4       	brne	.+12     	; 0x23e8 <vfprintf+0x232>
    23dc:	23 2d       	mov	r18, r3
    23de:	2f 7e       	andi	r18, 0xEF	; 239
    23e0:	b2 2e       	mov	r11, r18
    23e2:	2a e0       	ldi	r18, 0x0A	; 10
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	25 c0       	rjmp	.+74     	; 0x2432 <vfprintf+0x27c>
    23e8:	93 2d       	mov	r25, r3
    23ea:	99 7f       	andi	r25, 0xF9	; 249
    23ec:	b9 2e       	mov	r11, r25
    23ee:	8f 36       	cpi	r24, 0x6F	; 111
    23f0:	c1 f0       	breq	.+48     	; 0x2422 <vfprintf+0x26c>
    23f2:	18 f4       	brcc	.+6      	; 0x23fa <vfprintf+0x244>
    23f4:	88 35       	cpi	r24, 0x58	; 88
    23f6:	79 f0       	breq	.+30     	; 0x2416 <vfprintf+0x260>
    23f8:	b5 c0       	rjmp	.+362    	; 0x2564 <vfprintf+0x3ae>
    23fa:	80 37       	cpi	r24, 0x70	; 112
    23fc:	19 f0       	breq	.+6      	; 0x2404 <vfprintf+0x24e>
    23fe:	88 37       	cpi	r24, 0x78	; 120
    2400:	21 f0       	breq	.+8      	; 0x240a <vfprintf+0x254>
    2402:	b0 c0       	rjmp	.+352    	; 0x2564 <vfprintf+0x3ae>
    2404:	e9 2f       	mov	r30, r25
    2406:	e0 61       	ori	r30, 0x10	; 16
    2408:	be 2e       	mov	r11, r30
    240a:	b4 fe       	sbrs	r11, 4
    240c:	0d c0       	rjmp	.+26     	; 0x2428 <vfprintf+0x272>
    240e:	fb 2d       	mov	r31, r11
    2410:	f4 60       	ori	r31, 0x04	; 4
    2412:	bf 2e       	mov	r11, r31
    2414:	09 c0       	rjmp	.+18     	; 0x2428 <vfprintf+0x272>
    2416:	34 fe       	sbrs	r3, 4
    2418:	0a c0       	rjmp	.+20     	; 0x242e <vfprintf+0x278>
    241a:	29 2f       	mov	r18, r25
    241c:	26 60       	ori	r18, 0x06	; 6
    241e:	b2 2e       	mov	r11, r18
    2420:	06 c0       	rjmp	.+12     	; 0x242e <vfprintf+0x278>
    2422:	28 e0       	ldi	r18, 0x08	; 8
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	05 c0       	rjmp	.+10     	; 0x2432 <vfprintf+0x27c>
    2428:	20 e1       	ldi	r18, 0x10	; 16
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <vfprintf+0x27c>
    242e:	20 e1       	ldi	r18, 0x10	; 16
    2430:	32 e0       	ldi	r19, 0x02	; 2
    2432:	f8 01       	movw	r30, r16
    2434:	b7 fe       	sbrs	r11, 7
    2436:	07 c0       	rjmp	.+14     	; 0x2446 <vfprintf+0x290>
    2438:	60 81       	ld	r22, Z
    243a:	71 81       	ldd	r23, Z+1	; 0x01
    243c:	82 81       	ldd	r24, Z+2	; 0x02
    243e:	93 81       	ldd	r25, Z+3	; 0x03
    2440:	0c 5f       	subi	r16, 0xFC	; 252
    2442:	1f 4f       	sbci	r17, 0xFF	; 255
    2444:	06 c0       	rjmp	.+12     	; 0x2452 <vfprintf+0x29c>
    2446:	60 81       	ld	r22, Z
    2448:	71 81       	ldd	r23, Z+1	; 0x01
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	0e 5f       	subi	r16, 0xFE	; 254
    2450:	1f 4f       	sbci	r17, 0xFF	; 255
    2452:	a3 01       	movw	r20, r6
    2454:	0e 94 0e 13 	call	0x261c	; 0x261c <__ultoa_invert>
    2458:	88 2e       	mov	r8, r24
    245a:	86 18       	sub	r8, r6
    245c:	fb 2d       	mov	r31, r11
    245e:	ff 77       	andi	r31, 0x7F	; 127
    2460:	3f 2e       	mov	r3, r31
    2462:	36 fe       	sbrs	r3, 6
    2464:	0d c0       	rjmp	.+26     	; 0x2480 <vfprintf+0x2ca>
    2466:	23 2d       	mov	r18, r3
    2468:	2e 7f       	andi	r18, 0xFE	; 254
    246a:	a2 2e       	mov	r10, r18
    246c:	89 14       	cp	r8, r9
    246e:	58 f4       	brcc	.+22     	; 0x2486 <vfprintf+0x2d0>
    2470:	34 fe       	sbrs	r3, 4
    2472:	0b c0       	rjmp	.+22     	; 0x248a <vfprintf+0x2d4>
    2474:	32 fc       	sbrc	r3, 2
    2476:	09 c0       	rjmp	.+18     	; 0x248a <vfprintf+0x2d4>
    2478:	83 2d       	mov	r24, r3
    247a:	8e 7e       	andi	r24, 0xEE	; 238
    247c:	a8 2e       	mov	r10, r24
    247e:	05 c0       	rjmp	.+10     	; 0x248a <vfprintf+0x2d4>
    2480:	b8 2c       	mov	r11, r8
    2482:	a3 2c       	mov	r10, r3
    2484:	03 c0       	rjmp	.+6      	; 0x248c <vfprintf+0x2d6>
    2486:	b8 2c       	mov	r11, r8
    2488:	01 c0       	rjmp	.+2      	; 0x248c <vfprintf+0x2d6>
    248a:	b9 2c       	mov	r11, r9
    248c:	a4 fe       	sbrs	r10, 4
    248e:	0f c0       	rjmp	.+30     	; 0x24ae <vfprintf+0x2f8>
    2490:	fe 01       	movw	r30, r28
    2492:	e8 0d       	add	r30, r8
    2494:	f1 1d       	adc	r31, r1
    2496:	80 81       	ld	r24, Z
    2498:	80 33       	cpi	r24, 0x30	; 48
    249a:	21 f4       	brne	.+8      	; 0x24a4 <vfprintf+0x2ee>
    249c:	9a 2d       	mov	r25, r10
    249e:	99 7e       	andi	r25, 0xE9	; 233
    24a0:	a9 2e       	mov	r10, r25
    24a2:	09 c0       	rjmp	.+18     	; 0x24b6 <vfprintf+0x300>
    24a4:	a2 fe       	sbrs	r10, 2
    24a6:	06 c0       	rjmp	.+12     	; 0x24b4 <vfprintf+0x2fe>
    24a8:	b3 94       	inc	r11
    24aa:	b3 94       	inc	r11
    24ac:	04 c0       	rjmp	.+8      	; 0x24b6 <vfprintf+0x300>
    24ae:	8a 2d       	mov	r24, r10
    24b0:	86 78       	andi	r24, 0x86	; 134
    24b2:	09 f0       	breq	.+2      	; 0x24b6 <vfprintf+0x300>
    24b4:	b3 94       	inc	r11
    24b6:	a3 fc       	sbrc	r10, 3
    24b8:	11 c0       	rjmp	.+34     	; 0x24dc <vfprintf+0x326>
    24ba:	a0 fe       	sbrs	r10, 0
    24bc:	06 c0       	rjmp	.+12     	; 0x24ca <vfprintf+0x314>
    24be:	b2 14       	cp	r11, r2
    24c0:	88 f4       	brcc	.+34     	; 0x24e4 <vfprintf+0x32e>
    24c2:	28 0c       	add	r2, r8
    24c4:	92 2c       	mov	r9, r2
    24c6:	9b 18       	sub	r9, r11
    24c8:	0e c0       	rjmp	.+28     	; 0x24e6 <vfprintf+0x330>
    24ca:	b2 14       	cp	r11, r2
    24cc:	60 f4       	brcc	.+24     	; 0x24e6 <vfprintf+0x330>
    24ce:	b6 01       	movw	r22, r12
    24d0:	80 e2       	ldi	r24, 0x20	; 32
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <fputc>
    24d8:	b3 94       	inc	r11
    24da:	f7 cf       	rjmp	.-18     	; 0x24ca <vfprintf+0x314>
    24dc:	b2 14       	cp	r11, r2
    24de:	18 f4       	brcc	.+6      	; 0x24e6 <vfprintf+0x330>
    24e0:	2b 18       	sub	r2, r11
    24e2:	02 c0       	rjmp	.+4      	; 0x24e8 <vfprintf+0x332>
    24e4:	98 2c       	mov	r9, r8
    24e6:	21 2c       	mov	r2, r1
    24e8:	a4 fe       	sbrs	r10, 4
    24ea:	10 c0       	rjmp	.+32     	; 0x250c <vfprintf+0x356>
    24ec:	b6 01       	movw	r22, r12
    24ee:	80 e3       	ldi	r24, 0x30	; 48
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <fputc>
    24f6:	a2 fe       	sbrs	r10, 2
    24f8:	17 c0       	rjmp	.+46     	; 0x2528 <vfprintf+0x372>
    24fa:	a1 fc       	sbrc	r10, 1
    24fc:	03 c0       	rjmp	.+6      	; 0x2504 <vfprintf+0x34e>
    24fe:	88 e7       	ldi	r24, 0x78	; 120
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <vfprintf+0x352>
    2504:	88 e5       	ldi	r24, 0x58	; 88
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	b6 01       	movw	r22, r12
    250a:	0c c0       	rjmp	.+24     	; 0x2524 <vfprintf+0x36e>
    250c:	8a 2d       	mov	r24, r10
    250e:	86 78       	andi	r24, 0x86	; 134
    2510:	59 f0       	breq	.+22     	; 0x2528 <vfprintf+0x372>
    2512:	a1 fe       	sbrs	r10, 1
    2514:	02 c0       	rjmp	.+4      	; 0x251a <vfprintf+0x364>
    2516:	8b e2       	ldi	r24, 0x2B	; 43
    2518:	01 c0       	rjmp	.+2      	; 0x251c <vfprintf+0x366>
    251a:	80 e2       	ldi	r24, 0x20	; 32
    251c:	a7 fc       	sbrc	r10, 7
    251e:	8d e2       	ldi	r24, 0x2D	; 45
    2520:	b6 01       	movw	r22, r12
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <fputc>
    2528:	89 14       	cp	r8, r9
    252a:	38 f4       	brcc	.+14     	; 0x253a <vfprintf+0x384>
    252c:	b6 01       	movw	r22, r12
    252e:	80 e3       	ldi	r24, 0x30	; 48
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <fputc>
    2536:	9a 94       	dec	r9
    2538:	f7 cf       	rjmp	.-18     	; 0x2528 <vfprintf+0x372>
    253a:	8a 94       	dec	r8
    253c:	f3 01       	movw	r30, r6
    253e:	e8 0d       	add	r30, r8
    2540:	f1 1d       	adc	r31, r1
    2542:	80 81       	ld	r24, Z
    2544:	b6 01       	movw	r22, r12
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <fputc>
    254c:	81 10       	cpse	r8, r1
    254e:	f5 cf       	rjmp	.-22     	; 0x253a <vfprintf+0x384>
    2550:	22 20       	and	r2, r2
    2552:	09 f4       	brne	.+2      	; 0x2556 <vfprintf+0x3a0>
    2554:	42 ce       	rjmp	.-892    	; 0x21da <vfprintf+0x24>
    2556:	b6 01       	movw	r22, r12
    2558:	80 e2       	ldi	r24, 0x20	; 32
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <fputc>
    2560:	2a 94       	dec	r2
    2562:	f6 cf       	rjmp	.-20     	; 0x2550 <vfprintf+0x39a>
    2564:	f6 01       	movw	r30, r12
    2566:	86 81       	ldd	r24, Z+6	; 0x06
    2568:	97 81       	ldd	r25, Z+7	; 0x07
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <vfprintf+0x3ba>
    256c:	8f ef       	ldi	r24, 0xFF	; 255
    256e:	9f ef       	ldi	r25, 0xFF	; 255
    2570:	2b 96       	adiw	r28, 0x0b	; 11
    2572:	e2 e1       	ldi	r30, 0x12	; 18
    2574:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__epilogue_restores__>

00002578 <strnlen_P>:
    2578:	fc 01       	movw	r30, r24
    257a:	05 90       	lpm	r0, Z+
    257c:	61 50       	subi	r22, 0x01	; 1
    257e:	70 40       	sbci	r23, 0x00	; 0
    2580:	01 10       	cpse	r0, r1
    2582:	d8 f7       	brcc	.-10     	; 0x257a <strnlen_P+0x2>
    2584:	80 95       	com	r24
    2586:	90 95       	com	r25
    2588:	8e 0f       	add	r24, r30
    258a:	9f 1f       	adc	r25, r31
    258c:	08 95       	ret

0000258e <strnlen>:
    258e:	fc 01       	movw	r30, r24
    2590:	61 50       	subi	r22, 0x01	; 1
    2592:	70 40       	sbci	r23, 0x00	; 0
    2594:	01 90       	ld	r0, Z+
    2596:	01 10       	cpse	r0, r1
    2598:	d8 f7       	brcc	.-10     	; 0x2590 <strnlen+0x2>
    259a:	80 95       	com	r24
    259c:	90 95       	com	r25
    259e:	8e 0f       	add	r24, r30
    25a0:	9f 1f       	adc	r25, r31
    25a2:	08 95       	ret

000025a4 <fputc>:
    25a4:	0f 93       	push	r16
    25a6:	1f 93       	push	r17
    25a8:	cf 93       	push	r28
    25aa:	df 93       	push	r29
    25ac:	fb 01       	movw	r30, r22
    25ae:	23 81       	ldd	r18, Z+3	; 0x03
    25b0:	21 fd       	sbrc	r18, 1
    25b2:	03 c0       	rjmp	.+6      	; 0x25ba <fputc+0x16>
    25b4:	8f ef       	ldi	r24, 0xFF	; 255
    25b6:	9f ef       	ldi	r25, 0xFF	; 255
    25b8:	2c c0       	rjmp	.+88     	; 0x2612 <fputc+0x6e>
    25ba:	22 ff       	sbrs	r18, 2
    25bc:	16 c0       	rjmp	.+44     	; 0x25ea <fputc+0x46>
    25be:	46 81       	ldd	r20, Z+6	; 0x06
    25c0:	57 81       	ldd	r21, Z+7	; 0x07
    25c2:	24 81       	ldd	r18, Z+4	; 0x04
    25c4:	35 81       	ldd	r19, Z+5	; 0x05
    25c6:	42 17       	cp	r20, r18
    25c8:	53 07       	cpc	r21, r19
    25ca:	44 f4       	brge	.+16     	; 0x25dc <fputc+0x38>
    25cc:	a0 81       	ld	r26, Z
    25ce:	b1 81       	ldd	r27, Z+1	; 0x01
    25d0:	9d 01       	movw	r18, r26
    25d2:	2f 5f       	subi	r18, 0xFF	; 255
    25d4:	3f 4f       	sbci	r19, 0xFF	; 255
    25d6:	31 83       	std	Z+1, r19	; 0x01
    25d8:	20 83       	st	Z, r18
    25da:	8c 93       	st	X, r24
    25dc:	26 81       	ldd	r18, Z+6	; 0x06
    25de:	37 81       	ldd	r19, Z+7	; 0x07
    25e0:	2f 5f       	subi	r18, 0xFF	; 255
    25e2:	3f 4f       	sbci	r19, 0xFF	; 255
    25e4:	37 83       	std	Z+7, r19	; 0x07
    25e6:	26 83       	std	Z+6, r18	; 0x06
    25e8:	14 c0       	rjmp	.+40     	; 0x2612 <fputc+0x6e>
    25ea:	8b 01       	movw	r16, r22
    25ec:	ec 01       	movw	r28, r24
    25ee:	fb 01       	movw	r30, r22
    25f0:	00 84       	ldd	r0, Z+8	; 0x08
    25f2:	f1 85       	ldd	r31, Z+9	; 0x09
    25f4:	e0 2d       	mov	r30, r0
    25f6:	09 95       	icall
    25f8:	89 2b       	or	r24, r25
    25fa:	e1 f6       	brne	.-72     	; 0x25b4 <fputc+0x10>
    25fc:	d8 01       	movw	r26, r16
    25fe:	16 96       	adiw	r26, 0x06	; 6
    2600:	8d 91       	ld	r24, X+
    2602:	9c 91       	ld	r25, X
    2604:	17 97       	sbiw	r26, 0x07	; 7
    2606:	01 96       	adiw	r24, 0x01	; 1
    2608:	17 96       	adiw	r26, 0x07	; 7
    260a:	9c 93       	st	X, r25
    260c:	8e 93       	st	-X, r24
    260e:	16 97       	sbiw	r26, 0x06	; 6
    2610:	ce 01       	movw	r24, r28
    2612:	df 91       	pop	r29
    2614:	cf 91       	pop	r28
    2616:	1f 91       	pop	r17
    2618:	0f 91       	pop	r16
    261a:	08 95       	ret

0000261c <__ultoa_invert>:
    261c:	fa 01       	movw	r30, r20
    261e:	aa 27       	eor	r26, r26
    2620:	28 30       	cpi	r18, 0x08	; 8
    2622:	51 f1       	breq	.+84     	; 0x2678 <__ultoa_invert+0x5c>
    2624:	20 31       	cpi	r18, 0x10	; 16
    2626:	81 f1       	breq	.+96     	; 0x2688 <__ultoa_invert+0x6c>
    2628:	e8 94       	clt
    262a:	6f 93       	push	r22
    262c:	6e 7f       	andi	r22, 0xFE	; 254
    262e:	6e 5f       	subi	r22, 0xFE	; 254
    2630:	7f 4f       	sbci	r23, 0xFF	; 255
    2632:	8f 4f       	sbci	r24, 0xFF	; 255
    2634:	9f 4f       	sbci	r25, 0xFF	; 255
    2636:	af 4f       	sbci	r26, 0xFF	; 255
    2638:	b1 e0       	ldi	r27, 0x01	; 1
    263a:	3e d0       	rcall	.+124    	; 0x26b8 <__ultoa_invert+0x9c>
    263c:	b4 e0       	ldi	r27, 0x04	; 4
    263e:	3c d0       	rcall	.+120    	; 0x26b8 <__ultoa_invert+0x9c>
    2640:	67 0f       	add	r22, r23
    2642:	78 1f       	adc	r23, r24
    2644:	89 1f       	adc	r24, r25
    2646:	9a 1f       	adc	r25, r26
    2648:	a1 1d       	adc	r26, r1
    264a:	68 0f       	add	r22, r24
    264c:	79 1f       	adc	r23, r25
    264e:	8a 1f       	adc	r24, r26
    2650:	91 1d       	adc	r25, r1
    2652:	a1 1d       	adc	r26, r1
    2654:	6a 0f       	add	r22, r26
    2656:	71 1d       	adc	r23, r1
    2658:	81 1d       	adc	r24, r1
    265a:	91 1d       	adc	r25, r1
    265c:	a1 1d       	adc	r26, r1
    265e:	20 d0       	rcall	.+64     	; 0x26a0 <__ultoa_invert+0x84>
    2660:	09 f4       	brne	.+2      	; 0x2664 <__ultoa_invert+0x48>
    2662:	68 94       	set
    2664:	3f 91       	pop	r19
    2666:	2a e0       	ldi	r18, 0x0A	; 10
    2668:	26 9f       	mul	r18, r22
    266a:	11 24       	eor	r1, r1
    266c:	30 19       	sub	r19, r0
    266e:	30 5d       	subi	r19, 0xD0	; 208
    2670:	31 93       	st	Z+, r19
    2672:	de f6       	brtc	.-74     	; 0x262a <__ultoa_invert+0xe>
    2674:	cf 01       	movw	r24, r30
    2676:	08 95       	ret
    2678:	46 2f       	mov	r20, r22
    267a:	47 70       	andi	r20, 0x07	; 7
    267c:	40 5d       	subi	r20, 0xD0	; 208
    267e:	41 93       	st	Z+, r20
    2680:	b3 e0       	ldi	r27, 0x03	; 3
    2682:	0f d0       	rcall	.+30     	; 0x26a2 <__ultoa_invert+0x86>
    2684:	c9 f7       	brne	.-14     	; 0x2678 <__ultoa_invert+0x5c>
    2686:	f6 cf       	rjmp	.-20     	; 0x2674 <__ultoa_invert+0x58>
    2688:	46 2f       	mov	r20, r22
    268a:	4f 70       	andi	r20, 0x0F	; 15
    268c:	40 5d       	subi	r20, 0xD0	; 208
    268e:	4a 33       	cpi	r20, 0x3A	; 58
    2690:	18 f0       	brcs	.+6      	; 0x2698 <__ultoa_invert+0x7c>
    2692:	49 5d       	subi	r20, 0xD9	; 217
    2694:	31 fd       	sbrc	r19, 1
    2696:	40 52       	subi	r20, 0x20	; 32
    2698:	41 93       	st	Z+, r20
    269a:	02 d0       	rcall	.+4      	; 0x26a0 <__ultoa_invert+0x84>
    269c:	a9 f7       	brne	.-22     	; 0x2688 <__ultoa_invert+0x6c>
    269e:	ea cf       	rjmp	.-44     	; 0x2674 <__ultoa_invert+0x58>
    26a0:	b4 e0       	ldi	r27, 0x04	; 4
    26a2:	a6 95       	lsr	r26
    26a4:	97 95       	ror	r25
    26a6:	87 95       	ror	r24
    26a8:	77 95       	ror	r23
    26aa:	67 95       	ror	r22
    26ac:	ba 95       	dec	r27
    26ae:	c9 f7       	brne	.-14     	; 0x26a2 <__ultoa_invert+0x86>
    26b0:	00 97       	sbiw	r24, 0x00	; 0
    26b2:	61 05       	cpc	r22, r1
    26b4:	71 05       	cpc	r23, r1
    26b6:	08 95       	ret
    26b8:	9b 01       	movw	r18, r22
    26ba:	ac 01       	movw	r20, r24
    26bc:	0a 2e       	mov	r0, r26
    26be:	06 94       	lsr	r0
    26c0:	57 95       	ror	r21
    26c2:	47 95       	ror	r20
    26c4:	37 95       	ror	r19
    26c6:	27 95       	ror	r18
    26c8:	ba 95       	dec	r27
    26ca:	c9 f7       	brne	.-14     	; 0x26be <__ultoa_invert+0xa2>
    26cc:	62 0f       	add	r22, r18
    26ce:	73 1f       	adc	r23, r19
    26d0:	84 1f       	adc	r24, r20
    26d2:	95 1f       	adc	r25, r21
    26d4:	a0 1d       	adc	r26, r0
    26d6:	08 95       	ret

000026d8 <__prologue_saves__>:
    26d8:	2f 92       	push	r2
    26da:	3f 92       	push	r3
    26dc:	4f 92       	push	r4
    26de:	5f 92       	push	r5
    26e0:	6f 92       	push	r6
    26e2:	7f 92       	push	r7
    26e4:	8f 92       	push	r8
    26e6:	9f 92       	push	r9
    26e8:	af 92       	push	r10
    26ea:	bf 92       	push	r11
    26ec:	cf 92       	push	r12
    26ee:	df 92       	push	r13
    26f0:	ef 92       	push	r14
    26f2:	ff 92       	push	r15
    26f4:	0f 93       	push	r16
    26f6:	1f 93       	push	r17
    26f8:	cf 93       	push	r28
    26fa:	df 93       	push	r29
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	ca 1b       	sub	r28, r26
    2702:	db 0b       	sbc	r29, r27
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	f8 94       	cli
    2708:	de bf       	out	0x3e, r29	; 62
    270a:	0f be       	out	0x3f, r0	; 63
    270c:	cd bf       	out	0x3d, r28	; 61
    270e:	09 94       	ijmp

00002710 <__epilogue_restores__>:
    2710:	2a 88       	ldd	r2, Y+18	; 0x12
    2712:	39 88       	ldd	r3, Y+17	; 0x11
    2714:	48 88       	ldd	r4, Y+16	; 0x10
    2716:	5f 84       	ldd	r5, Y+15	; 0x0f
    2718:	6e 84       	ldd	r6, Y+14	; 0x0e
    271a:	7d 84       	ldd	r7, Y+13	; 0x0d
    271c:	8c 84       	ldd	r8, Y+12	; 0x0c
    271e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2720:	aa 84       	ldd	r10, Y+10	; 0x0a
    2722:	b9 84       	ldd	r11, Y+9	; 0x09
    2724:	c8 84       	ldd	r12, Y+8	; 0x08
    2726:	df 80       	ldd	r13, Y+7	; 0x07
    2728:	ee 80       	ldd	r14, Y+6	; 0x06
    272a:	fd 80       	ldd	r15, Y+5	; 0x05
    272c:	0c 81       	ldd	r16, Y+4	; 0x04
    272e:	1b 81       	ldd	r17, Y+3	; 0x03
    2730:	aa 81       	ldd	r26, Y+2	; 0x02
    2732:	b9 81       	ldd	r27, Y+1	; 0x01
    2734:	ce 0f       	add	r28, r30
    2736:	d1 1d       	adc	r29, r1
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	ed 01       	movw	r28, r26
    2744:	08 95       	ret

00002746 <_exit>:
    2746:	f8 94       	cli

00002748 <__stop_program>:
    2748:	ff cf       	rjmp	.-2      	; 0x2748 <__stop_program>
